{"posts":[{"title":"Règles HTML/CSS pour les débutants","author":"Emmanuel B.","date":"2014-05-06 02:23:53","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"css-pour-les-debutants","content":"<p>Écumant les forums de codage et autres coins de geeks, je me rends compte que les mêmes erreurs reviennent très souvent dans le code des débutants (et même de moins débutants). Alors, faute de pouvoir traquer et éradiquer les sources qui propagent du html écrit à la truelle et du javascript de 12 ans d’âge, je tente — vaille que vaille — d’éduquer les jeunes délinquants du markup dont je croise la prose.</p>\n<p>Et comme je suis une feignasse, plutôt que de répéter trouzmille fois les mêmes choses, j’en fais ici un condensé.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"lexique\">Lexique</h2>\n<p>Le premier problème récurrent, c&#39;est de ne pas connaître les noms des différents éléments qui composent le code. C&#39;est bien plus compliqué d’exposer un problème quand on ne sait pas comment s&#39;appelle quelque chose. Aussi, voici un schéma explicatif très simple de la terminologie HTML/CSS.</p>\n<pre><code class=\"html\">&lt;balise attribut=&quot;valeur&quot;&gt;\n</code></pre>\n<pre><code class=\"css\">déclaration {\n    propriété: valeur;\n}\n</code></pre>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Une déclaration CSS est composée de sélecteurs. Si vous ne voyez pas de quoi il s&#39;agit, voir l’article sur les <a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-les-selecteurs-partie1-css2/\" title=\"Principes du CSS – Les sélecteurs (Partie1 : cSS2)\">sélecteurs CSS</a>.&lt;/div&gt;\n\n</p>\n<p>Voilà ; dorénavant, interdiction de parler de &quot;propriétés html&quot; ou de &quot;balises css&quot;.</p>\n<h2 id=\"html\">HTML</h2>\n<h3 id=\"la-balise-br-\">La balise &lt;br /&gt;</h3>\n<p>Une erreur courante (Mais où avez-vous trouvé ça ?!) consiste à écrire la balise <code>&lt;br /&gt;</code> en inversant le sens d’auto-fermeture : <code>&lt;/br&gt;</code>. Ça n’existe pas. C&#39;est soit <code>&lt;br /&gt;</code> (xhtml ou html) soit <code>&lt;br&gt;</code> (html seulement) ; pas <code>&lt;/br&gt;</code> ni <code>&lt;br/&gt;</code> (l’espace n’est pas facultatif).</p>\n<p>Et cette balise ne sert qu&#39;à revenir à la ligne au sein d’un bloc de texte. Elle ne sert pas à sauter des lignes, ni à faire des marges.</p>\n<h3 id=\"attribut-alt-sur-les-images\">Attribut alt sur les images</h3>\n<p>L’attribut <code>alt=&quot;&quot;</code> est obligatoire sur les balises <code>&lt;img /&gt;</code>.</p>\n<h3 id=\"ouverture-et-fermeture-des-balises\">Ouverture et fermeture des balises</h3>\n<p>Les balises doivent être imbriquées proprement. C&#39;est à dire que lorsque vous ouvrez une balise puis une seconde, il faut refermer la seconde avant la première.</p>\n<p>Bon :</p>\n<pre><code class=\"html\">&lt;div&gt;\n    &lt;span&gt;\n    &lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Mauvais :</p>\n<pre><code class=\"html\">&lt;div&gt;\n    &lt;span&gt;\n    &lt;/div&gt;\n&lt;/span&gt;\n</code></pre>\n<h3 id=\"balises-d-pr-ci-es\">Balises dépréciées</h3>\n<p>On est en 2014 au moment de la rédaction de cet article, et je vois encore régulièrement du code obsolète depuis l’arrivée du xhtml (2001). Il est important de noter que désormais (et depuis longtemps maintenant), on sépare la structure et le contenu (html) de la mise en forme (css).</p>\n<p>Il est primordial de comprendre ce principe de sémantique du HTML. Lorsque qu&#39;on utilise une balise <code>&lt;em&gt;</code>, ce n’est pas pour mettre du texte en italique, c&#39;est pour créer une <a href=\"https://fr.wiktionary.org/wiki/emphase\" title=\"emphase — Wiktionnaire\">emphase</a> ; or, il se trouve que dans les règles d’écriture occidentale, l’emphase est exprimée en italique. Exemple : &quot;Tu es <em>vraiment</em> sûr de ton coup ?&quot;.</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;On retient : on n’utilise pas des balises pour leur rendu, mais pour leur <strong>sens sémantique</strong>.&lt;/div&gt;\n\n</p>\n<p>De fait, toutes les balises et attributs à but esthétique doivent être définitivement supprimées de vos pages : <code>&lt;center&gt;</code>, <code>&lt;font&gt;</code>, <code>&lt;basefont&gt;</code>, <code>&lt;strike&gt;</code>.</p>\n<p>À noter que plusieurs balises dépréciées en xhtml ont fait leur retour en html5 <strong>avec un nouveau sens sémantique</strong> (tout relatif, personnellement j’ai surtout l’impression qu&#39;ils savaient pas quoi en foutre). Leurs spécifications sont assez peu claires, voire franchement brouillons. Je vous les liste quand même : <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;s&gt;</code>, <code>&lt;u&gt;</code>.</p>\n<p>De la même façon, les attributs liés au style doivent dégager : <code>alink</code>, <code>background</code>, <code>bgcolor</code>, <code>link</code>, <code>vlink</code>, <code>align</code>, <code>valing</code>, <code>hspace</code>, <code>vspace</code>, <code>border</code>, <code>height</code>, <code>width</code>, <code>nowrap</code>, <code>star</code>, <code>clear</code>, <code>noshade</code>…</p>\n<h3 id=\"marquee\">marquee</h3>\n<p>La balise <code>&lt;marquee&gt;</code> n’est pas une balise standard, n’a jamais fait partie des spécifications et n’en fera jamais partie. Ne l’utilisez pas.</p>\n<h3 id=\"les-tableaux\">Les tableaux</h3>\n<p>Les tableaux sont utilisés pour mettre des données tabulaires, comme des résultats sportifs ou des notes.</p>\n<p>En aucun cas il n’est permis de s&#39;en servir pour mettre en page son site.</p>\n<h3 id=\"attributs-d-v-nements\">Attributs d’événements</h3>\n<p>Les attributs d’événements, utilisés auparavant pour faire des appels aux fonctions javascript, sont à proscrire. Utilisez les gestionnaires d’événements directement dans un code javascript.</p>\n<p>Parmi ces attributs, on trouve notamment <code>onclick</code>, <code>onblur</code>, <code>onmouseover</code>, <code>onmouseout</code>.</p>\n<h3 id=\"les-mots-rallonge\">Les mots à rallonge</h3>\n<p>Très souvent, on tombe sur des sujets rapportant des comportements étranges de texte qui dépasse de leur contenu. Et le texte en question, est une ligne infinie de caractères, soit du &quot;aaaaaaaaaaaaaaaaaaaaaaaaa&quot; (beaucoup plus long, entendons-nous), soit du &quot;oihoihgopizeagjae&quot;. Le fait est qu&#39;aucun mot n’est aussi long, et que le texte se met en forme aux espaces qui le composent. Donc sans espace, il n’ira jamais à la ligne sans une propriété pour l’y forcer. Donc avant de songer à l’y forcer, utilisez du vrai texte factice avec un <a href=\"http://fr.lipsum.com/\" title=\"Lipsum\">générateur de lipsum</a>, qui sert justement à ça.</p>\n<h3 id=\"les-balises-structurantes\">Les balises structurantes</h3>\n<p>Les nouvelles balises de structure introduites en html5 (à savoir <code>header</code>, <code>aside</code>, <code>footer</code>, <code>nav</code>, <code>figure</code>, <code>section</code>, etc.) ne remplacent pas les <code>div</code>. On utilise toujours des <code>div</code> si on doit faire un bloc qui n’a pas de vocation sémantique particulière.</p>\n<p>De la même façon, ces balises ne sont pas uniques (sauf <code>main</code>) et ne dispensent donc pas d’utiliser classes et ID pour les cibler en CSS plutôt que de simplement utiliser leur nom d’élément. En clair, faites comme avant, mais en remplaçant les <code>div</code> lorsqu&#39;un élément sémantique est possible. Exemple : <code>&lt;header id=&quot;header&quot;&gt;</code>.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;En ce moment, la tendance est à l’utilisation quasi-exclusive de classes et à l’abandon des ID. Mais c&#39;est bien une tendance, et non une spécification du langage. Faites comme vous le sentez, mais n’abusez pas des ID !&lt;/div&gt;\n\n</p>\n<h3 id=\"la-balise-p-\">La balise &lt;p&gt;</h3>\n<p>La balise <code>&lt;p&gt;</code> est utilisée pour mettre en forme des paragraphes. Si vous n’avez pas besoin de faire des paragraphes (C&#39;est à dire plusieurs blocs de textes espacés entre eux), rien ne vous force à utiliser cette balise. Et contrairement à ce que j’ai pu lire, rien n’oblige les images à être contenues dans un paragraphe.</p>\n<h3 id=\"l-attribut-style\">L’attribut style</h3>\n<p>Évitez d’utiliser l’attribut <code>style=&quot;&quot;</code> pour mettre du CSS directement dans votre html. Outre le fait que ça rende le code difficile à maintenir (principalement à cause du problème de poids, cf. l’article sur le <a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-poids-des-declarations/\" title=\"Principes du CSS – Poids des déclarations\">poids des déclarations</a>), ça brise la séparation contenu / mise en forme.</p>\n<h2 id=\"css\">CSS</h2>\n<h3 id=\"position\">Position</h3>\n<p>L’erreur la plus répandue est de croire qu&#39;utiliser la propriété <code>position</code> est une bonne idée pour mettre en forme son site. C&#39;est <strong>FAUX</strong>. C&#39;est une très mauvaise idée, ce n’est pas fait pour ça, et ça ne vous apportera que des problèmes. Le positionnement est un système particulier qui demande d’être absolument maîtrisé avant de l’utiliser, sous peine de voir son site faire n’importe quoi.</p>\n<h3 id=\"les-pourcentages\">Les pourcentages</h3>\n<p>Une autre croyance qui a la vie dure : mettre toutes les valeurs en % serait mieux. Ce n’est pas le cas. Il n’y a que de rares cas où l’utilisation des % se justifie (notamment les grilles CSS, comme <a href=\"http://960.gs/\">960.gz</a> ou celles utilisé par <a href=\"http://getbootstrap.com/\">Bootstrap</a> ou <a href=\"http://foundation.zurb.com/\">Foundation</a>).</p>\n<p>Vous pouvez très bien faire un site extensible en n’utilisant qu&#39;un minimum de valeurs en % (un exemple : <a href=\"http://www.emmanuelbeziat.com/blog/aligner-trois-colonnes-proprement/\" title=\"Aligner trois colonnes proprement\">Aligner trois colonnes proprement</a>. Et même dans ces cas-là, n’utilisez pas les % pour des marges, elles n’ont pas à être extensibles !</p>\n<p>Les pourcentages apportent beaucoup plus de problèmes et de problématiques que de solutions, alors il faut être parfaitement certain de maîtriser son environnement avant de s&#39;en servir. <a href=\"https://jsfiddle.net/ee944u5t/\">Voici un exemple concret</a>, rencontré par un internaute d’OpenClassrooms : lorsqu&#39;on agrandi la fenêtre de rendu, on remarque un dépassement vertical (en bas). Les marges ayant été définies de façon relative (avec des pourcentages), celles-ci sont calculées par rapport à la largeur du parent, même pour les marges verticales. Donc en étirant la largeur du conteneur, on étire la marge verticale du bloc enfant… Bref, n’importe quoi.</p>\n<p>Et pensez aux propriétés <code>min-width</code> et <code>max-width</code>.</p>\n<p>Et <code>width: 100%;</code>, <a href=\"http://blog.goetter.fr/articles/width-100-tu-es-le-mal/\" title=\"Width 100%, tu es le mal !\">n’y pensez même pas</a>.</p>\n<h3 id=\"les-hauteurs\">Les hauteurs</h3>\n<p>Une erreur courante : vouloir à tout prix contrôler la hauteur des éléments de son site. C&#39;est une <strong>mauvaise</strong> idée. Une page s&#39;adapte en hauteur en fonction de son contenu. La hauteur que vous définissez par rapport à ce que vous voyez sur votre écran ne correspond pas à ce que verront les autres. Si quelqu&#39;un zoome le texte pour des questions de visibilités, si un écran est trop petit et réduis l’espace, alors le contenu va dépasser le contenant, et ce sera à la fois moche et illisible. Sauf cas très spécifiques, ne touchez pas à la hauteur des éléments, laissez-les prendre la hauteur qu&#39;ils veulent. Pour décoller le contenu des bords d’un conteneur, pensez au padding !</p>\n<h3 id=\"float-et-display\">Float et display</h3>\n<p>&lt;p&gt;Il est parfaitement inutile d’essayer de donner à un élément flottant une propriété <code>display</code>. Un flottant est <strong>TOUJOURS</strong> de type <em>block</em>, et il est <strong>IMPOSSIBLE</strong> de changer ça.</p>\n<h3 id=\"le-reset-css\">Le reset CSS</h3>\n<p>Une autre mauvaise idée. Plus d’explications dans l’article <a href=\"http://www.emmanuelbeziat.com/blog/doucement-sur-le-box-sizing/\" title=\"Doucement sur le box-sizing !\">Doucement sur le box-sizing !</a>.</p>\n<p>Et surtout, évidemment, surtout pas ça :</p>\n<pre><code class=\"css\">* { margin: 0; padding: 0; }\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Difficile d’être exhaustif, aussi cette petite liste sera complétée au fur et à mesure. Bref, maintenant que vous avez lu ça, vous avez de bonnes cartes en main. Alors faites du bon code !</p>\n"},{"title":"Participez au web !","author":"Emmanuel B.","date":"2014-06-17 20:58:08","tags":["bonnes pratiques","html/css","javascript"],"categories":["Tutoriels"],"template":"post.vue","basename":"au-web","content":"<p>Internet, c&#39;est un peu n’importe quoi. Ça fait un moment que ça existe, que tout le monde s&#39;en sert, qu&#39;on fait plein de trucs avec ; mais on s&#39;est aussi rendu compte, au bout d’un moment, que faire des trucs &quot;à peu près&quot;, ça ne pouvait fonctionner qu&#39;un temps.</p>\n<p>Ce n’est que récemment qu&#39;on s&#39;est dit que ce serait bien d’avoir des règles, des conventions, des optimisations, des structures. Plein de &quot;bonnes pratiques&quot; fleurissent tous les ans, les normes évoluent.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"le-web-ce-merdier\">Le web, ce merdier</h2>\n<p>L’un des problèmes du web, c&#39;est d’abord son accessibilité. J’entend par là que n’importe qui peut faire son site ; c&#39;est à la fois bien et mal, car ça donne naissance au meilleur comme au pire…</p>\n<p>Tout le monde peut apprendre le HTML / CSS / JavaScript / PHP. On trouve une foule de tutoriels, de cours et de ressources sur internet pour ça. Mais bien souvent, ces ressources datent, sont incomplètes et/ou véhiculent de nombreuses erreurs (même les plus réputées, et même lorsqu&#39;elles prétendent donner des certifications : <a href=\"http://fr.openclassrooms.com/\">OpenClassrooms</a>, <a href=\"http://www.w3schools.com/\">W3Schools</a>), que les élèves avides de savoir apprennent, assimilent, reproduisent et transmettent à leur tour. C&#39;est à cause de ça qu&#39;on retrouve encore aujourd’hui des horreurs de ce genre dans de nombreux sites :</p>\n<ul>\n<li>{ margin: 0; padding: 0; }</li>\n</ul>\n<p>Donc, il est important de faire un peu de ménage, lien après lien, site après site.</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Pensez bien à vérifier les informations que vous trouverez sur internet, et à les questionner (Même sur ce blog) !&lt;/div&gt;\n\n</p>\n<h2 id=\"que-faire-\">Que faire ?</h2>\n<p>La première chose, c&#39;est bien sûr <strong>d’améliorer continuellement vos compétences et vos connaissances</strong>. Ça passe par la lecture de tout plein d’articles, de sources diverses, de vérifications d’informations.</p>\n<h3 id=\"les-r-f-rences-et-documentations\">Les références et documentations</h3>\n<p>Il y a tout d’abord les références des différents langages. Ces sources sont les plus fiables, alors quand vous voulez vérifier une information, privilégiez-les !</p>\n<ul>\n<li>HTML/CSS : <a href=\"http://www.w3.org/wiki/Main_Page\" title=\"W3C wiki\">Le wiki du W3C</a></li>\n<li>PHP : <a href=\"http://www.php.net//manual/fr/index.php\" title=\"Documentation PHP\">Documentation du PHP</a></li>\n<li>jQuery : <a href=\"http://api.jquery.com/\" title=\"documentation API\">Documentation et API de jQuery</a></li>\n<li>Ruby : <a href=\"https://www.ruby-lang.org/fr/documentation/\" title=\"Documentation Ruby\">Documentation Ruby</a></li>\n<li>WordPress : <a href=\"http://codex.wordpress.org/fr:Accueil\" title=\"Codex WordPress\">Codex WordPress</a></li>\n<li>Bootstrap : <a href=\"http://getbootstrap.com/getting-started/\" title=\"Get Bootstrap\">Documentation Bootstrap</a></li>\n</ul>\n<p>Pratiquement pour chaque langage / support / Framework, vous trouverez une documentation officielle.</p>\n<h3 id=\"les-sources-fiables\">Les sources fiables</h3>\n<p>Ces sources ne sont pas officielles, mais elles sont de qualité.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/\" title=\"Mozilla Developer Network\">Mozilla Developer Network</a></li>\n<li><a href=\"http://www.alsacreations.com/\" title=\"alsacreatuibs\">Alsacréations</a> (certains articles peuvent être obsolètes, attention)</li>\n</ul>\n<p>Évidemment, il faut bien sûr accepter une remise en question perpétuelle de ce qu&#39;on &lt;del&gt;sait&lt;/del&gt; croyait savoir… Soyez curieux(ses), lisez des blogs, des articles…</p>\n<h2 id=\"la-pierre-l-difice\">La pierre à l’édifice</h2>\n<p>Évidemment, de bonnes connaissances ne servent à rien si vous les gardez pour vous. Bien sûr, vous devez appliquer toutes ces bonnes pratiques et connaissances dans vos projets, mais ça ne suffit pas. Il faut <strong>partager votre savoir</strong>.</p>\n<p>Il y a plein de façons de le faire :</p>\n<ul>\n<li><strong>Intervenir sur les forums</strong>, comme ceux d’Alsacréations ou d’OpenClassrooms (ou autres) pour aider les autres et leurs conseiller de bonnes pratiques, de bon liens, etc. Vous n’êtes pas obligés d’avoir la réponse à un problème pour suggérer des corrections ou de meilleures façons de faire !</li>\n<li><strong>Participer à l’améliorations des ressources existantes</strong>. Pour exemple, Mozilla Developer Network est librement éditable, apportez vos corrections, vos précisions, vous découvertes. Et n’hésitez pas à participer à la traduction ! Vous pourrez trouver de nombreux projets libres sur internet (principalement sur GitHub) qui ne demandent qu&#39;à être améliorés, alors jetez-vous à l’eau.</li>\n<li><strong>Corriger ce qui peut l’être</strong>. Si vous tombez sur un tutoriel ou une ressource qui présente une erreur, une mauvaise pratique ou autre, signalez-le à l’auteur. Il ou elle sera sûrement content d’avoir des retours, et vous pourrez discuter tranquillement de la question ; les contacts, c&#39;est important !</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>N’oubliez pas que le web est participatif ! Votre aide est toujours la bienvenue !</p>\n<p>Pour finir, voici quelques blogs que je recommande de suivre :</p>\n<ul>\n<li><a href=\"http://www.emmanuelbeziat.com/blog/\">Emmanuel B.</a> &lt;small&gt;(Ben quoi ?)&lt;/small&gt;</li>\n<li><a href=\"http://www.js-attitude.fr/\">JS-Attitude</a> (Fouillez au milieu des annonces de formations, y a des articles qui tuent !)</li>\n<li><a href=\"http://lea.verou.me/\">Lea Verou</a></li>\n<li><a href=\"http://davidwalsh.name/\">David Walsh</a></li>\n<li><a href=\"http://www.inpixelitrust.fr/blog/\">Stéphanie Walter</a></li>\n<li><a href=\"http://informatique.lamecarlate.net/\">Codex Sphinxial</a></li>\n<li><a href=\"http://blog.goetter.fr/\">Raphaël Goetter</a></li>\n<li><a href=\"http://marieguillaumet.com/\">Marie Guillaumet</a></li>\n</ul>\n"},{"title":"Conventions et normes de codage","author":"Emmanuel B.","date":"2014-08-01 22:47:55","tags":["html/css","javascript"],"categories":["Tutoriels"],"template":"post.vue","basename":"et-normes-de-codage","content":"<p>Je suis récemment tombé sur un joli traité des bonnes manières et autres politesses lorsqu&#39;on est développeur, écrit par <a href=\"http://leny.me\" title=\"Pierre-Antoine Delnatte\">Pierre-Antoine &quot;Lisarael&quot; Delnatte</a> et que je vais repomper joyeusement ici (avec son aimable autorisation), parce que les conventions, c&#39;est important.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"principes-g-n-raux\">Principes généraux</h2>\n<ul>\n<li>Tous les fichiers sont encodés en UTF-8, sans BOM.</li>\n<li>Indentation en tabulation. 1 niveau d’indentation = 1 tabulation.</li>\n<li>Les commentaires sont importants, mais il faut commenter intelligemment : un commentaire inutile prend de la place pour rien.</li>\n<li>On se décide pour une langue : on nomme toutes les variables / classes en <strong>anglais</strong> ou en <strong>français</strong> (et, si possible, mais facultativement, les commentaires aussi), et on s&#39;y tient : on ne jongle pas d’une langue à l’autre.</li>\n<li>Les <em>TODO</em> sont conseillés, mais il faut les détailler : rien ne dit que c’est vous qui repasserez dessus.</li>\n<li>Tout projet de code devrait être stocké sur un gestionnaire de version comme <em>Git</em>, via la plateforme <a href=\"http://github.com/\">GitHub</a>.</li>\n<li>Corriger un fichier qui ne respecte pas les conventions n’est <strong>jamais</strong> une perte de temps.</li>\n</ul>\n<h3 id=\"kiss-keep-it-simple-stupid-\">KISS: Keep it simple, stupid!</h3>\n<p><em>La simplicité est la sophistication suprême</em> : un code simple est plus lisible et plus facile à maintenir.</p>\n<h3 id=\"dry-don-t-repeat-yourself\">DRY: Don’t repeat yourself</h3>\n<p>Si la même portion de code se retrouve deux fois ou plus dans un script, on en fait une fonction. Si la même portion de code se retrouve deux fois ou plus dans une classe, on en fait une méthode.</p>\n<h3 id=\"yagni-you-aren-t-gonna-need-it\">YAGNI: You aren’t gonna need it</h3>\n<p>Rien ne sert de coder une méthode qui n’a pas d’implémentation ou d’utilité immédiate.</p>\n<h3 id=\"don-t-be-shy-ask-\">Don’t be shy, ask!</h3>\n<p>Il n’y a pas de honte à demander de l’aide, surtout avant d’attaquer une nouvelle fonctionnalité.</p>\n<p>Il ne devrait jamais y avoir une portion de code qui ne soit pas couverte par au moins deux personnes.</p>\n<h2 id=\"html\">HTML</h2>\n<ul>\n<li>Indentation stricte.</li>\n<li><p>Respect de la syntaxe XML :</p>\n</li>\n<li><p>pas de balises d’ouverture sans balise de fermeture (par exemple <code>&lt;br /&gt;</code> au lieu de <code>&lt;br&gt;</code>,</p>\n</li>\n<li>balises et attributs en minuscules,</li>\n<li><p>les attributs booléens doivent avoir une valeur (par exemple <code>checked=&quot;checked&quot;</code>).</p>\n</li>\n<li><p>Le contenu d’un élément block doit être à la ligne, celui d’un élément inline peut être au choix à la ligne ou non. (exception acceptable pour la balise <code>&lt;p&gt;</code>).</p>\n</li>\n<li>À l’exception notable d’<em>html5shiv</em> pour IE, les balises <code>&lt;script&gt;</code> sont déclarées en fin de <code>&lt;body&gt;</code>.</li>\n<li>Validez toujours votre code avec le <a href=\"http://validator.w3.org/\" title=\"Validator W3C\">validateur w3c</a>.</li>\n</ul>\n<h2 id=\"css-et-d-riv-s\">CSS et dérivés</h2>\n<ul>\n<li>Indentation stricte.</li>\n<li>Préférer les propriétés raccourcies (<code>font</code>, <code>background</code>, <code>margin</code>…).</li>\n<li>Quand on utilise des propriétés <code>-vendor-prefix</code>, on n’oublie pas de mettre la propriété finale de la spec à la fin. Et surtout, on vérifie si c&#39;est nécessaire (voir l’article &quot;<a href=\"http://www.emmanuelbeziat.com/blog/prefixes-css-jusqua-quand/\" title=\"Préfixes CSS, jusqu’à quand ?\">Préfixes CSS : jusqu&#39;à quand</a>&quot; ) !</li>\n<li>Pas de hack, sauf si <em>vraiment</em> pas le choix. Préférer les <em>commentaires conditionnels</em> de HTML pour rajouter des feuilles de styles spécifiques ou des classes sur l’élément <code>&lt;html&gt;</code>.</li>\n<li><p>En <em>Less</em>, <em>Sass</em> ou <em>Stylus</em> :</p>\n</li>\n<li><p>On utilise des variables explicites, et si elles sont globales, on les définit en tête de module ou dans un fichier séparé pour les <em>superglobales</em>.</p>\n</li>\n<li>Nommage des variables en <strong>camelCase</strong>.</li>\n</ul>\n<h2 id=\"javascript-et-d-riv-s\">JavaScript et dérivés</h2>\n<ul>\n<li>JavaScript est un langage peu rigoureux, il faut l’être à sa place.</li>\n<li><code>&quot;use strict&quot;</code> est obligatoire.</li>\n<li>Encapsulation de tout le code, aucune empreinte globale, et, si nécéssaire, créer un <strong>namespace</strong>.</li>\n<li>Indentation stricte.</li>\n<li>Chaînes de caractère en double quotes (<code>&quot;string&quot;</code>).</li>\n<li>Ouverture de bloc sur la même ligne, fermeture sur une nouvelle ligne.\n<strong>Exemple :</strong></li>\n</ul>\n<p>var test = function( param ) {\n// some code\n};</p>\n<ul>\n<li>Toutes les variables d’un bloc sont déclarées au début de celui-ci.</li>\n<li><p>Puisque JavaScript est un langage à <em>typage faible</em>, on ne <em>transtype</em> pas une variable, et il est conseillé d’utiliser la <strong>notation hongroise</strong> pour les variables, en préfixant le nom d’une variable par son type :</p>\n</li>\n<li><p>sVariable (<code>string</code>)</p>\n</li>\n<li>iVariable (<code>number</code>)</li>\n<li>bVariable (<code>boolean</code>)</li>\n<li>aVariable (<code>array</code>)</li>\n<li>oVariable (<code>object</code>)</li>\n<li>fVariable (<code>function</code>)</li>\n<li>gVariable (<code>Google API Object</code>)</li>\n<li>$Variable (<code>jQuery Object</code>)</li>\n<li><p>mVariable (<code>mixed</code>)</p>\n</li>\n<li><p>Les variables sont nommées en <strong>camelCase</strong>, les classes en <strong>PascalCase</strong>.</p>\n</li>\n<li>Si on veut stocker des données dans le code HTML (avec parcimonie et sagesse), on utilise les attributs <code>data-</code>.</li>\n<li>Attention à ne pas laisser des appels à la <code>console</code> dans les fichiers en production.</li>\n<li>Les scripts doivent être validés par <a href=\"http://www.jshint.com/\" title=\"JSHint\">JSHint</a> avant mise en production.</li>\n</ul>\n"},{"title":"« Votre idée ne vaut rien » — Ploum","author":"Emmanuel B.","date":"2014-10-31 16:30:22","tags":["lien"],"categories":["Diatribes"],"template":"post.vue","basename":"e-ne-vaut-rien-ploum","content":"<p>Salut à toi, internaute égaré !</p>\n<p>Si tu es un régulier ou une régulière ici, tu as peut-être déjà lu cet article fort bien écrit <a href=\"http://www.emmanuelbeziat.com/blog/linformatique-facile-ma-tue/\" title=\"L’informatique facile m’a tué\">&lt;q&gt;L’internet facile m&#39;a tué&lt;/q&gt;</a>. Au détour de mes pérégrinations sur la toile, je suis tombé sur un article qui étoffe davantage la question de l’idée qui n’en est pas une.</p>\n<p>Sans plus attendre, je vous laisse aller sur le blog de <em>Lionel &quot;Ploum&quot; Dricot</em> pour lire ce joli pavé condensé : <a href=\"https://ploum.net/votre-idee-ne-vaut-rien/\" title=\"Votre idée ne vaut rien\">&lt;q&gt;Votre idée ne vaut rien&lt;/q&gt;</a>.</p>\n<p>Et toi cher Ploum, si d’aventure tu arrivais ici, je tiens à t&#39;applaudir des deux mains, et de tout le reste.</p>\n"},{"title":"Pourquoi j'ai désactivé mon répondeur","author":"Emmanuel B.","date":"2014-11-11 05:37:02","tags":["téléphone"],"categories":["Diatribes"],"template":"post.vue","basename":"ai-desactive-mon-repondeur","content":"<p>On &lt;del&gt;m&#39;emmerde&lt;/del&gt; me demande souvent pourquoi on ne peut pas me laisser de message sur mon répondeur téléphonique. Souvent, on me demande si c&#39;est un bug. Parfois, mon interlocuteur est persuadé d’avoir quand même laissé un mot. En effet, j’ai choisi, il y a déjà un peu plus d’un an, de désactiver ma messagerie téléphonique. Explications.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"je-d-teste-le-t-l-phone\">Je déteste le téléphone</h2>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/11/phones-icons.png\" alt=\"phones-icons\"></p>\n<p>Certains adolescents passent / ont passé leur vie l’oreille vissée à des appareils plus ou moins évolués. Je me souviens encore de ma sœur qui, dans les années 90 et à la maison, monopolisait la ligne pendant des heures. Je n’ai jamais compris pourquoi, quel plaisir elle pouvait bien en retirer. Cette machine infernale m&#39;a toujours fait flipper. D’un seul coup, sans prévenir, ça gueule dans la maison sa sonnerie ignoble. Ça fait sursauter, ça brise le calme et ça stresse d’un coup.</p>\n<p>C&#39;est d’autant plus pénible qu&#39;il faut arrêter tout ce qu&#39;on fait et se précipiter pour répondre. Peu importe ce qu&#39;on est en train de faire, il faut abandonner, tout lâcher sur ses pieds, et courir pour placer un &quot;allô&quot; mi-agacé mi-faussement-accueillant.</p>\n<p>C&#39;est encore pire depuis que les téléphones sont portables, l’intrusion est totale jusqu&#39;en dehors de chez soi. Si on tombe sur un bavard, ça peut durer des heures, on transpire de l’oreille comme un dégueulasse, et pour peu qu&#39;on n’ai pas de kit mains libres, on est complètement handicapé. Le pire étant qu&#39;on ne peut pas simplement dire &lt;q&gt;bon, je te laisse parce que j’en ai marre d’être au téléphone&lt;/q&gt; sans passer pour un odieux connard. Mais encore plus que ça, la timidité maladive de ma jeunesse a longtemps rendu impossible de nombreuses communications.</p>\n<p>Pour toutes ces raisons <strong>je n’aime pas le téléphone</strong>, au sens <em>vocal</em> de la machine. Malgré quelques exceptions bien sûr, ceux qui m&#39;ont déjà appelé ont probablement noté que j’ai tendance à vouloir écourter l’appel le plus vite possible, voire tout simplement à ne pas répondre pour éviter cette situation.</p>\n<h2 id=\"je-d-teste-encore-plus-les-r-pondeurs\">Je déteste encore plus les répondeurs</h2>\n<p>Et dans tout ce malaise, vient le répondeur. L’effet le plus pervers de l’appel téléphonique. En effet, si on ne peut pas ou —&nbsp;Comme ça m&#39;arrive &lt;del&gt;parfois&lt;/del&gt; souvent&nbsp;— qu&#39;on n’a pas envie de répondre, on se retrouve avec un message vocal sur son répondeur. La pire des punitions.</p>\n<p>Honnêtement, je pense que ce truc a été inventé avec de bonnes intentions. Le genre de bonnes intentions qui conduit le monde à des cataclysmes et qui pavent probablement l’enfer, s&#39;il existe.</p>\n<h3 id=\"c-est-quoi-le-probl-me-\">C&#39;est quoi le problème ?</h3>\n<p>Pour peu que je sois occupé, je risque de ne pas entendre mon téléphone sonner. S&#39;il y a plusieurs appels, je me retrouve avec plusieurs messages à écouter à la fin de la journée (Généralement, ils sont tous urgentissimes) ; j’ai horreur de ça. Et je ne sais pas pour vous, mais moi je n’ai pas de notifications particulières en cas de babillardes laissées à mon intention. Ce qui fait que je ne sais pas qu&#39;il y en a avant d’aller vérifier &quot;par hasard&quot; ou bien de recevoir un sms qui m&#39;informe que j’ai 21 messages en attente (tous urgentissimes en général, depuis 11 jours). Messages que je n’aurais pas envie d’écouter (Vous regardez souvent les journaux télévisés du mois dernier vous ?).</p>\n<p>Perversité supplémentaire, quelqu&#39;un qui a laissé sa missive tient pour acquis que j’en ai bien pris note et s&#39;attend forcément à ce que je le rappelle —&nbsp;souvent dans l’heure. Il va donc très probablement se frustrer de ma non-réponse, et venir m&#39;en remettre une nouvelle couche en exprimant en sus sa colère et l’urgence de la situation. Et toujours attendre que je rappelle —&nbsp;ce que je ne ferais pas, puisque c&#39;est de toutes façons beaucoup trop tard et que, à moins que ce ne soit pour m&#39;offrir plein d’argent, je n’ai probablement pas envie de parler. <strong>En plus, il faut se justifier de son absence…</strong></p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Notez que toutes les urgences évoquées ici n’en sont jamais vraiment ; dans 95% des cas, c&#39;est juste de l’impatience de la part de l’interlocuteur.&lt;/div&gt;\n\n</p>\n<p>Tant qu&#39;on y est, voici un florilège des messages que j’ai déjà reçu (et auxquels je n’ai jamais répondu pour des raisons qui me semblent évidentes)&nbsp;:</p>\n<ul>\n<li>&lt;q&gt;C&#39;est moi, rappelle vite.&lt;/q&gt; →&nbsp;À moins d’avoir une voix reconnaissable entre mille (ce qui est le cas de Roger Carel, mais c&#39;est à peu près tout —&nbsp;et il ne m&#39;appelle pas souvent), je n’ai aucune idée de qui il s&#39;agit.</li>\n<li>&lt;q&gt;Shronjrour bronchrieur Bregiarh chrest jronchieur Grhajeuhsheu […], a bvientjoshr&lt;/q&gt; →&nbsp;Le cas typique où le type m&#39;appelait depuis l’anus d’un pachyderme. Ou avait un forfait voyelles. Dans tous les cas je ne sais ni qui c&#39;était, ni ce qu&#39;il voulait, et il n’y a aucune chance que je rappelle.</li>\n<li>&lt;q&gt;Oui Jeanette, c&#39;est Marie-Clothilde, je voulais te reparler de la réunion à la chapelle Saint-Molusque pour le 12 […]&lt;/q&gt; →&nbsp;Rappeler pour signifier que c&#39;était un faux numéro ? Allons donc.</li>\n<li>&lt;q&gt;Allô ? Allô ?&lt;/q&gt; →&nbsp;Le cas classique du gars qui n’a pas encore assimilé ce qu&#39;est un répondeur.</li>\n<li>&lt;q&gt;C&#39;est votre banque, vous êtes à découvert depuis 11 mois. Merci de nous rappeler au plus vite.&lt;/q&gt; →&nbsp; Rappeler un numéro surtaxé qui va me prendre le pognon que je n’ai pas, pour vous confirmer que j’ai pas un copeck et vous entendre me conseiller de vite renflouer mon compte (comme si je trouvais régulièrement des liasses de 500 dans les replis de mon canapé)&nbsp;? J’en rêve&nbsp;!</li>\n<li><strong>Cas particulier&nbsp;:&nbsp;</strong> &lt;q&gt;Ouais.&lt;/q&gt; →&nbsp;Mon père, ce héro, qui adore signifier que les longues annonces de répondeur l’emmerdent, et compense le temps passé en omettant de préciser le motif de son coup de bigot. Alors je le rappelle, mais il ne répond pas non plus ; du coup je lui laisse un message pour demander pourquoi il a appelé.</li>\n</ul>\n<p>C&#39;est bien sûr un échantillon, mais c&#39;est assez parlant.</p>\n<h2 id=\"alors-j-ai-agi\">Alors j’ai agi</h2>\n<p>Pour toutes ces raisons, <strong>j’ai désactivé totalement mon répondeur.</strong> C&#39;est aussi simple que ça. Il y a juste un message qui dit que je ne suis pas disponible et qui suggère de m&#39;envoyer un sms ou un mail, ou bien de rappeler plus tard. Je ne laisse le choix à personne.</p>\n<p>D’abord, pour les cas que je sais &quot;importants&quot;, mon téléphone affiche très bien la liste des numéros qui m&#39;ont appelé. S&#39;ils font partie de mon répertoire, je sais si je dois rappeler ou si ça peut attendre. Ensuite, la plupart des gens avec qui je communique de façon régulière m&#39;envoient un SMS, ou bien utilisent un autre biais (Skype en tête), et ont rarement besoin de me parler de vive voix. Les moins réguliers envoient très bien leurs emails, et je m&#39;en satisfait parfaitement.</p>\n<p>En plus, un petit texte s&#39;assimile et se comprend aussi bien voire beaucoup mieux qu&#39;une conversation téléphonique —&nbsp;surtout par répondeurs interposés&nbsp;— principalement parce que les gens ne vont pas droit au but : on papote, on tourne autour du pot, on ne sait plus trop où on veut en venir. Et je ne comprend pas les flemmards qui préfèrent appeler pour dire trois banalités sans importance plutôt que de simplement taper quelques mots, à plus forte raison maintenant que les téléphones ont autant de touches que de lettres et des fonctionnalités pour accélérer la saisie, corriger les fautes, suggérer des mots et même s&#39;occuper de la ponctuation.</p>\n<h3 id=\"et-vous-\">Et vous ?</h3>\n<p>Franchement, à l’heure des smartphones, des forfaits aux sms illimités, des applications de messagerie de tous types (Facebook, Twitter, What&#39;s App, Skype) et des mails qui n’ont jamais été aussi nombreux, pourquoi encore s&#39;emmerder avec cet instrument archaïque qu&#39;est le répondeur téléphonique ? C&#39;est tout l’inverse de ce qu&#39;on recherche aujourd’hui : la visibilité, l’efficacité, et l’instantanéité. Bref, ça n’a plus sa place dans ce monde pour moi.</p>\n<p>Alors vraiment, si vous aussi vous n’aimez pas votre répondeur, arrêtez d’hésiter&nbsp;: Désactivez-le une bonne fois pour toutes.</p>\n"},{"title":"Comment bien suivre un tutoriel","author":"Emmanuel B.","date":"2014-12-21 22:07:11","tags":["aide"],"categories":["Tutoriels"],"template":"post.vue","basename":"n-suivre-un-tutoriel","content":"<p>&lt;q&gt;Ça ne marche pas&lt;/q&gt; est une rengaine que je lis bien souvent, sur ce blog ou sur divers forums sur lesquels je sévis. Le problème est souvent le même : un manque de méthodologie.</p>\n<p>Voyons comment bien suivre un tutoriel.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"conna-tre-la-cible\">Connaître la cible</h2>\n<p>Tous les tutoriels trouvés sur le net n’ont pas la même portée, certains s&#39;adressent à des débutants et les guident pas à pas, d’autres demandent certains prérequis et se contentent de livrer des explications sommaires (qu&#39;il est parfois dur de suivre, même en maîtrisant le sujet).</p>\n<p>Ainsi, commencez-donc par voir si le niveau vous semble accessible, si l’article précise des prérequis nécessaires avant d’appréhender le tutoriel, et si les sources sont complètes.</p>\n<h2 id=\"bien-lire-le-contenu\">Bien lire le contenu</h2>\n<p>Très souvent, le contenu textuel est aussi riche en informations essentielles que les portions de code. Si vous ne les lisez pas attentivement, vous pouvez rater quelque chose, et ne pas comprendre certains points clés du tutoriel. Donc, <strong>lisez et relisez, méthodiquement, chaque point</strong>. Et bien sûr, lisez-le en entier, avant même de commencer à coder.</p>\n<h2 id=\"essayer-le-code-fourni\">Essayer le code fourni</h2>\n<p>Une erreur courante est de vouloir adapter directement le code proposé en exemple sur leur propre code. Ce faisant, le risque de rater une étape est beaucoup plus grand. Prenez toujours le temps de tester uniquement le code fourni, dans une page à part ou sur un site comme <a href=\"http://codepen.io/pen/\">Codepen</a>, <a href=\"http://dabblet.com/\">Dabblet </a>ou <a href=\"http://jsfiddle.net/\">JSfiddle</a>, selon vos besoins.</p>\n<p>Si le code seul ne marche pas, c&#39;est que vous avez peut-être manqué une information textuelle (voir point précédent). Si malgré une relecture attentive (du code comme des explications) vous ne voyez pas ce qui manque, vous pouvez fournir le lien de votre essai à l’auteur-e du tutoriel, qui vérifiera votre exemple et vous indiquera si vous vous êtes trompé ou corrigera son tutoriel s&#39;il y a effectivement un problème.</p>\n<h2 id=\"reproduire-proprement\">Reproduire proprement</h2>\n<p>Quand vient le temps d’intégrer le tutoriel à son propre code, faites très attention à bien respecter celui-ci. Très (trop) souvent là-aussi, j’ai vu des débutants présenter un code &quot;d’après un tutoriel&quot;, qui n’avait strictement plus rien à voir avec celui-ci. Donc, si vous avez du mal, <strong>essayez plutôt d’intégrer votre code à un exemple qui fonctionne</strong> (voir point précédent), plutôt que d’intégrer l’exemple à votre code existant.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Voilà, ce sont de petites méthodes simples, mais qui peuvent grandement vous faciliter la vie.</p>\n"},{"title":"Conseils aux graphistes web","author":"Emmanuel B.","date":"2015-01-15 05:03:48","tags":["design"],"categories":["Web"],"template":"post.vue","basename":"x-graphistes-web","content":"<p>En tant que développeur front-end, il m&#39;arrive très souvent de recevoir des maquettes de graphistes, validées par le client, qu&#39;il ne me reste qu&#39;à intégrer. Cependant, de nombreux problèmes se présentent régulièrement, dus généralement au fait que le ou la graphiste qui s&#39;est occupée de ce travail n’est pas lui/elle-même intégrateur-trice et n’est donc pas au courant des possibilités et des difficultés de l’intégration. Parfois, c&#39;est également simplement un problème de mise en contexte.</p>\n<p>Voici donc un ensemble de points à éviter ou approfondir lorsque vous préparez vos maquettes.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"le-bord-du-psd-n-est-pas-le-bord-de-l-cran\">Le bord du PSD n’est pas le bord de l’écran</h2>\n<p>Une première erreur très (trop) fréquente : tenir l’espace de travail comme &quot;complet&quot;. Une image valant mieux que beaucoup de mots, voilà une illustration du problème :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-1.jpg\" alt=\"photoshop-problem-1\"></p>\n<p>Le design est ici bien rendu, somme toute classique, et l’image sort de façon élégante du cadre du site pour aller rejoindre les bords. Oui, mais <strong>les bords en question ne représentent pas l’écran d’un visiteur</strong> potentiel du site. Ainsi, si on agrandi l’espace de travail pour se représenter la taille d’écran d’un visiteur du site, on se retrouve avec un problème graphique assez évident :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-02.jpg\" alt=\"photoshop-problem-02\"></p>\n<p>L’image ne va plus jusqu&#39;au bord. Outre le fait que ce soit très moche, le site perd toute sa consistance. Il n’y a aucun moyen de gérer ça proprement côté intégration : étirer l’image serait de toutes façons totalement affreux.</p>\n<p>Pensez donc toujours à choisir un espace de travail large et à tester votre rendu sur plusieurs types d’écran, et prévoyez différents cas de figure.</p>\n<h2 id=\"le-texte-n-est-pas-contr-lable\">Le texte n’est pas contrôlable</h2>\n<p>Un autre point essentiel : photoshop permet une gestion avancée des textes. On peut, à loisir, modifier le rendu d’une police, gérer son lissage, son inclinaison, lui donner divers effets, le positionner de façon fine et précise, etc.. <strong>Ce n’est pas le cas sur le web</strong> ! L’affichage d’une police dépend du navigateur, du système d’exploitation, du type d’écran… De même, les contrôles sur le texte sont relativement pauvres en CSS, et il est pour l’instant encore presqu&#39;impossible de faire — par exemple — des colonnes fluides de texte, des couleurs dégradées dans des lettres, ou bien simplement d’aligner au centre la dernière ligne d’un texte justifié.</p>\n<p>De même, je vois souvent des blocs de texte prévus dans les maquettes pour avoir un certain nombre de lignes, comme dans cet exemple :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-3.png\" alt=\"photoshop-problem-3\"></p>\n<p>Le soucis, c&#39;est qu&#39;il est impossible d’être sûr à 100% que le texte sera affiché tel quel sur le site. Il se peut très bien qu&#39;il dépasse, et donc que tout le principe de ce bout de design se retrouve par terre.</p>\n<p>De la même façon, laissez &quot;couler&quot; le texte. N’essayez pas de forcer des retours à la ligne (hors quelques titres), ce sera calamiteux pour l’intégrateur, et ingérable en cas de redimensionnement du conteneur.</p>\n<h2 id=\"limitez-les-couleurs\">Limitez les couleurs</h2>\n<p>Pour des raisons de pratique, il est déconseillé d’utiliser une tripotée de couleurs différentes. Certaines différences sont parfois trop subtiles pour être remarquées par l’intégrateur, qui n’a pas les mêmes réglages d’écran que vous, et se verra donc attribuer un retour client parce que &lt;q&gt;la couleur n’est pas la bonne&lt;/q&gt;. De plus, les préprocesseurs CSS d’aujourd’hui (<em>SCSS</em>, <em>SASS</em>, <em>LESS</em>, <em>Stylus</em>…) permettent aux intégrateurs de définir des variables (entre autres pour les couleurs), et en avoir une cinquantaine pour toutes les couleurs de la maquette n’a aucun intérêt…</p>\n<p><strong>Limitez-vous à 5 couleurs maximum</strong> (c&#39;est une moyenne), avec au plus deux variations par couleur. Enfin, n’hésitez pas à créer un calque avec les couleurs en question, d’abord pour les réutiliser facilement vous-même (même si vous pouvez utiliser le nuancier de Photoshop prévu à cet effet), ensuite pour permettre à l’intégrateur de les pipeter facilement.</p>\n<h2 id=\"utilisez-des-typos-standards-\">Utilisez des typos standards…</h2>\n<p>Attention à ne pas faire dans l’excentricité. Certes, aujourd’hui la propriété <code>@font-face</code> permet de faire bien des choses pratiques, mais il y a mille et unes raisons (ou presque) pour qu&#39;une typo ne se charge pas. Réservez donc les polices &quot;excentriques&quot; à des textes particuliers, tels que les titres, le menu de navigation ou des encarts occasionnels. Pour ce qui est du contenu textuel, restez-en aux polices dites &quot;web safe&quot; dont <a href=\"http://www.anthony-brard.com/les-fonts-web-safe\">voici une liste</a> (pas forcément exhaustive).</p>\n<p>Vous pouvez bien sûr adapter en fonction de votre cible : pour un site à destination des utilisateurs de Windows Phone (par exemple), ou pour une majorité d’utilisateurs Windows, vous pouvez opter pour <em>Segoe UI</em>, qui sera très raccord avec le reste de l’environnement de travail. À l’inverse, pour le site de votre application OSX ou iOS, l’emploi de <em>Helvetica Neue</em> sera tout à fait approprié et safe puisque présente sur tous les systèmes Apple (du moins, ceux relativement récents).</p>\n<p>Dans tous les cas, <strong>pensez à fournir les fichiers des typos</strong> que vous utilisez à l’intégrateur.</p>\n<h2 id=\"-et-ne-les-modifiez-pas-\">… et ne les modifiez pas !</h2>\n<p>Il va sans dire que toute modification <em>corporelle</em> d’une typo est prohibée. J’entends par là modifier l’échelle horizontale ou verticale de celle-ci, ou bien utiliser les options <em>Faux-gras</em> ou <em>Faux-italique</em>, par exemple.</p>\n<h2 id=\"oubliez-les-ronds\">Oubliez les ronds</h2>\n<p>Avec le CSS3 est arrivé un super outil : la propriété <code>border-radius</code>. Bien que celle-ci se fasse un peu plus discrète ces derniers temps, avec l’avènement du flat-design et le contrecoup d’une utilisation beaucoup trop massive (et avec souvent beaucoup de mauvais goût), elle permet de s&#39;adonner aux joies des arrondis en CSS.</p>\n<p>Cependant, une exception à cette règle concerne les ronds parfaits contenant du texte. En effet, si un bouton rond contenant un picto (Comme l’icone de twitter) ne pose à priori aucun problème à l’intégrateur, la question d’un disque contenant du texte est beaucoup plus délicate.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-4.png\" alt=\"photoshop-problem-4\"></p>\n<p>Pour les raisons précédemment citées, la gestion du texte dans une page web est délicate. Or, la rondeur de cet élément repose sur la taille fixe de celui-ci (sinon, ça devient un ovale), car les dimensions d’un conteneur dépendent de son contenu. Il devient de facto très pénible d’obtenir le rendu souhaité en CSS pur, il faut donc ruser et adapter le texte à son conteneur — ce qui pose là encore certains soucis en CSS.</p>\n<p>Du reste, si l’intégrateur doit tenir compte de navigateurs antédiluviens (IE8 ou inférieur (ouille !)), il devra en sus utiliser une image pour le disque, ce qui l’obligera à encore plus d’ajustements de texte.</p>\n<p>Alors, utilisez les ronds avec parcimonie !</p>\n<h2 id=\"attention-avec-les-hauteurs-de-blocs\">Attention avec les hauteurs de blocs</h2>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-5.jpg\" alt=\"photoshop-problem-5\"></p>\n<p>De la même façon que le texte n’est pas contrôlable, la gestion des hauteurs est pour l’instant assez calamiteuse. La hauteur d’un élément se base par défaut sur son contenu. Afin d’obtenir un effet comme l’image ci-dessus, il faudrait donc forcer la hauteur des blocs, et espérer que le texte ne dépasse sur aucun support, ou que celui-ci ne vienne pas à être changé (le client peut vouloir ajouter une phrase). Gardez donc toujours en tête que la hauteur des éléments en CSS est très complexe à gérer (ce sera amélioré dans quelques temps, mais avant de pouvoir l’utiliser en production, il faudra bien quelques années).</p>\n<h2 id=\"attention-aux-rotations\">Attention aux rotations</h2>\n<p>Là encore, si la troisième <em>release</em> de CSS nous a apporté de sympathiques propriétés permettant — entre autres — d’appliquer une rotation à un élément, ces propriétés ne sont pas envisageables avant IE9, il convient donc de <strong>bien se renseigner sur la portée du projet</strong> avant toute chose.</p>\n<h2 id=\"utilisez-des-font-icons\">Utilisez des font-icons</h2>\n<p>Plutôt que de piocher des images sur <a href=\"https://www.iconfinder.com/\">iconfinder</a> (au demeurant très bon), <strong>pourquoi ne pas utiliser une font-icon</strong> ? En fonction des besoins, <a href=\"http://fortawesome.github.io/Font-Awesome/\">FontAwesome</a> ou <a href=\"http://genericons.com/\">Genericons</a> sont de très bons choix.</p>\n<p>D’abord, ça évitera à l’intégrateur-trice de devoir enregistrer chaque icône manuellement, devoir faire des sprites, et parfois utiliser des ruses de sioux pour des états différents (survol). Ensuite, ça évitera beaucoup de complications pour la gestion des différents supports, et des écrans (Par exemple, les fameux écrans Retina et leurs pendants chez la concurrence).</p>\n<p>Bref, à moins d’avoir des besoins très spécifiques en matière d’icones (plusieurs couleurs, par exemple), il n’y a aucune raison de ne point utiliser ces petits bijoux.</p>\n<h2 id=\"pr-voyez-plusieurs-cas-de-figure\">Prévoyez plusieurs cas de figure</h2>\n<p>Si vous faites un menu déroulant, faites le design de ce menu une fois déroulé. Prévoyez les différents états des onglets (standard, survolé, page en cours), des boutons, des liens, des champs de formulaire (focus), et des différentes interactions — s&#39;il doit y en avoir — de la page.</p>\n<p>De même, vérifiez avec votre chef de projet si le design doit être fluide, adaptatif, fixe, responsive… Et prévoyez les différentes modifications de la maquette en fonction des besoins — le plus courant étant de prévoir au moins une version mobile.</p>\n<p><strong>Pensez à tous les cas de figure </strong>!</p>\n<h2 id=\"gardez-des-tailles-de-police-coh-rentes\">Gardez des tailles de police cohérentes</h2>\n<p>Le rendu du texte par défaut (le contenu textuel) doit être le même partout, pour chaque page. Par défaut, la taille de texte d’un document web est définie à 16px, pour fournir un compromis entre confort de lecture et quantité de texte affichée. Vous pouvez bien sûr en changer, mais assurez-vous que cette taille soit la même pour toutes les pages. De même ne faites pas de variations entre les éléments occasionnels : la taille d’un titre devrait elle aussi rester la même d’une page à une autre, même si la mise en forme est différente (ça arrive, par exemple une page &quot;article&quot; et une page &quot;liste des articles&quot; ne sont pas forcément identiques).</p>\n<p>Enfin, <strong>assurez-vous d’utiliser des tailles de police réelles</strong>. Photoshop laisse la liberté de mettre des tailles totalement délirantes (23.58px) qu&#39;il n’est pas possible d’avoir en web. De même, gardez une cohérence au niveau des valeur : restez plutôt sur des nombres pairs et privilégiez des écarts logiques et linéaires (Par exemple de 8 pixels : 16px, 24px, 32px).</p>\n<h2 id=\"utilisez-des-grilles\">Utilisez des grilles</h2>\n<p>Un point essentiel du design de ces dernières années : l’arrivée des grilles. Elles permettent de structurer facilement ses pages, autant pour le designer que le codeur. Cela permet une cohérence visuelle impeccable et évite d’avoir à gérer plusieurs tailles différentes.</p>\n<p>Vous pouvez par exemple utiliser les scripts de <a href=\"http://960.gs/\">960.gs</a> (ou les modèles fournis), ou bien des <a href=\"http://www.ravelrumba.com/photoshop-grids/\" title=\"Photoshop Grids\">templates prédéfinis</a>. Plus d’explications dans cet article de Smashing Magazine : <a href=\"http://www.smashingmagazine.com/2011/11/09/establishing-your-grid-in-photoshop/\">&lt;q&gt;Establishing your grid in photoshop (en)&lt;/q&gt;</a>.</p>\n<p>Demandez à votre intégrateur-trice ce qu&#39;il-elle utilise généralement, vous trouverez sûrement un outil commun.</p>\n<h2 id=\"attention-la-casse\">Attention à la casse</h2>\n<p>Il se peut que l’intégrateur-trice doive copier-coller les textes que vous aurez mis en maquette. Le contenu de certains projets est parfois validés directement en maquette, parfois dans des langues étrangères. J’ai eu le cas récemment avec du mongol, auquel je ne pige pas un broque : il m&#39;était impossible de réécrire le contenu moi-même. Pour ces raisons, faites attention à votre façon d’écrire du texte : <strong>Ne mettez jamais tout en majuscules</strong>. Si vous devez mettre un texte en capitales, utilisez le bouton &quot;Tout en capitales&quot; du panneau d’options <em>Caractère</em>. De la même façon, il m&#39;arrive de copier coller des textes et de me retrouver avec &lt;q&gt;un ACCOMPAGNEMENT personnalisÉ&lt;/q&gt;. Faites donc attention à ce genre de détails, et écrivez de façon normale même si le rendu diffère.</p>\n<h2 id=\"les-modes-de-fusion\">Les modes de fusion</h2>\n<p>Photoshop propose différents modes de fonctionnement des calques entre eux :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/09/modes-de-fusion.jpg\" alt=\"Modes de fusion Photoshop\"></p>\n<p>Vous voyez de quoi je parle ? C&#39;est un outil très cool, pour faire plein d’effets sympatoches. Hé bien <strong>vous n’y touchez pas !</strong> Il est strictement impossible de reproduire ces effets en web. Alors n’en faites rien, sauf si vous pouvez aplatir le résultat final (et dans le doute, demandez, encore une fois).</p>\n<h2 id=\"conclusion-discutez-avec-tout-le-monde\">Conclusion : discutez avec tout le monde</h2>\n<p>La meilleure façon de ne pas compliquer le travail des autres reste encore d’en discuter avec eux au long du processus de création. Si l’intégrateur-trice chargé-e de mettre votre maquette en boîte n’est pas un gros manche et connaît un peu son métier, il-elle saura vous aiguiller sur certains points, vous conseiller sur ce qui fonctionne et ce qui est raisonnable, faisable ou inenvisageable en fonction des contraintes qui sont imposées sur le projet. De même, ces gens sont souvent de bon conseil en ce qui concerne la facilité de navigation ou la pertinence de certains éléments.</p>\n<p>La plupart des webdesigners avec qui j’ai travaillé n’ont en fait aucune formation en webdesign. Ce sont généralement des maquettistes print et/ou infographistes PAO reconvertis ou qui ont ajouté une compétence à leur panel d’activités. Si vous êtes dans ce cas, n’hésitez pas à chercher quelques journées de formation en webdesign, et lisez des bouquins qui pourront vous aider à vous imprégner plus efficacement du travail de webdesigner.</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;La maquette est une étape importante et ne doit pas être expédiée ni négligée. Les maquettes présentées au client devraient toujours d’abord être validées par des développeurs et des ergonomes.&lt;/div&gt;\n</p>\n"},{"title":"Colonne verticale sur toute la hauteur de page","author":"Emmanuel B.","date":"2015-07-21 21:55:38","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"ticale-sur-toute-la-hauteur-de-page","content":"<p>Mon site te plait, internaute ? Tu es jaloux-se de ma colonne latérale qui prend toute la hauteur de la page et tu cherches désespérément comment faire ? Tu as de la chance, tu es pile au bon endroit !</p>\n<p>&lt;!--more--&gt;\n</p>\n<p>Toute l’astuce repose sur un trompe-l’œil. Vous pouvez donc commencer par faire votre colonne tout à fait normalement.</p>\n<pre><code class=\"html\">&lt;div class=&quot;colonne&quot;&gt;\n    &lt;div class=&quot;colonne-content&quot;&gt;\n        Du contenu !\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"css\">.colonne {\n    width: 320px;\n    background: #d5d5d5;\n    float: left;\n}\n</code></pre>\n<p>Oui, je sais : c&#39;est assez impressionnant.</p>\n<p>Vous pouvez bien sûr ajouter vos fioritures et votre contenu, mais globalement, tout ce dont vous avez besoin est là : une largeur, et un positionnement (Ici à gauche, mais vous pouvez le mettre à droite si vous voulez).</p>\n<p>Pour l’instant, votre colonne ne va pas jusqu&#39;en bas de votre écran, à moins que vous n’ayez beaucoup de contenu à l’intérieur. Alors pour ça, nous allons créer un petit trompe-l’œil au moyen d’un <strong>pseudo-élément</strong> (Si vous ne savez pas de quoi je parle, direction &lt;q&gt;<a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-les-selecteurs-partie1-css2/\">Principes du CSS - Les sélecteurs</a>&lt;/q&gt;).</p>\n<pre><code class=\"css\">.colonne:after {\n    content: &quot;&quot;\n    position: fixed;\n    width: inherit;\n    background: inherit;\n    top: 0;\n    left: 0;\n    bottom: 0;\n}\n</code></pre>\n<p>On crée donc un pseudo-élément après notre colonne, avec un contenu vide. On lui attribue une position fixe, ce qui veut dire que l’élément sera lié à la fenêtre du navigateur, et non au contenu de votre page. Puis, on l’accroche à <code>0px</code> du haut de la fenêtre, du bas, et à gauche. Ainsi, cet élément ne bougera jamais, même si vous descendez dans la page : il fera toujours la largeur de la fenêtre. Enfin, on lui attribue la même largeur et la même couleur que notre colonne, via la valeur<code>inherit</code>.</p>\n<p>&lt;div class=&quot;note note--question&quot;&gt;Mais… Je ne vois plus ma colonne ! Qu&#39;est-ce qu&#39;il se passe ?&lt;/div&gt;\n\n</p>\n<p>En effet, si vous avez testé ce code, vous devez avoir remarqué que votre pseudo-élément couvre votre colonne et que celle-ci n’est plus visible. Pas de panique ! On va simplement positionner l’élément enfant <code>.colonne-content</code> pour ajouter une propriété <code>z-index</code>, qui va permettre de gérer la superposition des éléments. Plus la valeur est haute, plus l’élément est à l’avant-plan.</p>\n<p>Comme la propriété <code>z-index</code> ne fonctionne que sur des éléments positionné, on ajoute une position relative :</p>\n<pre><code class=\"css\">.colonne-content {\n    position: relative;\n    z-index: 10;\n}\n</code></pre>\n<p>Et c&#39;est tout ! Votre colonne fonctionne maintenant. En effet, votre &quot;vraie&quot; colonne va se comporter comme un élément normal, et se déplacer avec le reste de la page. Mais le pseudo-élément va continuer à rester ancrer à gauche de la fenêtre, et donner l’illusion que votre colonne prend toute la hauteur de votre site.</p>\n<p>Comme quoi, le CSS, c&#39;est aussi de la magie !</p>\n<p>Vous pouvez voir l’exemple en action sur <a href=\"http://codepen.io/EmmanuelB/pen/zGMxEN\">ce Codepen</a>.</p>\n<p>Merci à <a href=\"http://lamecarlate.net/\">Lamecarlate</a> et <a href=\"http://clement-galidie.fr/\">Clément</a> pour leurs ajouts.</p>\n"},{"title":"Centrer un élément absolu (ou fixed)","author":"Emmanuel B.","date":"2015-09-26 13:12:02","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"element-absolu-ou-fixed","content":"<p>Pas plus tard qu&#39;il y a pas longtemps, on utilisait des méthodes de barbare pour centrer nos éléments en CSS. Aujourd’hui, c&#39;est encore un peu la galère, même si <code>flexbox</code> arrive petit à petit à notre rescousse.</p>\n<p>Reste que pour centrer un élément positionné de façon absolue ou fixe, on ne peut pas encore faire de miracles. À moins que…</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"avant-\">Avant…</h2>\n<p>Avant, on partait du principe qu&#39;il fallait connaître la largeur de l’élément qu&#39;on voulait centrer. Alors on appliquait un top / left, puis un margin-top / left négatif, comme suit :</p>\n<pre><code class=\"css\">element {\n    position: absolute;\n    width: 400px;\n    left: 50%;\n    margin-left: -200px;\n}\n</code></pre>\n<p>Le problème, c&#39;est qu&#39;il faut que la taille soit fixe, et connue. Mais que se passe-t-il si la taille peut-être variable ? Hé, ouais.</p>\n<h2 id=\"maintenant-\">Maintenant !</h2>\n<p>Maintenant, on a une possibilité supplémentaire, en utilisant <code>transform</code> :</p>\n<pre><code class=\"css\">element {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n}\n</code></pre>\n<p>Il est possible de faire de même verticalement avec <code>top</code> et <code>translateY</code>. Ainsi, l’élément est centré sans avoir besoin de préciser une largeur ou une hauteur.</p>\n"},{"title":"Le problème du dev web d'aujourd'hui","author":"Emmanuel B.","date":"2015-10-07 02:34:00","tags":["bonnes pratiques"],"categories":["Diatribes"],"template":"post.vue","basename":"du-dev-web-daujourdhui","content":"<p>Ces dernières années, pas mal d’avancées ont été faites dans le domaine du web. L’arrivée de html5 mais surtout de CSS3, de nouvelles API, les nouvelles possibilités au sein des navigateurs, le versionning (svn, git), les <em>fonticons</em>, les préprocesseurs et la pléthore de nouveaux outils comme les <em>task-runners</em> ont permis de faire de grosses avancées en matière de <em>workflow</em>, de productivité et de possibilités.</p>\n<p>Pour autant, il me semble que tout ne soit pas rose… Petite réaction à chaud.</p>\n<p>&lt;!--more--&gt;\n</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/10/web-moderne.png\" alt=\"web-moderne\"></p>\n<h2 id=\"je-suis-un-dinosaure-mais-je-me-soigne\">Je suis un dinosaure, mais je me soigne</h2>\n<p>J’ai été plutôt long à adopter certaines de ces nouveautés. Je n’utilise un <em>task-runner</em> (<a href=\"http://gulpjs.com/\">Gulp</a>) que depuis un an, je suis resté relativement frileux aux préprocesseurs avant de découvrir <a href=\"https://learnboost.github.io/stylus/\">Stylus</a> l’année dernière, et il m&#39;a fallu un moment avant de me convaincre d’utiliser <a href=\"http://bower.io/\">Bower</a> et <a href=\"https://getcomposer.org/\">Composer</a>.</p>\n<p>Pour autant, je prend conscience que freiner me fait prendre du retard, et j’essaie de m&#39;engager le plus possible en sens inverse, cherchant les nouveautés, me renseignant sur les nouvelles pratiques. Mais à force de tester pas mal de choses, je constate un problème dans ces nouveautés ; un problème récurrent qui me dérange un peu (Beaucoup, passionnément).</p>\n<h2 id=\"un-monde-de-d-pendances\">Un monde de dépendances</h2>\n<p>Un exemple simple : Pour utiliser Stylus (ou Sass, ou Less, etc.), il faut l’installer sur la machine sur laquelle on travaille. Oui, mais comment ? Hé bien il faut d’abord installer <a href=\"https://nodejs.org/\">NodeJS</a>. Peu importe l’environnement sur lequel je suis (OSX, Windows, Linux), il me faut à présent lancer la console, et taper une commande pour installer Stylus :</p>\n<p>$ npm install -g stylus```</p>\n<p>Et là, on a touché du doigt les deux premiers problèmes que je vois dans cette nouvelle ère.</p>\n<h3 id=\"tout-est-interd-pendant\">Tout est interdépendant</h3>\n<p>Il n’y a plus rien, ou presque, qui soit <em>standalone</em>. Pour utiliser un outil, il faut installer des outils permettant d’installer les outils qui permettent d’installer l’outil qu&#39;on veut utiliser. Outre le fait que ce soit un parcours du combattant au moindre besoin, c&#39;est surtout très pénible. NodeJS permet de faire énormément de choses, notamment de lancer un serveur et de travailler en JS comme langage client (En lieue et place de PHP, par exemple). C&#39;est super cool, d’ailleurs. Mais moi, je n’en ai besoin QUE pour installer des dépendances (Gulp, Bower…) et lancer celles-ci. J’installe donc une petite usine à gaz pour tirer deux manettes. Bon.</p>\n<h3 id=\"la-console-en-2015-\">La console, en 2015 ?!</h3>\n<p>Sérieusement ? Alors certes, ça permet de gagner du temps de développement, car il n’y a pas à développer d’interface. Mais bon dieu, l’informatique a trouvé sa place dans nos foyers parce qu&#39;on a ajouté une interface graphique.</p>\n<p>Oui, moi aussi j’aime me la péter un peu devant un néophyte en tapouillant trois lignes qui font des couleurs et défilent du texte en mode hacker d’Hollywood. Mais en vrai, dans la pratique, c&#39;est chiant. En plus de tout ce que je fais déjà, je dois lancer ma console, écrire manuellement le chemin de mon dossier de travail (Et pour peu que j’aie besoin de trois onglets différents, je dois faire ça trois fois), et écrire ma commande. Commande que je dois soit connaître par cœur, soit aller chercher sur la doc.</p>\n<p>À titre d’exemple, voilà le &quot;minimum&quot; de code que je tape pour utiliser un task-runner en fonction de mes besoins &quot;simples&quot;. Et la commande n’est que le début, après il me faut paramétrer tout le fonctionnement ; même si je peux réutiliser d’anciens modèles.</p>\n<p><code>$ npm install --save-dev gulp gulp-stylus gulp-concat gulp-uglify gulp-plumber gulp-sourcemaps gulp-imagemin gulp-rename gulp-autoprefixer</code></p>\n<p>Pour peu que j’utilise <a href=\"http://jade-lang.com/\">Jade</a> et <a href=\"http://coffeescript.org/\">CoffeeScript</a>, il faut ajouter d’autres dépendances. Encore heureux qu&#39;il n’y ai pas trente-six commandes. Mais la console quoi… <strong>En 2015, putain !</strong></p>\n<h2 id=\"mais-tout-n-est-pas-centralis-non-plus-\">Mais tout n’est pas centralisé non plus…</h2>\n<p>Alors les dépendances, c&#39;est une chose. Le problème, c&#39;est que tout n’est pas centralisé non plus. Exemple très simple là aussi : <a href=\"https://getcomposer.org/\">Composer</a>. Composer permet d’installer des dépendances PHP (comme des Framework, des classes…). Exactement ce que fait <a href=\"http://bower.io/\">Bower</a>, qui permet d’installer des choses aussi ; mais pas les mêmes choses.</p>\n<h3 id=\"des-outils-identiques-pour-des-l-ments-diff-rents\">Des outils identiques pour des éléments différents</h3>\n<p>Un problème dans l’autre sens, donc : les outils sont dépendants, ont des dépendances, mais ne dépendent pas des mêmes éléments. Ainsi, si je veux utiliser Lumen (Un Framework PHP), il me faut donc Composer. Celui-ci ne passe pas par <a href=\"https://nodejs.org/en/\">NodeJS</a> (J’ai donc installé un premier outil pour faire &quot;peu&quot; de choses sur tout ce qu&#39;il peut faire, mais il ne peut pas faire autre chose dont j’aurais besoin. Ah.). Composer s&#39;installe donc soit via l’outil Curl (qu&#39;il vous faut donc avoir installé, lui aussi), soit en téléchargement manuel via PHP, soit via un installeur sous Windows. Pour que son installation se déroule correctement, il faut que PHP soit configuré sur ma machine, donc que j’aie un ×AMP (Wamp, Lamp, Mamp, ou autres outils du même genre). J’y reviendrais plus tard…</p>\n<p>Donc, une fois que j’ai Composer, il faut que j’installe mes outils (Frameworks, Classes)… Via la console, avec une commande. Mais pas la même qu&#39;avec NodeJS, puisqu&#39;il n’utilise pas ce dernier — vous suivez ? Hop, deux docs ouvertes, et d’autres commandes à retenir.</p>\n<p>```$ curl -sS <a href=\"https://getcomposer.org/installer\">https://getcomposer.org/installer</a> | php\n$ mv composer.phar /usr/local/bin/composer</p>\n<p>$ composer require slim/slim```</p>\n<p>Bon, c&#39;est bien, ça marche. Mais je voudrais aussi utiliser jQuery et Bootstrap… Ah, mais pour ceux-là il faut Bower ! Bien, donc j’installe aussi Bower, un outil qui sert à installer des dépendances. Comme Composer. Comme NodeJS, aussi. Donc <strong>j’installe des installeurs de dépendances</strong>. Oui, oui. Bien sûr, Bower a ses propres commandes pour installer ses dépendances, sinon ce ne serait pas drôle. Hop, trois docs ouvertes.</p>\n<h2 id=\"mes-dossiers-sont-sales-\">Mes dossiers sont sales !</h2>\n<p>Je suis maniaque. J’aime que mes dossiers soient propres, rangés, bien nommés ; que mes projets soient bien ordonnés. Avec NodeJS, j’installe des dossiers de diverses saloperies dans chacun de mes projets (Que je dois réinstaller à chaque projet, toujours à la ligne de commande). autant de dossiers lourds, que je peux certes cacher par la suite. <strong>Composer va me faire un dossier supplémentaire pour ajouter son merdier</strong>. Grmbl. Et la cerise, c&#39;est Bower, qui non content d’ajouter son bazar, est très peu rigoureux sur la forme : chaque dépendance clone un <em>repository</em> entier, avec<strong> tout ce qui ne m&#39;intéresse à priori pas</strong> (gulpfile, gruntfiles, de quoi installer les dépendances de ma dépendance (Argh !), des fichiers de démo, des docs, une licence, un <em>readme</em>…). De plus, comme chacun fait un peu ce qu&#39;il veut, il est quasi impossible d’automatiser une tâche pour chaque dépendance afin de récupérer le ou les fichiers qui nous intéressent au milieu du fourbi, parce que l’auteur est libre de mettre lesdits fichiers où il le veut, avec l’arborescence qui lui sied. Donc en plus d’avoir du merdier, j’ai encore du travail.</p>\n<p>Et surtout, <strong>j’ai pourri mon PC/Mac avec une tonne de logiciels</strong> qui ne me servent qu&#39;à installer des logiciels. Et j’ai horreur de ça.</p>\n<h2 id=\"encore-plus-au-fond\">Encore plus au fond</h2>\n<p>Allons encore plus loin dans le problème : je parlais plus haut des outils pour émuler un serveur de façon locale (Wamp, Lamp, Mamp et consorts). Oui, mais ça c&#39;est fini ! Aujourd’hui, on utilise <a href=\"http://www.vagrantup.com\">Vagrant</a>, et on crée une machine virtuelle par projet (ou presque).</p>\n<p>Alors ne nous méprenons pas : Vagrant est un outil intéressant, qui apporte des réponses à des problèmes de dev courants.</p>\n<p>Le problème, c&#39;est que pour faire fonctionner Vagrant, il nous faut aussi un autre outil : <a href=\"https://www.virtualbox.org/\">VirtualBox</a>. En gros, Vagrant ne sert qu&#39;à créer des mini-machine virtuelles, paramétrées selon nos besoins du moment ; mais il lui faut donc de quoi lancer les machines virtuelles, donc un outil de virtualisation, et un OS à installer (Très souvent une distribution Linux, ce qui n’est déjà pas simple à gérer de base, mais là croyez-moi c&#39;est du grand art).</p>\n<p>Outre le fait que la procédure est longue et pas toujours bien renseignée en fonction de ce qu&#39;on cherche, tout est toujours en ligne de commande :</p>\n<p><code>$ vagrant init hashicorp/precise32\n$ vagrant up</code></p>\n<p>Mais surtout, pour utiliser pleinement les outils de Vagrant, il va falloir installer des dépendances pour ce dernier. Avec ses propres commandes. Hop, une doc de plus. Donc, pour installer des dépendances à Vagrant, il faut… Installer une dépendance, qui va installer les dépendances. Et allez ! On se tourne donc vers Chef, on lance une commande Vagrant, et on l’installe. Et ça marche… Jusqu&#39;à ce qu&#39;on veuille installer des dépendances ; là, il faut installer ChefDK, un ensemble de classes pour Chef, cette fois via git ou un installer Windows (qui ne demande pas dans quel dossier s&#39;installer et se fout à la racine du disque C:/. Pour la petite histoire, cette faute lui a vallu une désinstallation immédiate de ma bécane, et je n’ai donc toujours pas de VagrantBox sur mon PC).</p>\n<h2 id=\"et-c-est-pas-fini-\">Et c&#39;est pas fini !</h2>\n<p>Ajoutons à tout ça qu&#39;il nous faut généralement aussi installer et configurer git, qui s&#39;utilise — mais vous le savez déjà ou l’avez deviné — en ligne de commandes. Et celles-ci, elles sont velues en plus. Même chez les plus chevronnés de l’outil, certains problèmes qui se posent parce que Jean-Bertrand a <em>commit</em> sur la branche de préprod’ que Jeanne-Syvlie était en train de <em>merge</em> alors que François-Eugène faisait un <em>checkout</em>, et on est parti pour deux heures à fouiller dans la doc, essayer toutes les commandes existantes, et bloquer le taff de tout le monde.</p>\n<p>```$ git stash create &quot;Stash message&quot;\n$ git pull --rebase\n$ git stash clear\n$ git commit -m &quot;Commit message&quot;\n$ git push</p>\n<p>En sus, on ajoute à ça un petit accès SSH, le besoin de gérer des clés pour tout le monde…</p>\n<p>Et surtout, il faut que tout ce merdier soit actif en permanence pour pouvoir bosser. Je ne peux plus faire une petite retouche rapide en ouvrant l’ordi avec un sandwiche dans le bec, profitant d’une borne Wifi : il faut lancer l’IDE (c&#39;est souvent lourd), lancer le serveur local, ouvrir la console, taper le chemin vers le dossier, lancer une commande, faire ma modification, enregistrer, vérifier qu&#39;elle est prise en compte lancer une commande pour envoyer ma modif. Et ça, c&#39;est la version &quot;facile&quot;, pour peu qu&#39;il faille se connecter à un VPN et gérer les <em>commits</em> dans un Tracker un peu mal foutu (<a href=\"https://code.google.com/p/gerrit/\">Gerrit</a>, par exemple), il faut en plus aller sur un site, s&#39;y connecter et valider sa modif&#39; manuellement. Évidemment, je n’en parle pas, mais 15 outils qui tournent en permanence pour en faire fonctionner deux, ce n’est pas économe.</p>\n<h2 id=\"des-possibilit-s-futures-\">Des possibilités futures ?</h2>\n<p>Alors oui, on a gagné beaucoup de choses, comme je le disais en introduction. Et tous les outils que je viens de critiquer ont un très bon propos : apporter une solution à un problème. Et généralement, ils le font bien. Mais on a aussi entassé une surcharge de merdes inutiles : on télécharge 80 fichiers pour 6 qui nous intéressent réellement, on installe 15 logiciels pour utiliser trois outils, et on utiliser des outils archaïques pour ce faire.</p>\n<p>Et <strong>c&#39;est pour ça que j’espère, de tout mon cœur, qu&#39;une solution va être trouvée</strong> à ce merdier. Il y a déjà certaines applications qui essaient de faciliter le travail : par exemple, <a href=\"https://incident57.com/codekit/\">CodeKit</a>, qui sert de task-runner, compilant différents langages et effectuant diverses opérations, le tout avec une interface graphique. Une bonne idée ; malheureusement l’outil n’est disponible que sur OSX d’une part, et n’est pas très fiable à l’utilisation d’autre part… Comme la plupart des outils du genre que j’ai pu tester (<a href=\"http://wearekiss.com/simpless\">Simpless</a>, <a href=\"http://koala-app.com/\">Koala</a>, et je ne me souviens pas des autres), il trouve vite ses limites en terme de configuration, de portabilité, de réactivité, et de fiabilité. Et même si ces applications doivent elles aussi tourner en permanence en tâche de fond lorsqu&#39;on bosse, elles ont au moins le bon goût de ne pas installer quinze dossiers de dépendances dans mes projets. Malheureusement au prix d’une portabilité entre collaborateurs relativement pauvre, qui oblige très souvent à configurer chacun son poste à chaque projet, voire à reconfigurer à chaque fois que quelqu&#39;un <em>commit</em> (j’ai eu le soucis).</p>\n<p>Côté Git, il y a <a href=\"https://git-scm.com/download/gui/linux\">pas mal de clients graphiques</a>, dont mon préféré, <a href=\"https://www.sourcetreeapp.com/\">SourceTree</a>. Néanmoins, on se retrouve ici aussi avec un lot de problèmes : traductions approximative, labellisation de tâches qui n’ont rien à voir avec les noms des commandes…</p>\n<h3 id=\"tout-n-est-pas-cirrhose-comme-disait-l-alcoolique-\">Tout n’est pas cirrhose (Comme disait l’alcoolique)</h3>\n<p>Ne nous méprenons pas, je ne crache pas sur tous ces outils par simple frustration de ne pas m&#39;en sortir avec (Même qu&#39;à part Vagrant (qu&#39;on m&#39;a conseillé à l’instant de délaisser pour <a href=\"https://www.docker.com/\">Docker</a>), je m&#39;en sors pas mal !). Je pense que ces outils répondent à des besoins, qu&#39;ils améliorent notre travail ; mais je pense aussi qu&#39;on peut faire mieux.</p>\n<p>Pour revenir sur l’exemple de la console, pas mal de développeurs adorent cet outil. Pour autant, je pense <strong>qu&#39;il pourrait être largement amélioré</strong>. Pourquoi pas un explorateur de fichiers intégré, qui permette de cibler rapidement son dossier, de lancer des commandes (Relatives au projet et/ou aux possibilités du fichier) via un simple clic droit ? Ou inversement, un explorateur de fichiers avec console intégré, qui fasse tout ça aussi ?</p>\n<p>De la même façon, Git (et les autres outils de <em>versionning</em>) sont d’une importance capitale, les vieilles méthodes via FTP étant absolument intenables en cas de travail à plusieurs (modifications écrasées, etc.). Pour autant, l’outil en question est suffisamment complexe pour générer à son tour de nouveaux problèmes et de nouveaux besoins, auxquels on répond par de nouveaux outils supplémentaires…</p>\n<h3 id=\"que-voulons-nous-\">Que voulons-nous ?</h3>\n<p>Je ne sais pas pour vous, mais moi, je veux un outil pour les gérer tous. Je veux un (ou plusieurs, mais qu&#39;ils fassent tous ça) gestionnaire de dépendance centralisé, qui me permette d’installer du PHP aussi bien que du Javascript si ça me chante, sans avoir à passer par cinquante tiers ni intermédiaires. Je veux que les dépendances que j’utilise n’aient pas besoin de faire cinquante dossiers et de télécharger trouzmille fichiers par projets. Je veux ne pas avoir à passer deux heures à paramétrer manuellement des tâches automatiques, à chaque projet. Je veux me concentrer sur mon boulot, comme un guitariste de rock se concentre sur son jeu et sur la musique, pendant que le roadie et les techs gèrent ce qu&#39;il y a à gérer (en l’occurrence, que le logiciel soit le roadie et le tech, et que je n’aie pas besoin d’un sysadmin à chaque fois que je veux un outil).</p>\n<p>Pas vous ?</p>\n"}]}
