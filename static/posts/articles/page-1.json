{"posts":[{"title":"Aligner trois colonnes proprement","author":"Emmanuel B.","date":"2013-07-11 02:00:08","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"is-colonnes-proprement","content":"<p>C&#39;est un problème auquel se confrontent régulièrement les intégrateurs : créer un <strong>design en trois colonnes</strong> - habituellement, deux menus latéraux (appelés &quot;sidebar&quot;) et une colonne centrale pour le contenu du site.</p>\n<p>Mais c&#39;est en réalité très simple à faire, et nous allons voir comment.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h3 id=\"le-html\">Le html</h3>\n<p>La première chose, c&#39;est d’abord de placer les trois colonnes dans un conteneur, que nous appellerons ici &quot;<em>container</em>&quot;. Ensuite, il faut mettre les éléments flottants (les sidebar donc) avant le corps central.</p>\n<pre><code class=\"html\">&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;sidebar--left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;sidebar--right&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Comme toujours, essayez d’ajouter un peu de contenu pour pouvoir voir les effets ; utilisez par exemple le <a href=\"http://fr.lipsum.com/\" title=\"Générateur de lipsum\">générateur de lipsum</a>.</p>\n<h3 id=\"le-css\">Le CSS</h3>\n<p>Maintenant, il suffit de mettre en place les éléments :</p>\n<pre><code class=\"css\">.container {\n    overflow: auto;\n}\n\n.sidebar--left {\n    width: 200px;\n    float: left;\n}\n\n.sidebar--right {\n    width: 200px;\n    float: right;\n}\n\n.content {\n    overflow: hidden;\n}\n</code></pre>\n<p>Voyons ces lignes en détail :</p>\n<pre><code class=\"css\">.container {\n    overflow: auto;\n}\n</code></pre>\n<p>Les éléments flottants (utilisés avec la propriété <code>float</code> donc) sortent du <em>flux d’éléments</em>, ce qui conduit les autres éléments à passer en-dessous comme s&#39;ils étaient ignorés. Utiliser une propriété neutre comme <code>overflow</code> permet au contenant de tenir compte de ces flottants et de les englober pour que tout rentre dans l’ordre.</p>\n<pre><code class=\"css\">.sidebar--left {\n    width: 200px;\n    float: left;\n}\n\n.sidebar--right {\n    width: 200px;\n    float: right;\n}\n</code></pre>\n<p>On place simplement les éléments flottants (les menus latéraux) à gauche et à droite avec la propriété <code>float</code>, et on leur attribue une largeur fixe.</p>\n<pre><code class=\"css\">.content {\n    overflow: hidden;\n}\n</code></pre>\n<p>Enfin, on ne précise aucune largeur à cet élément afin qu&#39;il s&#39;adapte automatiquement à l’espace disponible. Là encore, on use de la propriété <code>overflow</code> pour que cette colonne tienne compte des deux éléments flottants.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Avec cette méthode, si votre design est évolutif ou que la mise en page change (une colonne ou une autre ou bien les deux ou aucune en fonction des pages visitées, par exemple), la colonne centrale sera toujours adaptée correctement, ainsi que son contenu. Vous pouvez voir le gabarit en action et le tester sur <a href=\"http://lab.infographizm.com/css/gabarits/adaptatif-colonnes/\">cette page du laboratoire</a> et sur <a href=\"http://codepen.io/EmmanuelB/pen/qniHp\" title=\"CodePen\">ce pen</a>.</p>\n<p>&lt;p&gt;Si vous voulez plus d’explication sur le fonctionnement des flottants et des <em>overflow</em>, je vous conseille un bon article : &lt;q&gt;<a href=\"http://www.alsacreations.com/astuce/lire/1543-le-contexte-de-formatage-block-en-css.html\" title=\"Alsacréations\">Le contexte de formatage block en CSS</a>&lt;/q&gt;.</p>\n"},{"title":"Changer une image au survol","author":"Emmanuel B.","date":"2013-07-12 02:02:08","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"image-au-survol","content":"<p>Lorsque l’on fait un site, on est parfois confronté à un besoin : celui de gérer le <strong>changement d’une image au survol de la souris</strong>. C&#39;est souvent le cas avec des menus. Si la technique des <em>sprites CSS</em> (à propos desquels j’ai écrit <a href=\"http://www.emmanuelbeziat.com/blog/bien-utiliser-les-sprites-css/\" title=\"Bien utiliser les sprites CSS\">ce tutoriel</a> et qui ne sera donc pas détaillée ici) est utile dans certains cas, elle est fortement déconseillée dans le cas d’une image cliquable. Nous allons donc voir une solution alternative intéressante.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"le-probl-me-pos-\">Le problème posé</h2>\n<h3 id=\"pourquoi-ne-pas-utiliser-les-sprites-\">Pourquoi ne pas utiliser les sprites ?</h3>\n<p>Les <em>sprites</em> sont très utiles pour gérer les images de fond ; mais dès lors qu&#39;une image véhicule une information (image cliquable, portrait d’un auteur, schéma explicatif, etc.) et n’est plus seulement décorative, il est <strong>nécessaire</strong> que cette image soit présente dans le HTML (balise <code>&lt;img /&gt;</code>).</p>\n<p>Dans le cas d’une image cliquable, à plus forte raison un menu qui ne contiendrait aucun texte, il est très fortement déconseillé de recourir aux images CSS, car cela impose que le lien dans le HTML soit vide :</p>\n<p>&lt;a href=&quot;mapage.html&quot;&gt;&lt;/a&gt;```</p>\n<p>Si on peut styliser cette balise en CSS pour lui donner une hauteur, une largeur et un fond, retenez bien que tout le monde ne visionne pas un site comme vous. Les internautes mal-voyants qui utilisent un lecteur d’écran ne peuvent lire que le contenu strict de la page ; ils se retrouveront donc face à un lien vide de 0px×0px qui ne sera pas cliquable, car il ne sera tout simplement pas affiché par le navigateur.&lt;p&gt;</p>\n<p>&lt;p&gt;<strong>En conséquence, la navigation sur votre site sera impossible !</strong></p>\n<h3 id=\"une-solution-possible-en-javascript\">Une solution possible en javascript</h3>\n<p>On peut également charger une image au survol grâce aux événements <code>onmouseover</code> et <code>onmouseout</code> du javascript. Si cette méthode permet de palier au problème précédemment exposé, elle en présente deux autres :&lt;p&gt;</p>\n<ol>\n<li>Tout d’abord, vos visiteurs peuvent très bien avoir désactivé l’exécution du javascript sur leur navigateur (pour des raisons qui les concernent).</li>\n<li>L’image ne sera chargée qu&#39;au survol, ce qui créera un effet de <em>clipping</em> (clignotement) le temps que l’image soit affichée. Pour une petite connexion (comme la 3G) cela se révèle très vite particulièrement désagréable.</li>\n</ol>\n<h2 id=\"la-solution-un-compromis\">La solution : un compromis</h2>\n<p>&lt;p&gt;La meilleure solution consiste à mettre l’image &quot;normale&quot; dans le html, puis de la masquer au survol pour révéler une image de fond en CSS. Nous allons donc voir comment procéder.</p>\n<h3 id=\"le-html\">Le HTML</h3>\n<p>Ici, rien de bien compliqué. Nous allons nous contenter de mettre notre image et notre lien tout à fait normalement (à noter qu&#39;on peut tout à fait utiliser le même effet sans un lien avec une image seule).</p>\n<p>Pour les besions de l’exemple, nous plaçons le lien dans une balise portant l’ID &quot;menu&quot;.</p>\n<p><code>&lt;div id=&quot;menu&quot;&gt;\n    &lt;a href=&quot;mapage.html&quot;&gt;&lt;img src=&quot;monimage.jpg&quot; alt=&quot;Accueil&quot; /&gt;&lt;/a&gt;\n&lt;/div&gt;</code></p>\n<h3 id=\"le-css\">Le CSS</h3>\n<p>C&#39;est ici que l’astuce se déroule. Tout d’abord, nous allons affecter à notre lien un comportement de type <code>inline-block</code>, afin de pouvoir lui donner des valeurs de hauteur et de largeur sans pour autant briser sa mise en place au sein d’un texte ou d’un menu (à adapter selon vos besoins).</p>\n<pre><code class=\"css\">#menu a {\n    display: inline-block;\n}\n</code></pre>\n<p>Ceci fait, nous allons lui appliquer l’image de fond qui doit apparaître au survol :</p>\n<pre><code class=\"css\">#menu a {\n    display: inline-block;\n    background: url(&quot;monimage_survol.jpg&quot;) no-repeat;\n}\n</code></pre>\n<p>Maintenant, nous pouvons masquer l’image au survol grâce à la pseudo-propriété CSS <code>:hover</code>.</p>\n<pre><code class=\"css\">#menu a:hover img {\n    visibility: hidden;\n}\n</code></pre>\n<h4 id=\"une-petite-pr-cision\">Une petite précision</h4>\n<p>Pour éviter toute mauvaise surprise, je vous recommande aussi de :</p>\n<ul>\n<li>Penser à désactiver l’affichage de bordure automatique autour des images cliquables, au moyen de ce code :<code>a img { border: none; }</code></li>\n<li><p>De spécifier également la hauteur et la largeur de l’image</p>\n</li>\n<li><p>En CSS si les images sont toutes de même dimension (cas d’un menu) :</p>\n<pre><code class=\"css\">#menu a, #menu img {\nwidth: 200px;\nheight: 50px;\n}\n</code></pre>\n</li>\n<li>En HTML si les images sont différentes :<pre><code class=\"html\">&lt;div id=&quot;menu&quot;&gt;\n&lt;a href=&quot;mapage.html&quot;&gt;\n    &lt;img src=&quot;monimage.jpg&quot; alt=&quot;Accueil&quot; width=&quot;200px&quot; height=&quot;50px&quot; /&gt;\n&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n</ul>\n<p>Dans ce cas, le lien fera normalement automatiquement son travail pour garder la taille de l’image de base, même si cette dernière venait à ne pas être affichée (mauvais chargement, lien mort, etc.)</p>\n<p>Et voilà ! Une image qui change au survol, sans effets secondaires indésirables du côté visuel, ni du côté de l’accessibilité.</p>\n"},{"title":"Utiliser les propriétés de police avec une font-web","author":"Emmanuel B.","date":"2013-07-13 23:28:05","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"s-proprietes-de-police-avec-une-font-web","content":"<p>Il vous est peut-être déjà arrivé d’utiliser <code>@font-face</code> ? Cette propriété permet l’ajout de polices (<em>typos</em>, <em>fonts</em>…) sur vos sites web sans que le visiteur n’ait besoin de les installer sur son ordinateur. De nombreux sites, tels que <a href=\"http://www.fontsquirrel.com/\">FontSquirrel</a> permettent de générer le CSS nécessaire tout en convertissant les fichiers aux formats appropriés.&lt;p&gt;</p>\n<p>&lt;p&gt;Mais les CSS proposés par défaut séparent les différents styles d’une même police, en la traitant comme des polices différentes (et donc séparées). Il faut donc, en fonction de vos besoins, non pas utiliser les propriétés <code>font-weight</code> ou <code>font-style</code> pour modifier l’épaisseur ou la mise en italique d’un texte, mais carrément demander à utiliser une autre police avec <code>font-family</code>, tout en gérant quand même ces propriétés pour les polices &quot;<em>fallback</em>&quot;.</p>\n<p>Mais il existe une façon d’utiliser proprement ces polices, et la voici…</p>\n<p>&lt;!--more--&gt;\n</p>\n<h3 id=\"une-simple-question-d-organisation\">Une simple question d’organisation</h3>\n<p>La méthode en question est très simple. Alors que le générateur vous fournira un nom de police différent pour chaque police que vous lui avez envoyé, tout en mettant les valeurs de <code>font-weight</code> et <code>font-style</code> sur <code>normal</code> :</p>\n<pre><code class=\"css\">@font-face {\n    font-family: &quot;MaPoliceRegular&quot;\n    src: url(&quot;MaPolice-Regular-webfont.eot&quot;);\n         url(&quot;MaPolice-Regular-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: normal;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: &quot;MaPoliceGras&quot;\n    src: url(&quot;MaPolice-Gras-webfont.eot&quot;);\n    src: url(&quot;MaPolice-Gras-webfont.eot?#iefix&quot;) format(&quot;embedded-opentype&quot;),\n         url(&quot;MaPolice-Gras-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: normal;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: &quot;MaPoliceItalique&quot;\n    src: url(&quot;MaPolice-Italique-webfont.eot&quot;);\n    src: url(&quot;MaPolice-Italique-webfont.eot?#iefix&quot;) format(&quot;embedded-opentype&quot;),\n         url(&quot;MaPolice-Italique-webfont.woff&quot;) format(&quot;woff&quot;),\n         url(&quot;MaPolice-Italique-webfont.ttf&quot;) format(&quot;truetype&quot;),\n         url(&quot;MaPolice-Italique-webfont.svg#MaPoliceItalique&quot;) format(&quot;svg&quot;);\n    font-weight: normal;\n    font-style: normal;\n}\n</code></pre>\n<p>La solution, c&#39;est simplement de modifier ce code par défaut afin de mettre un nom (<code>font-family</code>) identique pour tous, et des propriétés (<code>font-weight</code> et <code>font-style</code>) qui correspondent à la police en question :</p>\n<pre><code class=\"css\">@font-face {\n    font-family: &quot;MaPolice&quot;\n    src: local(&quot;Ma Police Regular&quot;),\n         url(&quot;MaPolice-Regular-webfont.woff2&quot;) format(&quot;woff2&quot;),\n         url(&quot;MaPolice-Regular-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: 400;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: &quot;MaPolice&quot;\n    src: local(&quot;Ma Police Gras&quot;),\n         url(&quot;MaPolice-Gras-webfont.woff2&quot;) format(&quot;woff2&quot;),\n         url(&quot;MaPolice-Gras-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: 700;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: &quot;MaPolice&quot;\n    src: local(&quot;Ma Police Italic&quot;),\n         url(&quot;MaPolice-Italique-webfont.woff2&quot;) format(&quot;woff2&quot;),\n         url(&quot;MaPolice-Italique-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: 400;\n    font-style: italic;\n}\n</code></pre>\n<p>De cette façon, vous pouvez appliquer les propriétés à votre police &quot;MaPolice&quot;, sans avoir besoin d’en changer : le CSS saura qu&#39;il faut charger une police différente en fonction des valeurs de ces propriétés.</p>\n<h3 id=\"un-exemple-\">Un exemple ?</h3>\n<p>Voici <a href=\"http://lab.infographizm.com/css/fonts/webfonts-tests-weight/\">une page d’exemple</a> si vous souhaitez voir le code d’un peu plus près.</p>\n"},{"title":"Google est opportuniste","author":"Emmanuel B.","date":"2013-07-30 01:29:59","tags":["entreprises"],"categories":["Diatribes"],"template":"post.vue","basename":"opportuniste","content":"<p>Google dispose des plus grands espaces publicitaires du monde, et s&#39;en sert pour promouvoir son navigateur ; et c&#39;est normal. Ce qui l’est moins, c&#39;est de brandir le talent des gens comme s&#39;il était de leur fait.</p>\n<p>&lt;!--more--&gt;\n</p>\n<p>Il y a quelques temps sur YouTube, cette pub envahissait nos vidéos :</p>\n<p>[youtube]<a href=\"https://www.youtube.com/watch?v=8xIWuImoEtQ[/youtube\">https://www.youtube.com/watch?v=8xIWuImoEtQ[/youtube</a>]</p>\n<p>En y regardant de plus près, à part le fait que Google ait racheté YouTube, <strong>Google n’est à aucun moment responsable du succès musical d’Irma</strong>. Elle n’utilisait probablement même pas Chrome à l’époque, d’ailleurs (et peut-être toujours pas). Et même si elle avait utilisé Chrome pour aller sur YouTube, Blogger pour partager ses vidéos (encore un service racheté par Big G) et Gmail pour envoyer des lettres à sa famille, est-ce que ça aurait été impossible sans Chrome ? Est-ce que tout n’aurait pas été faisable sans une once de Google ?</p>\n<p>Si, mille fois si. À partir de là, &quot;s&#39;approprier&quot; la jeune chanteuse pour scander que &quot;c&#39;est grâce à Chrome&quot;, c&#39;est un peu vouloir faire passer subliminalement (oui, j’invente des mots) &quot;si vous utilisez Chrome vous aurez du succès aussi&quot;, façon suppositoire.</p>\n<p>Et ça, c&#39;est <em>Evil</em>, monsieur Google.</p>\n"},{"title":"Préfixes CSS, jusqu'à quand ?","author":"Emmanuel B.","date":"2013-08-06 16:10:16","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"s-jusqua-quand","content":"<p>Ou plus exactement, comment savoir s&#39;il est pertinent d’utiliser une tartine de propriétés préfixées ou s&#39;en tenir à la seule propriété finale.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h3 id=\"mais-qu-est-ce-que-tu-racontes-\">Mais qu&#39;est-ce que tu racontes ?</h3>\n<p>Pour ceux d’entre toi, lecteur, qui ne comprendrais pas de quoi je parle, voici un chouette petit résumé explicatif !</p>\n<p>Les &quot;<strong>préfixes propriétaires</strong>&quot; (aussi connus sous le sobriquet de &quot;préfixes vendeurs&quot;), sont apparus afin d’intégrer dans le CSS des propriétés non-standardisées (la standardisation étant le travail du <a href=\"http://www.w3.org/\">W3C</a>, l’organisme chargé de chapeauter les technologies html/css). On ajoute donc un préfixe devant la propriété CSS, comme ça : <code>-prefixe-propriété</code>. En sachant qu&#39;il y a plusieurs préfixes existants, on se retrouve souvent avec ceci :</p>\n<pre><code class=\"css\">élément {\n    -webkit-propriété: valeur;\n    -moz-propriété: valeur;\n    -ms-propriété: valeur;\n    -o-propriété: valeur;\n    propriété: valeur;\n}\n</code></pre>\n<p>Et là, tu vas me dire &quot;Mais qu&#39;est-ce que c&#39;est ce foutoir ?&quot; (et tu auras raison !). Hé bien chaque préfixe correspond à un moteur de rendu qui équipe différents navigateurs. En voici la liste non-exhaustive (car il y a PLEIN de navigateurs) avec seulement les principaux :</p>\n<ul>\n<li><code>-webkit-</code> : préfixe pour le moteur <strong>WebKit</strong>, qui équipe Safari (et sa version mobile), Chromium, Chrome, Opera, Epiphany, Konqueror, Iron, Maxthon…</li>\n<li><code>-moz-</code> : préfixe pour le moteur <strong>Gecko</strong> développé par Mozilla et qui est donc utilisé par Firefox, SeaMonkey…</li>\n<li><code>-ms-</code> : préfixe pour le moteur <strong>Trident</strong> développé par Microsoft, utilisé par Internet Explorer et les anciennes version de Maxthon</li>\n<li><code>-o-</code> : préfixe pour le moteur Presto, jusqu&#39;à très récemment utilisé par Opera, qui a maintenant migré sur Blink, la version personnalisée de WebKit par Google (qui équipe aussi Chrome, donc).</li>\n</ul>\n<p>On voit parfois passer le préfixe <code>-kthml-</code>, mais il est bien moindre car correspond à un moteur très peu utilisé. Et si vous voyez <code>-htm-</code>, c&#39;est facile : il n’existe pas, c&#39;est une erreur.</p>\n<h2 id=\"comment-savoir-quand-utiliser-un-pr-fixe-\">Comment savoir quand utiliser un préfixe ?</h2>\n<p>C&#39;est là le but de cet article. En effet, les préfixes ont l’avantage de proposer des versions &quot;beta&quot; (non complètes) des propriétés en cours d’élaboration par le W3C (en contrepartie, leur prise en charge est parfois partielle et bancale) pour que les développeurs puissent commencer à travailler avec, mais ils posent aussi un problème de compatibilité, car un préfixe <code>-moz-</code> ne sera pas lu par un navigateur qui ne tourne pas sur Gecko, de même qu&#39;un préfixe <code>-webkit-</code> ne sera pas pris en compte par un navigateur non-webkit. Mais ajouter des préfixes pour tous les navigateurs possible représente un travail conséquent et alourdit le code. De plus, les propriétés étant toujours en cours d’élaboration, leur syntaxe est susceptible de changer (c&#39;est ce qui s&#39;est passé avec <code>linear-gradient</code>). De plus dans certains cas, la propriété est finalisée depuis suffisamment longtemps pour que la plupart des navigateurs aient pu l’implémenter correctement, et les préfixes ne sont donc plus utiles. Dans certains cas, ils ne sont plus pris en charge par les versions récentes d’un navigateur (c&#39;est le cas de <code>-moz-border-radius</code>).</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Mettez toujours la propriété finale (donc sans préfixes) après les propriétés préfixées. Ce n’est pas une lubie, mais un principe de logique : le navigateur doit lire en dernier la propriété finale et l’appliquer à la place de la propriété préfixée.&lt;/div&gt;\n\n</p>\n<h3 id=\"une-solution-se-renseigner\">Une solution : se renseigner</h3>\n<p>Un site référence quelles propriétés sont disponibles avec ou sans préfixes, et pour quels navigateurs. Il s&#39;agit de <a href=\"http://caniuse.com/\">Can I Use</a>. Il permet de voir, pour chaque propriété, la prise en charge pour chaque navigateur principal. Maintenant, voyons comment tirer parti de ces informations. Nous allons prendre pour ça l’exemple de la propriété <code>transition</code>, dont <a href=\"http://caniuse.com/#feat=css-transitions\">la page est ici</a>. On constate que :</p>\n<ul>\n<li>Il n’y a eu aucun préfixe pour aucune version d’IE, on peut donc se passer du préfixe <code>-ms-</code></li>\n<li>Firefox supporte la propriété finale depuis plus de 5 version, on peut donc raisonnablement se passer de <code>-moz-</code></li>\n<li>Chrome supporte la propriété finale depuis six versions, mais Safari que depuis la version 7. Pour iOS et Androïd Mobile, trop récent aussi ; il est donc judicieux d’utiliser <code>-webkit-</code></li>\n<li>Opera supportait la version finale en sa version dernière version sous Presto (12.1). Le pourcentage d’utilisateurs au-dessous de la version 12.1 étant très faible, on peut se passer de <code>-o-</code>. Bien qu&#39;ils utilisent depuis Webkit comme moteur de rendu, il est inutile de s&#39;en préoccuper ici, n’ayant jamais implémenté de version préfixée avec <code>-webkit-</code> de cette propriété.</li>\n</ul>\n<p>Notre code sera donc tout simplement :</p>\n<pre><code class=\"css\">élément {\n    -webkit-transition: all 1s ease;\n    transition: all 1s ease;\n}\n</code></pre>\n<p>À refaire pour chaque propriété sur laquelle vous pourriez avoir un doute, bien entendu.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Notez bien que les informations de cet articles sont valables à sa date de rédaction. Je ne le mettrai pas à jour chaque fois qu&#39;une propriété change un poil, donc comprenez-en le sens mais notez que les propriétés présentées peuvent avoir été validées depuis longtemps au moment où vous lirez ceci.&lt;/div&gt;\n\n</p>\n<h2 id=\"pour-se-faciliter-la-vie\">Pour se faciliter la vie</h2>\n<h3 id=\"un-peu-de-javascript\">Un peu de javascript</h3>\n<p><strong>Léa Verou</strong> propose un petit fichier Javascript de sa création <a href=\"http://leaverou.github.io/prefixfree/\">à télécharger ici</a>, qui va s&#39;occuper de gérer les préfixes à votre place ; la contrepartie, c&#39;est que vous n’aurez pas la même finesse qu&#39;en faisant le choix manuellement.</p>\n<h3 id=\"les-_task-runners_\">Les <em>Task Runners</em></h3>\n<p>Les <em>task runners</em> ont envahi le petit monde du front-end il y a maintenant quelques années. Les plus connus sont <a href=\"http://gruntjs.com/\">Grunt</a>, <a href=\"http://gulpjs.com/\">Gulp</a> et <a href=\"http://brunch.io/\">Brunch</a>. Leur rôle est de réaliser des tâches rébarbatives pour nous faciliter la vie : compiler des préprocesseurs (Sass, Less, Stylus, Jade, CoffeeScript), minifier et concaténer des fichiers, optimiser des images, etc. Mais ils peuvent également préfixer automatiquement les propriétés d’un CSS, en se basant sur CanIUse, avec une petite configuration pour régler le niveau de support qu&#39;on souhaite avoir.</p>\n<p>Je ne rentrerais pas ici dans les détails, pour en savoir plus : <a href=\"https://github.com/postcss/autoprefixer\" title=\"AutoPrefixer sur GitHub\">AutoPrefixer</a></p>\n<h2 id=\"aide-m-moire\">Aide-mémoire</h2>\n<p>Parce qu&#39;un peu de généralités ne fait pas de mal !</p>\n<h3 id=\"propri-t-s-css3-qui-ne-n-cessitent-plus-de-pr-fixes\">Propriétés CSS3 qui ne nécessitent plus de préfixes</h3>\n<ul>\n<li><a href=\"http://caniuse.com/#feat=border-radius\">border-radius</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-boxshadow\">box-shadow</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-textshadow\">text-shadow</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-opacity\">opacity</a></li>\n<li><a href=\"http://caniuse.com/#feat=background-img-opts\">background-size</a></li>\n<li><a href=\"http://caniuse.com/#feat=css3-boxsizing\">box-sizing</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-transitions\">transition</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-gradients\">gradient</a> (à utiliser toutefois avec un fallback)<p>&lt;div class=&quot;note note--info&quot;&gt;Je ne mets ici que les propriétés qui ont longtemps été préfixées, pas la liste complète des propriétés CSS3 qui n’ont pas besoin de préfixes.&lt;/div&gt;\n</p>\n</li>\n</ul>\n"},{"title":"Internet Explorer, mon amour","author":"Emmanuel B.","date":"2013-08-24 17:26:22","tags":["navigateurs"],"categories":["Diatribes"],"template":"post.vue","basename":"plorer-mon-amour","content":"<blockquote>\n<p>Il n’y a pas de mauvais navigateur, il n’y a que du mauvais code.</p>\n</blockquote>\n<p>C&#39;est par cette accroche que je réponds très souvent sur internet (sur les forums HTML/CSS d’OpenClassrooms (ex-Site du Zéro) par exemple) à ceux qui justifient une page mal rendue sur Internet Explorer par un &quot;IE ne respecte pas les standards&quot; et autres &quot;IE, c&#39;est de la merde&quot;. Et derrière le titre fort racoleur de cet article, je m&#39;en vais prendre la défense d’un navigateur injustement critiqué.</p>\n<p>Qu&#39;il soit entendu que je ne fais pas ici l’apologie d’un navigateur plutôt qu&#39;un autre ! Je compte simplement donner un bon coup de tatanes aux défauts fallacieux et bourrés de mauvaise foi qu&#39;on attribue à tort à l’un d’entre eux.</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"le-commencement\">Le commencement</h2>\n<p>IE6, vous connaissez ? Vous l’avez beaucoup critiqué, n’est-ce pas ? Vous lui avez préféré Firefox, vous avez pesté mille et une fois contre lui parce qu&#39;il fallait rajouter des lignes de code pour lui faire entendre des choses simples. Et pourtant, Microsoft ne l’a pas amené à 99% de parts de marché à coup de baguette magique ! Les développeurs web (du moins, ceux qui étaient là en 2000) y ont fortement contribué. Parce qu&#39;IE6 c&#39;était génial. Parce que pour la première fois, un navigateur respectait les standards du CSS (On parle du CSS1, et des premières ébauches de ce qu&#39;allait être le CSS2). Parce qu&#39;il possédait des outils de déploiement pour l’entreprise géniaux. Parce que l’ActiveX, c&#39;était de nouvelles possibilités. Alors Netscape est mort, faute d’avoir su se mettre au niveau, et des millions d’applications métiers ont été développées pour IE6. <strong>La monoculture du web était née</strong>.</p>\n<p>Pour ceux qui veulent entendre un autre que moi en parler, il y a cette vidéo (en anglais) de Bruce Lawson (Opera) qui tenait une excellente conférence sur le sujet à Sud Web 2012 :</p>\n<p>&lt;iframe class=&quot;aligncenter&quot; src=&quot;http://player.vimeo.com/video/52171395?color=ff9933&quot; width=&quot;500&quot; height=&quot;375&quot; frameborder=&quot;0&quot; webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;\n\n</p>\n<h2 id=\"ie-et-les-standards\">IE et les standards</h2>\n<p><em>&quot;Internet Explorer ne respecte pas les standards !&quot;</em> peut-on entendre çà et là sur la toile (surtout de la bouche - enfin du clavier - de ceux qui ne connaissent pas lesdits standards).</p>\n<p>Je crois que la réponse la plus pertinente dans ce genre de cas reste <em>&quot;Euh, si&quot;</em>. Mais je te vois déjà, lecteur, rire derrière ton écran en allant vérifier le score d’IE sur <a href=\"http://html5test.com\">html5test</a>. Alors je sens qu&#39;il va me falloir t&#39;apporter des preuves de ce que j’avance. Et ça tombe bien, parce que j’ai tout ce qu&#39;il faut pour ça.</p>\n<p>Je vais commencer par une preuve qui fait très mal, et du coup je vais l’écrire en gras-qui-te-pète-bien-la-rétine : <strong>Chrome et Firefox galèrent à gérer un border tout simple</strong>. Bon, j’exagère un poil, mais ce n’est pas si loin de la vérité. Plus exactement, <strong>WebKit</strong> (le moteur de rendu qui équipe Chrome, Safari, Opera et Maxthon - entre autres), <strong>Gecko</strong> (Firefox) et <strong>Trident</strong> (Internet Explorer) ont tous une façon différente de gérer les éléments, et sur border on remarque aisément des difficultés sur certains. Pour vérifier ça, vous pouvez vous rendre sur <a href=\"http://lab.infographizm.com/divers/tests-compatibilite-navigateurs/\" title=\"Voir les tests de compatibilité navigateur sur le Laboratoire InfographiZm\">le labo</a>, et constater par vous-même.</p>\n<p>Les résultats sont les suivants. À noter que le code est tout à fait identique pour chaque navigateur.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/08/tests-border-nav1.png\" alt=\"Test bordures navigateur class=\"></p>\n<p>Vous pourrez aussi constater que Firefox ne prend pas en compte le line-height dans un champ de texte, ni le positionnement dans une cellule de tableau.</p>\n<p><strong>Mise à jour 8 Février 2014 :</strong> Toujours aucune amélioration sur ces points sur Firefox 27 et Chrome 32.</p>\n<p><strong>Mise à jour 23 Avril 2015 :</strong> Depuis quelques versions, le problème de position dans les cellules de tableau est réglé sur Firefox.</p>\n<p>La question du test ACID3 a un moment été un centre d’intérêt, avant que tous les navigateurs n’arrivent à 100% de réussite. Cependant, on peut s&#39;interroger autant sur la fiabilité du test que sur l’implémentation des éléments testés, en voyant ce résultat obtenu par Chrome 10 (seule version à avoir eu ce &quot;problème&quot;) :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/08/acid3-chrome10.jpg\" alt=\"acid3-chrome10\"></p>\n<p>Résultat affiché de 100%, alors que le rendu est très loin de celui qui est censé être le <a href=\"http://acid3.acidtests.org/\" title=\"Test Acid3\">gage d’un résultat correct</a>.</p>\n<p>C&#39;est exactement le même genre de soucis avec html5test : ce genre de sites ne fait que vérifier si une fonctionnalité est présente, elle ne teste pas son implémentation. De fait, Chrome prétend gérer les nouveaux paramètres de la propriété <code>background-position</code> introduits en CSS3, alors que ce n’est absolument pas le cas dans les faits.</p>\n<h3 id=\"pourquoi-des-diff-rences-d-un-navigateur-l-autre-\">Pourquoi des différences d’un navigateur à l’autre ?</h3>\n<p>C&#39;est une question de philosophie de développement : google intègre à Chrome beaucoup de choses et s&#39;empresse d’implémenter les dernières nouveautés en pré-alpha, alors que Microsoft préfère généralement attendre la stabilité et les retours sur une technologie avant de l’ajouter à son navigateur. C&#39;est pour ça qu&#39;on trouve beaucoup moins de propriétés préfixées dans IE comparativement aux navigateurs WebKit qui en intègrent des pelletées.</p>\n<p>L’un dans l’autre, les deux façons de faire ont des avantages et des inconvénients. Pour qu&#39;une technologie soit finalisée, il faut que les développeurs puissent jouer avec, apprendre à l’utiliser, la comprendre. De fait, les propriétés préfixées sont un bon moyen de proposer un compromis. Cependant, c&#39;est également un risque : si au cours de son développement, la techno change, il faut redévelopper ce qui a été fait avec pour le rendre compatible (c&#39;est arrivé avec <code>linear-gradient</code>). De plus, les versions futures du navigateur devront, en plus d’intégrer la version &quot;finale&quot; modifier, permettre la rétrocompatibilité vers l’ancienne implémentation.</p>\n<h2 id=\"technologie\">Technologie</h2>\n<p>De ce côté, on peut signaler qu&#39;Internet Explorer était le premier à introduire la gestion des onglets dans des processus séparés (multithread), dès IE7 (2006) ; à ce jour, Firefox ne l’implémente toujours pas, alors que Chrome l’a employé dès la conception du navigateur en 2008. Le <em>sandboxing</em> des onglets, également, a été introduit dès Internet Explorer 8 (2008), et amélioré avec les versions suivantes. De plus, le principe de sécurité d’IE a été repris par Google pour Chrome ; inversement, IE intègre aujourd’hui nativement Adobe Flash comme le fait Chrome, ce qui est un gage de sécurité.</p>\n<p>Du reste, Internet Explorer a longtemps été le seul, sur Windows, à bénéficier d’une version native en 64 bits. Chrome a rejoint les rangs fin 2014.</p>\n<p>On vante souvent les fonctionnalités des autres navigateurs mais IE offre généralement les mêmes possibilités.&lt;p&gt;</p>\n<ul>\n<li>Comme les autres, il peut rétablir des onglets fermés par inadvertance, ou récupérer une session entière après une coupure du PC</li>\n<li>IE intègre un antipub natif auquel on peut donner les listes noires utilisées par AdBlock</li>\n<li>Il embarque aussi un correcteur d’orthographe</li>\n<li>Il possède des outils de développement intégrés</li>\n</ul>\n<h3 id=\"int-gration-d-ie-avec-windows\">Intégration d’IE avec Windows</h3>\n<p>&lt;p&gt;Microsoft propose en sus des outils d’intégration à Windows assez intéressant, il est dommage que les autres navigateurs ne suivent pas le mouvement. On peut en effet épingler un site de façon plus ou moins avancée dans la barre des tâches avec divers raccourcis, et sur les tuiles de l’interface Modern UI de Windows 8.</p>\n<p>J’ai écrit un <a href=\"http://www.emmanuelbeziat.com/blog/site-epingle-avec-internet-explorer/\" title=\"Site épinglé avec Internet Explorer\">tutoriel sur le sujet</a> qui vous permettra d’en savoir plus si ça vous intéresse.</p>\n<h2 id=\"alors-pourquoi-tant-de-haine-\">Alors pourquoi tant de haine ?</h2>\n<p>Internet Explorer souffre du souvenir d’IE6, qui est resté trop longtemps sans successeur. En effet, lorsqu&#39;on est en position de monopole absolu et que des milliers d’applications métier ont été développées pour votre outil (et donc qu&#39;une nouvelle version est très délicate à envisager car nécessite une rétrocompatibilité parfaite - ce qui donnera naissance à la balise meta <code>X-UA Compatible</code>, on préfère se dire qu&#39;on a réussi de ce côté et faire des économies pour se concentrer sur autre chose. C&#39;est le problème de la monoculture (voir la vidéo plus haut). Le développement d’Internet Explorer 7 a donc été longuement repoussé et retardé. Mais IE8 a rattrapé tout le retard de son prédécesseur, et les successeurs successifs (quelle belle allitération !) ont largement comblé le retard.</p>\n<p>Pourtant, si on se balade sur les forums HTML/CSS du <strong>Site du Zéro</strong>, on tombe souvent sur des sujets <em>&quot;Mon site s&#39;affiche mal sur IE&quot;</em>. Pourquoi donc ? Hé bien neuf fois sur dix, parce que le code n’est pas bon. Firefox et Chrome corrigent souvent différentes erreurs à la volée, par exemple une balise mal fermée, et le développeur inattentif est alors persuadé d’avoir un bon code qui fonctionne. Internet Explorer ne possède pas de gestionnaire d’erreurs de ce type, et affiche donc une erreur là où il trouve une erreur. C&#39;est pour ça qu&#39;on dit que le navigateur est strict. Il suffit donc presque toujours de corriger son code, que ce soit en HTML ou en CSS.</p>\n<p>La soi-disant mauvaise gestion des standards d’IE sert trop souvent d’excuse aux développeurs, qui vont préférer trouver des responsables extérieurs plutôt que de remettre en cause leurs propres compétences (ça m&#39;arrive aussi, hein !).</p>\n<p>Mauvaise foi, je vous dis !</p>\n<p>Évidemment, le comble serait de comparer un navigateur récent à un autre ancien. Pourtant certains n’hésitent pas à le faire, se servant d’Internet Explorer 7 (On en est au 11, quand même !), sorti bien avant les specs du CSS3, pour décrier le navigateur tout entier, en le comparant à la dernière version de Chrome ou de Firefox. Et bien entendu, cela n’a aucun sens. Pour être un minimum objectif, il faut comparer ce qui est comparable. Je suis bien certain que beaucoup de sites doivent avoir une drôle de gueule sous Firefox 2.5 aujourd’hui…</p>\n<h2 id=\"conclusion-\">Conclusion ?</h2>\n<p>Eh bien, tous les navigateurs modernes se valent. Tous ont des avantages et des inconvénients, cracher sur l’un ou l’autre tient juste de la foi personnelle. Choisissez donc votre navigateur selon vos préférences et vos goûts personnels, et ne vous laissez pas avoir par ceux qui veulent absolument vanter les mérites de l’élu de leur cœur avec plus de conviction qu&#39;un témoin de Jéhovah qui tente d’entrer dans votre salon pour vous bassiner avec ses &lt;q&gt;Cthulhu fhtagn !&lt;/q&gt;.</p>\n<p>Et bien sûr, par pitié, oubliez immédiatement vos petites banderoles <em>&quot;site optimisé pour Chrome/Firefox&quot;</em> qui vous feront passer au mieux pour un flemmard qui n’a pas envie de rendre son site compatible, au pire pour un incompétent qui ne sait pas faire mieux !</p>\n<p>Vous êtes prévenus !</p>\n<h2 id=\"edit-du-27-juillet-2015\">Edit du 27 juillet 2015</h2>\n<p>Demain sort Microsoft Edge, remplaçant d’Internet Explorer. Ce qui signifie que ce dernier n’aura plus de version supplémentaire. Niels Leenheer lui a rendu un petit hommage vidéo dans une conférence :</p>\n<p>&lt;iframe class=&quot;aligncenter&quot; width=&quot;700&quot; height=&quot;394&quot; src=&quot;https://www.youtube.com/embed/w4WAPTJM8E0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n</p>\n"},{"title":"Principes du CSS - Les sélecteurs (Partie1 : CSS2)","author":"Emmanuel B.","date":"2013-08-28 01:54:32","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"u-css-les-selecteurs-partie1-css2","content":"<p>Lorsqu&#39;on utilise du CSS, on peut se contenter des trois sélecteurs de base : les éléments, les identifiants et les classes. Souvent, sans le savoir, vous utilisez un sélecteur simple de descendance, par un espace entre deux de ces sélecteurs - hé oui ! Mais il existe d’autres sélecteurs plus avancés, nous allons les passer en revue.</p>\n<p>&lt;!--more--&gt;\n</p>\n<p>Je ne traite ici que du CSS 2.1. Le CSS3 apporte de nouveaux sélecteurs très intéressants et utiles, <a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-les-selecteurs-partie-2-css3/\">qui sont listés dans cet article</a>.</p>\n<h2 id=\"pr-ambule\">Préambule</h2>\n<p>Pour petit rappel :</p>\n<pre><code class=\"html\">&lt;balise attribut=&quot;valeur&quot;&gt;\n</code></pre>\n<p>Donc si vous êtes là, c&#39;est que vous savez construire une feuille de style. Et vous travaillez comme ceci, grosso modo :</p>\n<pre><code class=\"css\">#page {\n    width: 800px;\n    overflow: auto;\n}\n\n#page .bloc {\n    width: 100px;\n    display: inline-block;\n}\n</code></pre>\n<p>C&#39;est une bonne base de travail ; mais il existe une utilisation plus avancée des sélecteurs. Figurez-vous que ceci veut dire quelque chose en CSS :</p>\n<pre><code class=\"css\">#page &gt; div * div + div li:first-child a[href~=&quot;index.html&quot;]  {\n    color: #ccc;\n}\n</code></pre>\n<p>Certes, c&#39;est un tantinet plus long et complexe qu&#39;écrire simplement la classe d’un élément.</p>\n<p>Il est important de noter que la séparation du contenu et de la mise en forme est au coeur même de l’utilisation du CSS et des principes sémantiques que le W3C met en place depuis des anneés. Par là même, l’idéal pour cette sémantique serait d’avoir un code html vide d’éléments de mise en forme - d’ailleurs, le W3C recommande l’absence de tout attribut <code>style</code> dans les balises html et préconise l’utilisation de classes et d’identifiants à la place.</p>\n<p>Mais on peut minimiser au maximum l’utilisation de ces classes et de ces ID grâce à l’utilisation des sélecteurs. Dans l’exemple ci-dessus, j’ai volontairement exagéré la complexité, mais on peut faire beaucoup de choses avec simplicité - parfois même plus qu&#39;avec des classes.</p>\n<p>De plus, ça peut se révéler très utile dans certains cas. Songez à ceci :</p>\n<ul>\n<li>Vous n’aurez peut-être pas toujours accès au html et donc pas la possibilité de le modifier.</li>\n<li>Vous pouvez, grâce à ça, proposer un changement de design très facile, qui ne nécessite que peu de remaniement html sur votre site.</li>\n<li>Cela sert également à appliquer un style à des éléments très nombreux sans avoir besoin de toucher au html.</li>\n</ul>\n<h2 id=\"les-s-lecteurs-de-descendance\">Les sélecteurs de descendance</h2>\n<h3 id=\"s-lecteur-de-descendance\">Sélecteur de descendance</h3>\n<pre><code class=\"css\">.rouge span { color: red }\n</code></pre>\n<p>Vous utilisez déjà très probablement ce sélecteur, sans même le savoir. En effet, mettre un élément à la suite d’un autre crée automatiquement un principe de descendance. Dans le cas présent, la <code>div</code> portant la classe <code>rouge</code> devient parente de l’élément <code>span</code> qui lui, devient enfant.</p>\n<p>Dans cet exemple, toutes les balises <code>span</code> contenues dans la <code>div</code> seront affectés, et ce peu importe s&#39;il y a d’autres balises entre eux ; sauf si un parent plus &quot;proche&quot; lui donne une information contradictoire, comme une autre couleur : c&#39;est le principe d’héritage.</p>\n<pre><code class=\"html\">&lt;div class=&quot;rouge&quot;&gt;\n    &lt;div class=&quot;bleu&quot;&gt;\n        &lt;span id=&quot;monID&quot;&gt;Ce texte sera affecté&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n</code></pre>\n<p>Dans le cas présent, le <code>span</code> portant l’id &quot;monID&quot; est enfant de la <code>div</code> &quot;bleu&quot;, puis de la <code>div</code> &quot;rouge&quot;. Voyons un petit schéma simple histoire de bien comprendre ce principe :</p>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n<em>   Mes enfants seront rouges\n\n</em>   Mon parent m&#39;a dit d’être rouge\n<em>   Mon parent m&#39;a dit d’être rouge\n\n</em>   Le parent de mon parent m&#39;a dit d’être rouge\n<em>   Le parent de mon parent m&#39;a dit d’être rouge\n</em>   Mon parent m&#39;a dit d’être rouge, mais mes enfants seront verts !\n\n<em>   Mon parent m&#39;a dit d’être vert\n</em>   Mon parent m&#39;a dit d’être vert\n<em>   Mon parent m&#39;a dit d’être rouge\n</em>   Mes enfants seront bleus\n\n*   Mon parent m&#39;a dit d’être bleu\n&lt;/div&gt;\n\n</p>\n<h3 id=\"selecteur-d-enfant-direct-\">Selecteur d’enfant direct : &quot;&gt;&quot;</h3>\n<pre><code class=\"css\">.rouge &gt; span { color: red }\n</code></pre>\n<p>Sur le même principe de lien enfant/parent, ce sélecteur (qui ne porte pas de nom particulier au demeurant, mais que j’appelle &quot;sélecteur d’enfant direct&quot; pour être plus clair) sert à agir uniquement sur les enfants directs d’un élément, à l’inverse du sélecteur simple qui agit de manière récursive (c&#39;est-à-dire sur toute sa descendance, y compris les descendants de ses descendants).</p>\n<pre><code class=\"html\">&lt;div class=&quot;rouge&quot;&gt;\n    &lt;div class=&quot;bleu&quot;&gt;\n        &lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n    &lt;/div&gt;\n\n    &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n</code></pre>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n<em>   Mes enfants directs seront rouges\n\n</em>   &lt;span style=&quot;color:red&quot;&gt;Mon parent m&#39;a dit d’être rouge&lt;/span&gt;\n<em>   &lt;span style=&quot;color:red&quot;&gt;Mon parent m&#39;a dit d’être rouge&lt;/span&gt;\n\n</em>   On ne m&#39;a rien dit\n<em>   On ne m&#39;a rien dit\n</em>   Mon parent m&#39;a dit d’être rouge&lt;/div&gt;\n\n</p>\n<h3 id=\"selecteur-d-enfant-indirect-\">Selecteur d’enfant indirect : &quot;*&quot;</h3>\n<pre><code class=\"css\">.rouge * span { color: red }\n</code></pre>\n<p>À l’inverse du sélecteur d’enfant direct, ce sélecteur agit de manière inverse et affecte tous ses descendants sauf ses enfants directs.</p>\n<pre><code class=\"html\">&lt;div class=&quot;rouge&quot;&gt;\n    &lt;div class=&quot;bleu&quot;&gt;\n        &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n&lt;/div&gt;\n&lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n</code></pre>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n<em>   Mes enfants descendants seront rouges\n\n</em>   On ne m&#39;a rien dit\n<em>   On ne m&#39;a rien dit\n\n</em>   Mon grand-parent m&#39;a dit d’être rouge\n<em>   Mon grand-parent m&#39;a dit d’être rouge\n</em>   Mon grand-parent m&#39;a dit d’être rouge\n\n<em>   Mon grand-parent m&#39;a dit d’être rouge\n</em>   Mon grand-parent m&#39;a dit d’être rouge\n*   On ne m&#39;a rien dit&lt;/div&gt;\n\n</p>\n<h3 id=\"selecteur-d-adjacence-directe-\">Selecteur d’adjacence directe : &quot;+&quot;</h3>\n<pre><code class=\"css\">.rouge span + span { color: red }\n</code></pre>\n<p>Un sélecteur un peu plus complexe cette fois-ci, mais très utile. Celui-ci sert à définir un lien d’adjacence entre deux balises ayant un parent direct commun. Les éléments adjacents au dernier cité ne seront pas affectés.</p>\n<pre><code class=\"html\">&lt;div class=&quot;rouge&quot;&gt;\n    &lt;div class=&quot;bleu&quot;&gt;\n        &lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n        &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n    &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n&lt;/div&gt;\n&lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n</code></pre>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n<em>   Je n’ai rien dit à personne\n\n</em>   Mes frères seront rouges !\n<em>   Mon frère m&#39;a dit d’être rouge\n</em>   Mon frère m&#39;a dit d’être rouge&lt;/div&gt;\n\n</p>\n<p>On peut bien sûr utiliser ce sélecteur plusieurs fois. Par exemple, si on voulait affecter les éléments d’une liste seulement à partir du quatrième élément :</p>\n<pre><code class=\"css\">li+li+li+li { color: red }\n</code></pre>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n1.  Élément de liste\n2.  Élément de liste\n3.  Élément de liste\n4.  Élément de liste\n5.  Élément de liste\n6.  Élément de liste\n7.  Élément de liste\n8.  Élément de liste\n9.  Élément de liste&lt;/div&gt;\n\n</p>\n<p>C&#39;est un sélecteur dont je me sers régulièrement pour, entre autres, définir des marges automatiques entre deux éléments de même nature, comme des blocs d’un élément de menu.</p>\n<pre><code class=\"css\">#sidebar div+div { margin-top: 15px }\n</code></pre>\n<h2 id=\"les-s-lecteurs-d-attributs\">Les sélecteurs d’attributs</h2>\n<p>On peut également attribuer des propriétés à un (ou plusieurs) élément(s) html précis en fonction des attributs qu&#39;ils portent. Ainsi on peut, encore une fois, se passer facilement d’ajouts de classes dans le html en se reposant sur ce qui existe déjà. Il suffit d’accoler le nom de l’attribut en question entre crochets [] à l’élément en question. On ne se soucie pas de la valeur de cet attribut.</p>\n<pre><code class=\"css\">a[title] { color: red }\n</code></pre>\n<pre><code class=\"html\">&lt;a href=&quot;#&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; title=&quot;Venez sur mon site !&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n</code></pre>\n<pre><code class=\"css\">a[target] { color: red }\n</code></pre>\n<pre><code class=\"html\">&lt;a href=&quot;#&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; title=&quot;&quot; target=&quot;&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n</code></pre>\n<p>Mais on peut également aller plus loin et cibler un élément dont l’attribut prend une valeur précise. C&#39;est très utile pour les éléments d’un formulaire, qui sont définis, avec la même balise, par la valeur de leur type :</p>\n<pre><code class=\"css\">input[type=&quot;password&quot;] { color: red }\n</code></pre>\n<pre><code class=\"html\">&lt;input type=&quot;text&quot; /&gt;\n&lt;input type=&quot;password&quot; /&gt; &lt;!-- Cet élément sera affecté --&gt;\n&lt;input type=&quot;submit&quot; /&gt;\n</code></pre>\n<p>Vous pouvez également définir le fait qu&#39;un attribut doit contenir au moins une des valeurs énoncées.</p>\n<pre><code class=\"css\">a[rel~=&quot;copyright&quot;] { color: red }\n</code></pre>\n<pre><code class=\"html\">&lt;a href=&quot;#&quot; rel=&quot;&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; rel=&quot;copyright&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; rel=&quot;copyright copyleft&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n</code></pre>\n<p>Sachez enfin qu&#39;on peut combiner ces sélecteurs à volonté :</p>\n<pre><code class=\"css\">a[rel][target=_blank][title] { color: red }\n</code></pre>\n<h2 id=\"les-pseudo-classes\">Les pseudo-classes</h2>\n<p>Les pseudo-classes désignent des éléments que l’on n’aurait pas pu cibler sans ajouter une classe particulière.</p>\n<h3 id=\"-first-child\">:first-child</h3>\n<p>Très pratique dans certains cas, cette pseudo-classe cible un élément s&#39;il est le premier enfant de son parent. Il faut donc bien faire attention, car il s&#39;agit bien du premier enfant, et non du premier enfant d’un tel type. Par exemple :</p>\n<pre><code class=\"css\">div p:first-child { color: red }\n</code></pre>\n<pre><code class=\"html\">&lt;div&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Si on voit maintenant, pour le même code CSS, ce code HTML :</p>\n<pre><code class=\"html\">&lt;div&gt;\n    &lt;h2&gt;Ce titre ne sera pas affecté&lt;/h2&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Rien ne va se passer. En effet, le code CSS signifie &quot;cibler tous les éléments <code>p</code> s&#39;il s&#39;agit du premier enfant de leur parent&quot; et non &quot;cibler tous les éléments <code>p</code> qui sont les premiers de ces éléments de type <code>p</code> enfants&quot;. Or dans ce cas, c&#39;est <code>h2</code> qui est le premier enfant.</p>\n<h3 id=\"-active\">:active</h3>\n<p>Cette pseudo-classe est de moins en moins utilisée. Elle est héritée de la première version du CSS et servait à cibler un lien &quot;actif&quot; (donc un lien au moment où il était cliqué). On peut maintenant l’utiliser sur n’importe quel élément, mais c&#39;est assez peu usité.</p>\n<pre><code class=\"css\">a:active { color: white }\n</code></pre>\n<h3 id=\"-link\">:link</h3>\n<p>Cette pseudo-classe est de moins en moins utilisée. Elle sert à cibler un lien qui n’a pas encore été visité par le visiteur actuel.</p>\n<pre><code class=\"css\">a:link { color: white }\n</code></pre>\n<h3 id=\"-visited\">:visited</h3>\n<p>Cette pseudo-classe est de moins en moins utilisée. À l’inverse du précédent, elle sert à cibler un lien qui a déjà été visité par le visiteur actuel.</p>\n<pre><code class=\"css\">a:visited { color: violet }\n</code></pre>\n<h3 id=\"-focus\">:focus</h3>\n<p>Cette pseudo-classe permet de cibler un élément qui a actuellement le &quot;focus&quot;. Par exemple, lorsque vous cliquez dans un champ de texte, celui-ci prend automatiquement cette valeur dynamique de focus. C&#39;est aussi le cas des liens, lorsqu&#39;on navigue avec la touche &quot;tab&quot;.</p>\n<pre><code class=\"css\">input:focus { background: green }\n</code></pre>\n<h3 id=\"-hover\">:hover</h3>\n<p>Cette pseudo-classe est très utilisée. Elle déclenche un ensemble de propriétés au survol d’un élément par la souris. C&#39;est par exemple très utilisé pour les menus, qui vont se dérouler ou changer de couleur au survol. On peut l’appliquer à tout élément html.</p>\n<pre><code class=\"css\">div:hover { background: white }\n</code></pre>\n<p>Il est aussi possible de cibler des éléments au survol de leur parent. Dans le cas suivant, ce sont tous les liens contenus dans un élément de liste, au survol de la div qui les contient (et non au survol du lien) :</p>\n<pre><code class=\"css\">div:hover li a { background: white }\n</code></pre>\n<h2 id=\"les-pseudo-l-ments\">Les pseudo-éléments</h2>\n<p>Les pseudo-éléments s&#39;utilisent de la même manière que les pseudo-classes ; cette appellation désigne simplement des éléments que l’on n’aurait pas pu identifier sans ajouter un autre élément (comme span ou div, par exemple).</p>\n<h3 id=\"-first-letter\">:first-letter</h3>\n<p>On peut se servir de <code>:first-letter</code> pour créer des lettrines. C&#39;est d’ailleurs sa principale utilité. Dans l’exemple suivant, tous les éléments <code>p</code> verront leur première lettre affichée en rouge.</p>\n<p><code>p:first-letter { color: red }</code></p>\n<h3 id=\"-first-line\">:first-line</h3>\n<p>Peu utilisé, ce pseudo-élément va agir sur la première ligne de texte d’un élément.</p>\n<p><code>p:first-line { color: red }</code></p>\n<h3 id=\"-after-et-before\">:after et :before</h3>\n<p>Voici deux pseudo-éléments complémentaires très utiles. Ils s&#39;utilisent avec la propriété <code>content</code> et servent à rajouter un élément avant (pour <code>:before</code>) ou après (pour <code>:after</code>) un autre élément.</p>\n<p><code>span:before{ content: &quot;→ &quot; }</code></p>\n<p>Ainsi pour ce code :</p>\n<pre><code class=\"html\">&lt;span&gt;Test&lt;/span&gt;\n</code></pre>\n<p>On obtiendra ce résultat :</p>\n<p>&lt;div class=&quot;showcode&quot;&gt;→ Test&lt;/div&gt;\n<code>css\na:after{ content: &quot; &gt;&gt;&quot; }</code>\n\n<code>html\n&lt;a href=&quot;#&quot;&gt;Lien&lt;/a&gt;\n&lt;a href=&quot;#&quot;&gt;Lien &gt;&gt;&lt;/a&gt;</code>\n\n## Le sélecteur universel : &quot; <em> &quot;\n\nCe sélecteur, à ne pas confondre avec le sélecteur d’enfant indirect que nous avons vu plus haut, cible tous les éléments.\n\n```css\n</em> { color: red }```\n\n&lt;div class=&quot;note note--alert&quot;&gt;Ce sélecteur est donc très &quot;lourd&quot; (tout est relatif) à utiliser et vous ne devriez l’employer qu&#39;avec une extrême parcimonie, voire jamais !&lt;/div&gt;\n\n</p>\n<p>N’hésitez pas si vous avez des questions, le formulaire de commentaires est là !</p>\n"},{"title":"Principes du CSS - Poids des déclarations","author":"Emmanuel B.","date":"2013-09-01 23:10:27","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"u-css-poids-des-declarations","content":"<p>Parfois, votre CSS ne semble pas avoir d’effet. Vous ajoutez une classe à un élément pour le rendre rouge, et celui-ci reste désespérément bleu. Mais pourquoi ? Hé bien, ami lecteur fort curieux (et tu as raison) en train de faire ta veille internet, je vais t&#39;expliquer le <strong>poids des déclarations</strong> (ouaiiis !).&lt;/p&gt;\n&lt;!--more--&gt;</p>\n<p>Pour rappel, la déclaration, c&#39;est ce qui cible un ou plusieurs éléments html :</p>\n<pre><code class=\"css\">#monElement div.element { }\n</code></pre>\n<h2 id=\"le-poids-de-chaque-l-ment\">Le poids de chaque élément</h2>\n<p>Vous devez donc savoir qu&#39;il y a trois façons &quot;basiques&quot; de cibler un élément, c&#39;est à dire trois sélecteurs de base : l’identifiant (ID, #), la classe (class, .), ou le nom de l’élément :</p>\n<pre><code class=\"css\">element { color: red } /* nom */\n.element { color: red } /* classe */\n#element { color: red } /* identifiant */\n</code></pre>\n<p>Hé bien ces trois sélecteurs ont chacun un poids :</p>\n<ul>\n<li>L’élément a un poids de 1</li>\n<li>La classe a un poids de 10</li>\n<li>L’identifiant a un poids de 100</li>\n</ul>\n<p>Le poids d’une déclaration est calculé par simple addition de ces poids. Ainsi, prenons pour exemple cette déclaration :</p>\n<pre><code class=\"css\">#monID .maClasse {}\n</code></pre>\n<p>Le premier élément est un identifiant, il vaut donc 100. Le second est une classe, il vaut donc 10. Le poids de cette déclaration est donc 100 + 10 = 110. Simple non ?\nVoici d’autres exemples :</p>\n<pre><code class=\"css\">#monID span {}\n</code></pre>\n<p>Identifiant (100) + élement (1) = 101</p>\n<pre><code class=\"css\">#monID #autreID div.maClasse {}\n</code></pre>\n<p>identifiant (100) + identifiant (100) + element (1) + classe (10) = 211</p>\n<pre><code class=\"css\">.maClasse .autreClasse #monID {}\n</code></pre>\n<p>classe (10) + classe (10) + identifiant (100) = 120\nC&#39;est compris ?</p>\n<p><em>&quot;Mais à quoi ça nous sert ?&quot;</em>, vous demandez-vous sûrement. Hé bien c&#39;est simple : <strong>Plus une déclaration a un poids élevé, plus elle est prioritaire sur une autre</strong>, peu importe l’ordre de déclaration.</p>\n<p>Jusqu&#39;ici, vous saviez que l’ordre des déclarations influait sur leur emploi :</p>\n<p><code>span { color: red }\nspan { color: blue }\nspan { color: green }</code></p>\n<p>C&#39;est toujours vrai, l’élément ciblé ici serait de couleur verte, mais uniquement parce que le poids des déclarations est identique. Mais maintenant voyons ceci :</p>\n<pre><code class=\"css\">#monID { color: red }\nspan { color: blue }\n</code></pre>\n<p>Si l’élément ciblé est un span qui porte l’id &quot;monID&quot;, alors son texte sera de couleur rouge, car le poids de la première déclaration est de 100 (identifiant), la seconde n’étant que de 1 (élément).</p>\n<p>Prenons un exemple en html :</p>\n<pre><code class=\"html\">&lt;ul id=&quot;menu&quot;&gt;\n    &lt;li class=&quot;color&quot;&gt;&lt;a href=&quot;#&quot;&gt;Lien 1&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Lien 2&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Lien 3&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Lien 4&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Lien 2&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Maintenant, imaginons un CSS déjà existant pour ce html, qui vise à colorer les liens en rouge :</p>\n<pre><code class=\"css\">#menu a { color: red }\n</code></pre>\n<p>Cette déclaration a donc un poids de 101 (un identifiant et un élément);</p>\n<p>Sur ce, vous voulez que le lien dont la liste porte la classe &quot;color&quot; s&#39;affiche en vert.</p>\n<pre><code class=\"css\">.color a { color: green }\n</code></pre>\n<p>Surprise ! Ça ne fonctionne pas. En effet, cette déclaration n’a un poids que de 11, donc il ne surclasse pas la précédente de 102 même en étant placé après. Il faut donc écrire une déclaration dont le poids surpassera la première :</p>\n<pre><code class=\"css\">#menu .color a\n</code></pre>\n<p>Cette déclaration fait donc 111 (identifiant + classe + element), son poids est supérieur à la première, et notre lien s&#39;affiche en vert.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Les pseudo-classes (<code>:hover</code>, <code>:first-child</code>, etc.) ont le même poids qu&#39;une classe (donc 10) et les pseudo-éléments ont le même poids qu&#39;un élément (1).&lt;/div&gt;\n\n</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;\n\nAttention toutefois : Il ne s&#39;agit pas d’une simple notation mathématique, mais de &quot;niveaux de poids&quot;. 10 classes n’auraient le même poids qu&#39;un ID. Il est impossible de surcharger un type &quot;supérieur&quot; — en clair, des éléments ne pourront pas surcharger une classe, une classe ne pourra pas surcharger un ID, etc.\n\nPour être plus précis, il faudrait noter &quot;1.0.1&quot; et non simplement &quot;101&quot;. Ce qui signifie que si on rajoutait 15 classes à cette déclaration, on obtiendrait un poids de &quot;1.15.1&quot;, et non 251.\n&lt;/div&gt;\n\n</p>\n<h3 id=\"notez-bien-\">Notez bien !</h3>\n<p>D’une manière générale, dans le métier, on essaie de faire des déclarations &quot;minimales&quot;, c&#39;est à dire au poids le plus petit possible. En effet, pour l’exemple précédent, on aurait pu faire une déclaration de ce genre :</p>\n<pre><code class=\"css\">ul#menu li a { color: red }\n</code></pre>\n<p>Ces déclarations peuvent vite devenir très longues, et les raccourci un maximum est un bon moyen de s&#39;assurer à la fois que le code continuera à changer même si le markup (Template) de la page change dans l’avenir, et de permettre d’optimiser un peu le poids de la feuille de CSS. Mais surtout, cela permet de pouvoir surclasser ces déclarations très facilement. En effet, il y a bien plus de façons simples de surclasser une déclaration d’un poids de 102 que de 625 lorsqu&#39;on veut effectuer une petite modification.</p>\n<p>Pensez-y !</p>\n<h2 id=\"cas-particuliers\">Cas particuliers</h2>\n<pre><code class=\"html\">&lt;div style=&quot;color:red&quot;&gt;mon texte&lt;/div&gt;\n</code></pre>\n<p>Déclarer du CSS inline (c&#39;est à dire dans le html) lui donne automatiquement un poids de 1 000. Autant dire que vous ne pourrez presque rien faire dans votre feuille de style pour le surclasser ! C&#39;est aussi pour ça qu&#39;il faut éviter de mettre du CSS de cette façon. Comment faire alors ?</p>\n<p>Hé bien le marqueur <code>!important</code> donne un poids de 10 000. De quoi surclasser tout ce qui se trouve dans la page, y compris le CSS <em>inline</em>.</p>\n<pre><code class=\"css\">element { color: red !important }\n</code></pre>\n<p>Retenez donc que ces deux cas particuliers ne devraient pas être utilisés. La gestion du poids comme de l’héritage suffit largement pour\nmettre votre site en forme !</p>\n<p>Voilà, maintenant vous savez tout sur le poids des déclarations en CSS.</p>\n<h4 id=\"edit-du-7-avril\">Edit du 7 Avril</h4>\n<p>Si vous n’avez rien compris, si vous pensez que des métaphores avec des animaux mignons et des gifs animés vous aideront à mieux appréhender le concept, ou tout simplement si vous trouvez que j’explique mal, <strong>Lamecarlate</strong> a fait un bon article qu&#39;elle a sobrement (Et honteusement, c&#39;était mon idée !) nommé  &lt;q&gt;<a href=\"http://informatique.lamecarlate.net/blog/articles/selecteurs-css-poids\" title=\"Lamecarlate\">Sélecteurs CSS : poids des déclarations</a>&lt;/q&gt;</p>\n"},{"title":"Les découvertes du web #1","author":"Emmanuel B.","date":"2013-11-08 21:11:11","tags":["design"],"categories":["Veille"],"template":"post.vue","basename":"rtes-du-web-1","content":"<p>Au programme aujourd’hui : des astuces en CSS, un mythe qui s&#39;effondre et un site bien utile.</p>\n<h3 id=\"grille-css-toujours-pleine\">Grille CSS toujours pleine</h3>\n<p>Une petite astuce sympathique à voir sur <a href=\"http://www.heydonworks.com/article/tetris-the-power-of-css\">heydonwork</a>.</p>\n<h3 id=\"-les-utilisateurs-ne-scrollent-pas-\">&quot;Les utilisateurs ne scrollent pas&quot;</h3>\n<p>Idée reçue ayant la vie dure, <a href=\"http://uxmyths.com/post/654047943/myth-people-dont-scroll\">UxMyths</a> nous propose de quoi y mettre un bon coup de clavier sur le coin de la gueule.</p>\n<h3 id=\"css-prefix\">CSS-Prefix</h3>\n<p>Vous est-il déjà arrivé de devoir reprendre votre CSS pour copier-coller un sélecteur supplémentaire sur une quarantaines de déclarations, pas toutes sur différentes lignes ? Hé bien pas de panique, la solution s&#39;appelle <a href=\"http://www.css-prefix.com/\">CSS-Prefix</a>.</p>\n<p>C&#39;est tout !</p>\n"},{"title":"L'informatique facile m'a tué","author":"Emmanuel B.","date":"2013-11-11 23:04:47","tags":[""],"categories":["Diatribes"],"template":"post.vue","basename":"que-facile-ma-tue","content":"<p>L’informatique, c&#39;est super. Grâce à internet, on peut tout apprendre ; on peut suivre des destins hors du commun et grâce à des projets incroyables certains petits geeks (Parmi lesquels Markus &quot;Notch&quot; Persson, Mark Zuckerberg, Andrey Ternovskiy, etc.) ont atteint la notoriété et parfois même la richesse et la gloire.</p>\n<p><em>&quot;Moi aussi, je veux faire ça !&quot;</em> se disent 45 000 personnes chaque jour (au bas mot hein). Oui, mais est-ce vraiment si simple ?</p>\n<p>&lt;!--more--&gt;\n</p>\n<h2 id=\"l-informatique-la-port-e-de-tous\">L’informatique à la portée de tous</h2>\n<p>Parce que tout est accessible à tout le monde, tout semble soudain dévalué. Le mystère tombe, et les métiers de l’informatique semblent perdre toute valeur.</p>\n<p>Si vous touchez un peu (à l’informatique, hein !), vous avez vous-même dû être maintes fois appelé en urgence par votre voisin parce que sa souris ne marche plus, par votre tante parce qu&#39;il n’y a plus internet ou encore par la connaissance d’un mec que vous avez croisé parce que son pc est lent. Et comme tous ceux qui ont le malheur de faire savoir à leur entourage qu&#39;ils se dépatouillent avec un clavier entre les pognes, vous avez sûrement dû sentir une certaine frustration à force d’être pris pour un &lt;del&gt;pigeo&lt;/del&gt; &lt;del&gt;co&lt;/del&gt; &lt;del&gt;bonich&lt;/del&gt; serviable petit(e) larbin(e).</p>\n<p>Hé bien soyez conscient que c&#39;est encore pire dans le métier !</p>\n<h3 id=\"le-syndrome-du-gratuiste\">Le syndrome du gratuiste</h3>\n<p>Le taff pour lequel cette frustration est probablement la plus ressentie, c&#39;est celui de graphiste ; ou plus précisément, d’infographiste. Vous savez, ces gens qui font des affiches, des plaquettes publicitaires, des magazines et toutes sortes de choses visuelles qui croisent votre regard tous les jours ? Hé bien leur boulot est <strong>extrêmement</strong> dévalué. Parce que tout le monde peut faire un peu de Photoshop, ça parait forcément simple. Parce que le neveu du patron il en fait un peu aussi, pourquoi s&#39;embêterai-t-il a payer cher quelqu&#39;un pour faire sensiblement la même chose ?</p>\n<p>Internet est gonflé de graphistes amateurs (plus ou moins talentueux, allant du très bon au très mauvais) qui couvrent le web de leurs créations. Parfois, ça frise vraiment le très bas : on prend une photo non-libre de droit trouvée sur <strong>DeviantArt</strong> (ou ailleurs), on y pose deux ou trois <em>brushes</em>, on bidouille quelques options de calque pour voir ce que ça fait et voilà une belle œuvre à mettre dans son portfolio - après y avoir apposé son pseudo, pour ne pas se faire voler son &quot;travail&quot;.</p>\n<p>Et comme à ce niveau-là, la seule reconnaissance c&#39;est d’être très demandé, de faire des &quot;intros youtube&quot; (la grande mode), tout est gratuit, bien entendu.</p>\n<p>Mais après tout ça, comment un professionnel peut-il justifier auprès d’un client une facture de 1800€ pour une affiche ? Le résultat est là : les graphistes sont sous-évalués, leur travail dévalué et leur profession prise pour un passe-temps d’adolescent mal dégrossi. Pire, ils sont régulièrement exploités au gré de &quot;concours&quot; (lire &quot;arnaques&quot;) organisées par diverses boîtes peu scrupuleuses pour avoir des centaines de propositions pour pas un rond, et n’en rémunérer (mal, qui plus est - parfois pas du tout) qu&#39;une seule.</p>\n<p>Les graphistes ont d’ailleurs récemment poussé un <a href=\"http://www.meltybuzz.fr/gratuiste-le-tumblr-des-graphistes-gratuits-en-rogne-a193271.html\">gros coup de gueule collectif</a> en lançant le tumblr &quot;Gratuiste&quot; (malheureusement fermé depuis) pour recenser toutes les demandes qu&#39;ils reçoivent.</p>\n<h4 id=\"quelques-liens-lire-sur-le-sujet\">Quelques liens à lire sur le sujet</h4>\n<ul>\n<li><a href=\"http://www.mariejulien.com/?post/2007/09/06/Les-concours-de-graphisme-pourquoi-ca-craint-en-general\">&quot;Les concours de graphisme, pourquoi ça craint en général - Marie &amp; Julien</a></li>\n<li><a href=\"http://monmacon.tumblr.com/\">Mon maçon était illustrateur</a>, blog illustré où sont comparés les métiers de graphiste et de maçon pour montrer le ridicule des situations que vivent les illustrateurs.</li>\n<li>Le twitter <a href=\"https://twitter.com/gratuiste\">@gratuiste</a></li>\n</ul>\n<h3 id=\"tout-le-monde-peut-del-cuisiner-del-d-velopper\">Tout le monde peut &lt;del&gt;cuisiner&lt;/del&gt; développer</h3>\n<p>L’autre métier qui en souffre d’une certaine manière, c&#39;est aussi celui de développeur. Au sens large tout d’abord : en effet, tout le monde utilise des programmes, alors quand ça plante, quand ça bugue, quand ça freeze, on maudit les programmeurs qui ont pondu un truc aussi mal fait. Pourtant, faire un programme même simple peut vite s&#39;avérer très complexe. Mais comme c&#39;est &quot;moins&quot; accessible au grand public de prime abord, le domaine logiciel me semble (fustigez-moi si je me trompe, amis programmeurs de softwares) plus ou moins épargné ; on se contente juste de l’ignorer en soirée parce que, bon, &lt;q&gt;c&#39;est bien beau, mais c&#39;est pas un vrai métier&lt;/q&gt;.</p>\n<p>Pour un développeur web, ce me semble être une autre paire de manches. Grâce à des sites comme OpenClassrooms (ex-Site du Zéro, où j’ai moi-même appris les bases du taff et sur les forums duquel je sévis toujours), tout le monde peut apprendre à créer sa petite page perso. Qui plus est, créer un site sans la moindre connaissance est tout à fait possible grâce à diverses plates-formes (WordPress.com, e-monsite, forumactif…) ou &lt;abbr title=&quot;Content Management System&quot;&gt;CMS&lt;/abbr&gt; (Joomla!, Drupal, WordPress, Prestashop…). Encore une fois, comment un professionnel peut-il efficacement défendre son devis à 3800€ quand le premier venu peut <em>prétendre</em> en faire autant pour 400€ non-déclarés ?</p>\n<p>Pourtant, comme chez les graphistes, la différence entre un amateur et un professionnel sera bien entendu dans la majorité des cas plus flagrante qu&#39;un bouton d’herpès couvert de crème ; cependant le mal sera déjà fait.</p>\n<h2 id=\"le-double-effet-kiss-kool\">Le double effet kiss-kool</h2>\n<p>Alors autour de quoi peut-on réunir un développeur logiciel, un développeur web et un graphiste ? Autour des projets amateurs (et bidons) qui fleurissent sur le net. Jean-Eudes a eu la révélation de sa vie : il veut créer un réseau social pour les gens qui n’ont pas d’amis. Ou bien faire un MMORPG mieux que World of Warcraft, parce que c&#39;est trop long de monter de niveau dessus. Ou bien il veut simplement refaire Minecraft pour être riche, lui aussi.</p>\n<h3 id=\"-j-ai-une-id-e-g-niale-\">&quot;J’ai une idée géniale&quot;</h3>\n<p>Sur nos forums, nous voyons régulièrement de fougueux et courageux &quot;entrepreneurs&quot; qui ont des projets plein la tête. Les 3/4 du temps (voire davantage), ils n’ont ni les compétences pour y participer ni conscience du travail que cela représente. Tout autant de fois, ils n’ont aucun <em>business plan</em> de prévu, un cahier des charges totalement amateur, et ne prévoient bien sûr aucune rémunération - ou bien le très célèbre &lt;q&gt;Quand notre MMO/Réseau Social/Système d’exploitation sera très connu et qu&#39;on sera riches, vous serez payés&lt;/q&gt;.</p>\n<p>Des &quot;projets&quot; comme ça, on en voit passer une trentaine par jours. Aucun n’aboutira, seuls deux ou trois seront un poil plus développés. Bien sûr, ils ne sont pas novateurs, n’apportent pas grand chose d’intéressant à l’existant et sont loin d’être la poule aux œufs d’or que s&#39;imaginent leurs auteurs. Et pour ne pas dévoiler les dessous de leur &quot;Facebook 2 - mais en mieux&quot;, ils ont en plus le bon goût (hem) de ne rien vouloir en dévoiler de peur qu&#39;on veuille leur piquer le concept : pas une ligne de code pour montrer qu&#39;ils savent de quoi ils parlent, pas une page d’un cahier des charges pour montrer que le projet est concret.</p>\n<p>J’en profite pour l’écrire en gros à tous ceux qui espèrent cacher leurs créations, leur code ou tout autre chose aux yeux du monde : <strong>LE MONDE ENTIER SE FOUT TOTALEMENT DE VOTRE PROJET !</strong> Et ce sera le cas tant que ce ne sera qu&#39;un projet ; Facebook a eu du succès parce qu&#39;il était &quot;prêt&quot; et terminé, les specs&#39; techniques n’auraient intéressé personne.</p>\n<p>Bref, je m&#39;égare. Là encore, <a href=\"http://conquerirlemonde.com/blog/category/erreurs-classiques/\">d’autres en ont parlé bien mieux que moi</a>.</p>\n<h2 id=\"tout-a-pour-dire-quoi-\">Tout ça pour dire quoi ?</h2>\n<p>Simplement que le fait d’être assis devant un ordinateur ne rend pas le métier moins technique qu&#39;un autre. Il n’y a pas de logiciel miracle qui fasse le boulot à notre place ; et quand un outil fait une part du travail, il faut apprendre à l’utiliser (et parfois le développer soi-même). Et le travail, devinez quoi ? Ça se paie.</p>\n<p>J’avais trouvé une belle citation sur une illustration ; comme je ne l’ai pas retrouvée, je vais simplement l’écrire (et la traduire) :</p>\n<blockquote>\n<p>Pourquoi devrais-je payer autant pour une illustration qui vous a pris dix minutes à faire ?</p>\n<ul>\n<li>Parce que j’ai étudié et travaillé dix ans pour apprendre à faire ça en dix minutes.</li>\n</ul>\n</blockquote>\n<h3 id=\"edit-et-post-scriptum\">Edit et post-scriptum</h3>\n<p>J’ai eu quelques retours rapides sur cet article (merci hé, je ne savais pas que quelqu&#39;un lisait ici !), et du coup je voudrais quand même préciser que malgré tout, les métiers concernés n’en sont pas moins passionnants et importants, et que notre travail est quand même assez souvent bien reconnu. Si j’ai eu quelques clients désagréables et mauvais payeurs, d’autres ont au contraire été très honnêtes, ouverts et à l’écoute de l’expertise que je pouvais leur apporter. L’important, c&#39;est de trouver de bons collègues ; et moi, j’ai été engagé dans une super agence !</p>\n<p>Alors rassurez-vous, fidèles lecteurs (oui, vous les deux au fond là bas !), tout n’est pas que tristesse et désespoir ! Vous pourrez même vous payer une bonne tranche de rire sur <a href=\"http://lesjoiesducode.tumblr.com/\">Les Joies du Code</a> et <a href=\"http://www.webagencyfail.com/\">WebAgencyFail</a>.</p>\n<p><strong>Edit du 11 mars 2015 :</strong> Comme le web est un endroit vaste, on tombe parfois sur des gens qui pensent comme nous (Si, si !). Du coup, voici un autre informaticien qui a fait le même constat (comme beaucoup d’entre nous) et qui en parle très bien dans son article &lt;q&gt;<a href=\"http://www.neoeon.net/index.php?act=1&amp;com=64\" title=\"Neoeon\">Informaticien, un métier ingrat</a> — Neoeon&lt;/q&gt;.</p>\n"}]}
