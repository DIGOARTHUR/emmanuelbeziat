{"posts":[{"title":"Aligner trois colonnes proprement","author":"Emmanuel B.","date":"2013-07-11 02:00:08","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"aligner-trois-colonnes-proprement","content":"<p>C&#39;est un problème auquel se confrontent régulièrement les intégrateurs : créer un <strong>design en trois colonnes</strong> - habituellement, deux menus latéraux (appelés &quot;sidebar&quot;) et une colonne centrale pour le contenu du site.</p>\n<p>Mais c&#39;est en réalité très simple à faire, et nous allons voir comment.</p>\n<h2 id=\"le-html\">Le html</h2>\n<p>La première chose, c&#39;est d’abord de placer les trois colonnes dans un conteneur, que nous appellerons ici &quot;<em>container</em>&quot;. Ensuite, il faut mettre les éléments flottants (les sidebar donc) avant le corps central.</p>\n<pre><code class=\"language-markup\">&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;sidebar--left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;sidebar--right&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Comme toujours, essayez d’ajouter un peu de contenu pour pouvoir voir les effets ; utilisez par exemple le <a href=\"http://fr.lipsum.com/\" title=\"Générateur de lipsum\">générateur de lipsum</a>.</p>\n<h2 id=\"le-css\">Le CSS</h2>\n<p>Maintenant, il suffit de mettre en place les éléments :</p>\n<pre><code class=\"language-css\">.container {\n    overflow: auto;\n}\n\n.sidebar--left {\n    width: 200px;\n    float: left;\n}\n\n.sidebar--right {\n    width: 200px;\n    float: right;\n}\n\n.content {\n    overflow: hidden;\n}\n</code></pre>\n<p>Voyons ces lignes en détail :</p>\n<pre><code class=\"language-css\">.container {\n    overflow: auto;\n}\n</code></pre>\n<p>Les éléments flottants (utilisés avec la propriété <code>float</code> donc) sortent du <em>flux d’éléments</em>, ce qui conduit les autres éléments à passer en-dessous comme s&#39;ils étaient ignorés. Utiliser une propriété neutre comme <code>overflow</code> permet au contenant de tenir compte de ces flottants et de les englober pour que tout rentre dans l’ordre.</p>\n<pre><code class=\"language-css\">.sidebar--left {\n    width: 200px;\n    float: left;\n}\n\n.sidebar--right {\n    width: 200px;\n    float: right;\n}\n</code></pre>\n<p>On place simplement les éléments flottants (les menus latéraux) à gauche et à droite avec la propriété <code>float</code>, et on leur attribue une largeur fixe.</p>\n<pre><code class=\"language-css\">.content {\n    overflow: hidden;\n}\n</code></pre>\n<p>Enfin, on ne précise aucune largeur à cet élément afin qu&#39;il s&#39;adapte automatiquement à l’espace disponible. Là encore, on use de la propriété <code>overflow</code> pour que cette colonne tienne compte des deux éléments flottants.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Avec cette méthode, si votre design est évolutif ou que la mise en page change (une colonne ou une autre ou bien les deux ou aucune en fonction des pages visitées, par exemple), la colonne centrale sera toujours adaptée correctement, ainsi que son contenu. Vous pouvez voir le gabarit en action et le tester sur <a href=\"http://lab.infographizm.com/css/gabarits/adaptatif-colonnes/\">cette page du laboratoire</a> et sur <a href=\"http://codepen.io/EmmanuelB/pen/qniHp\" title=\"CodePen\">ce pen</a>.</p>\n<p>&lt;p&gt;Si vous voulez plus d’explication sur le fonctionnement des flottants et des <em>overflow</em>, je vous conseille un bon article : &#39;<a href=\"http://www.alsacreations.com/astuce/lire/1543-le-contexte-de-formatage-block-en-css.html\" title=\"Alsacréations\">Le contexte de formatage block en CSS</a>&#39;.</p>\n"},{"title":"Changer une image au survol","author":"Emmanuel B.","date":"2013-07-12 02:02:08","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"changer-une-image-au-survol","content":"<p>Lorsque l’on fait un site, on est parfois confronté à un besoin : celui de gérer le <strong>changement d’une image au survol de la souris</strong>. C&#39;est souvent le cas avec des menus. Si la technique des <em>sprites CSS</em> (à propos desquels j’ai écrit <a href=\"http://www.emmanuelbeziat.com/blog/bien-utiliser-les-sprites-css/\" title=\"Bien utiliser les sprites CSS\">ce tutoriel</a> et qui ne sera donc pas détaillée ici) est utile dans certains cas, elle est fortement déconseillée dans le cas d’une image cliquable. Nous allons donc voir une solution alternative intéressante.</p>\n<h2 id=\"le-probl-me-pos-\">Le problème posé</h2>\n<h3 id=\"pourquoi-ne-pas-utiliser-les-sprites-\">Pourquoi ne pas utiliser les sprites ?</h3>\n<p>Les <em>sprites</em> sont très utiles pour gérer les images de fond ; mais dès lors qu&#39;une image véhicule une information (image cliquable, portrait d’un auteur, schéma explicatif, etc.) et n’est plus seulement décorative, il est <strong>nécessaire</strong> que cette image soit présente dans le HTML (balise <code>&lt;img /&gt;</code>).</p>\n<p>Dans le cas d’une image cliquable, à plus forte raison un menu qui ne contiendrait aucun texte, il est très fortement déconseillé de recourir aux images CSS, car cela impose que le lien dans le HTML soit vide :</p>\n<p>&lt;a href=&quot;mapage.html&quot;&gt;&lt;/a&gt;~~~</p>\n<p>Si on peut styliser cette balise en CSS pour lui donner une hauteur, une largeur et un fond, retenez bien que tout le monde ne visionne pas un site comme vous. Les internautes mal-voyants qui utilisent un lecteur d’écran ne peuvent lire que le contenu strict de la page ; ils se retrouveront donc face à un lien vide de 0px×0px qui ne sera pas cliquable, car il ne sera tout simplement pas affiché par le navigateur.&lt;p&gt;</p>\n<p>&lt;p&gt;<strong>En conséquence, la navigation sur votre site sera impossible !</strong></p>\n<h3 id=\"une-solution-possible-en-javascript\">Une solution possible en javascript</h3>\n<p>On peut également charger une image au survol grâce aux événements <code>onmouseover</code> et <code>onmouseout</code> du javascript. Si cette méthode permet de palier au problème précédemment exposé, elle en présente deux autres :&lt;p&gt;</p>\n<ol>\n<li>Tout d’abord, vos visiteurs peuvent très bien avoir désactivé l’exécution du javascript sur leur navigateur (pour des raisons qui les concernent).</li>\n<li>L’image ne sera chargée qu&#39;au survol, ce qui créera un effet de <em>clipping</em> (clignotement) le temps que l’image soit affichée. Pour une petite connexion (comme la 3G) cela se révèle très vite particulièrement désagréable.</li>\n</ol>\n<h2 id=\"la-solution-un-compromis\">La solution : un compromis</h2>\n<p>&lt;p&gt;La meilleure solution consiste à mettre l’image &quot;normale&quot; dans le html, puis de la masquer au survol pour révéler une image de fond en CSS. Nous allons donc voir comment procéder.</p>\n<h3 id=\"le-html\">Le HTML</h3>\n<p>Ici, rien de bien compliqué. Nous allons nous contenter de mettre notre image et notre lien tout à fait normalement (à noter qu&#39;on peut tout à fait utiliser le même effet sans un lien avec une image seule).</p>\n<p>Pour les besions de l’exemple, nous plaçons le lien dans une balise portant l’ID &quot;menu&quot;.</p>\n<p><del>~&lt;div id=&quot;menu&quot;&gt;\n    &lt;a href=&quot;mapage.html&quot;&gt;&lt;img src=&quot;monimage.jpg&quot; alt=&quot;Accueil&quot; /&gt;&lt;/a&gt;\n&lt;/div&gt;</del>~</p>\n<h3 id=\"le-css\">Le CSS</h3>\n<p>C&#39;est ici que l’astuce se déroule. Tout d’abord, nous allons affecter à notre lien un comportement de type <code>inline-block</code>, afin de pouvoir lui donner des valeurs de hauteur et de largeur sans pour autant briser sa mise en place au sein d’un texte ou d’un menu (à adapter selon vos besoins).</p>\n<pre><code class=\"language-css\">#menu a {\n    display: inline-block;\n}\n</code></pre>\n<p>Ceci fait, nous allons lui appliquer l’image de fond qui doit apparaître au survol :</p>\n<pre><code class=\"language-css\">#menu a {\n    display: inline-block;\n    background: url(&quot;monimage_survol.jpg&quot;) no-repeat;\n}\n</code></pre>\n<p>Maintenant, nous pouvons masquer l’image au survol grâce à la pseudo-propriété CSS <code>:hover</code>.</p>\n<pre><code class=\"language-css\">#menu a:hover img {\n    visibility: hidden;\n}\n</code></pre>\n<h4 id=\"une-petite-pr-cision\">Une petite précision</h4>\n<p>Pour éviter toute mauvaise surprise, je vous recommande aussi de :</p>\n<ul>\n<li>Penser à désactiver l’affichage de bordure automatique autour des images cliquables, au moyen de ce code :<del>~a img { border: none; }</del>~</li>\n<li><p>De spécifier également la hauteur et la largeur de l’image</p>\n</li>\n<li><p>En CSS si les images sont toutes de même dimension (cas d’un menu) :</p>\n<pre><code class=\"language-css\">#menu a, #menu img {\nwidth: 200px;\nheight: 50px;\n}\n</code></pre>\n</li>\n<li>En HTML si les images sont différentes :<pre><code class=\"language-markup\">&lt;div id=&quot;menu&quot;&gt;\n&lt;a href=&quot;mapage.html&quot;&gt;\n    &lt;img src=&quot;monimage.jpg&quot; alt=&quot;Accueil&quot; width=&quot;200px&quot; height=&quot;50px&quot; /&gt;\n&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n</ul>\n<p>Dans ce cas, le lien fera normalement automatiquement son travail pour garder la taille de l’image de base, même si cette dernière venait à ne pas être affichée (mauvais chargement, lien mort, etc.)</p>\n<p>Et voilà ! Une image qui change au survol, sans effets secondaires indésirables du côté visuel, ni du côté de l’accessibilité.</p>\n"},{"title":"Utiliser les propriétés de police avec une font-web","author":"Emmanuel B.","date":"2013-07-13 23:28:05","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"utiliser-les-proprietes-de-police-avec-une-font-web","content":"<p>Il vous est peut-être déjà arrivé d’utiliser <code>@font-face</code> ? Cette propriété permet l’ajout de polices (<em>typos</em>, <em>fonts</em>…) sur vos sites web sans que le visiteur n’ait besoin de les installer sur son ordinateur. De nombreux sites, tels que <a href=\"http://www.fontsquirrel.com/\">FontSquirrel</a> permettent de générer le CSS nécessaire tout en convertissant les fichiers aux formats appropriés.&lt;p&gt;</p>\n<p>&lt;p&gt;Mais les CSS proposés par défaut séparent les différents styles d’une même police, en la traitant comme des polices différentes (et donc séparées). Il faut donc, en fonction de vos besoins, non pas utiliser les propriétés <code>font-weight</code> ou <code>font-style</code> pour modifier l’épaisseur ou la mise en italique d’un texte, mais carrément demander à utiliser une autre police avec <code>font-family</code>, tout en gérant quand même ces propriétés pour les polices &quot;<em>fallback</em>&quot;.</p>\n<p>Mais il existe une façon d’utiliser proprement ces polices, et la voici…</p>\n<h3 id=\"une-simple-question-d-organisation\">Une simple question d’organisation</h3>\n<p>La méthode en question est très simple. Alors que le générateur vous fournira un nom de police différent pour chaque police que vous lui avez envoyé, tout en mettant les valeurs de <code>font-weight</code> et <code>font-style</code> sur <code>normal</code> :</p>\n<pre><code class=\"language-css\">@font-face {\n    font-family: &quot;MaPoliceRegular&quot;\n    src: url(&quot;MaPolice-Regular-webfont.eot&quot;);\n         url(&quot;MaPolice-Regular-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: normal;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: &quot;MaPoliceGras&quot;\n    src: url(&quot;MaPolice-Gras-webfont.eot&quot;);\n    src: url(&quot;MaPolice-Gras-webfont.eot?#iefix&quot;) format(&quot;embedded-opentype&quot;),\n         url(&quot;MaPolice-Gras-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: normal;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: &quot;MaPoliceItalique&quot;\n    src: url(&quot;MaPolice-Italique-webfont.eot&quot;);\n    src: url(&quot;MaPolice-Italique-webfont.eot?#iefix&quot;) format(&quot;embedded-opentype&quot;),\n         url(&quot;MaPolice-Italique-webfont.woff&quot;) format(&quot;woff&quot;),\n         url(&quot;MaPolice-Italique-webfont.ttf&quot;) format(&quot;truetype&quot;),\n         url(&quot;MaPolice-Italique-webfont.svg#MaPoliceItalique&quot;) format(&quot;svg&quot;);\n    font-weight: normal;\n    font-style: normal;\n}\n</code></pre>\n<p>La solution, c&#39;est simplement de modifier ce code par défaut afin de mettre un nom (<code>font-family</code>) identique pour tous, et des propriétés (<code>font-weight</code> et <code>font-style</code>) qui correspondent à la police en question :</p>\n<pre><code class=\"language-css\">@font-face {\n    font-family: &quot;MaPolice&quot;\n    src: local(&quot;Ma Police Regular&quot;),\n         url(&quot;MaPolice-Regular-webfont.woff2&quot;) format(&quot;woff2&quot;),\n         url(&quot;MaPolice-Regular-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: 400;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: &quot;MaPolice&quot;\n    src: local(&quot;Ma Police Gras&quot;),\n         url(&quot;MaPolice-Gras-webfont.woff2&quot;) format(&quot;woff2&quot;),\n         url(&quot;MaPolice-Gras-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: 700;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: &quot;MaPolice&quot;\n    src: local(&quot;Ma Police Italic&quot;),\n         url(&quot;MaPolice-Italique-webfont.woff2&quot;) format(&quot;woff2&quot;),\n         url(&quot;MaPolice-Italique-webfont.woff&quot;) format(&quot;woff&quot;);\n    font-weight: 400;\n    font-style: italic;\n}\n</code></pre>\n<p>De cette façon, vous pouvez appliquer les propriétés à votre police &quot;MaPolice&quot;, sans avoir besoin d’en changer : le CSS saura qu&#39;il faut charger une police différente en fonction des valeurs de ces propriétés.</p>\n<h3 id=\"un-exemple-\">Un exemple ?</h3>\n<p>Voici <a href=\"http://lab.infographizm.com/css/fonts/webfonts-tests-weight/\">une page d’exemple</a> si vous souhaitez voir le code d’un peu plus près.</p>\n"},{"title":"Google est opportuniste","author":"Emmanuel B.","date":"2013-07-30 01:29:59","tags":["entreprises"],"categories":["Diatribes"],"template":"post.vue","basename":"google-est-opportuniste","content":"<p>Google dispose des plus grands espaces publicitaires du monde, et s&#39;en sert pour promouvoir son navigateur ; et c&#39;est normal. Ce qui l’est moins, c&#39;est de brandir le talent des gens comme s&#39;il était de leur fait.</p>\n<p>Il y a quelques temps sur YouTube, cette pub envahissait nos vidéos :</p>\n<p>[youtube]<a href=\"https://www.youtube.com/watch?v=8xIWuImoEtQ[/youtube\">https://www.youtube.com/watch?v=8xIWuImoEtQ[/youtube</a>]</p>\n<p>En y regardant de plus près, à part le fait que Google ait racheté YouTube, <strong>Google n’est à aucun moment responsable du succès musical d’Irma</strong>. Elle n’utilisait probablement même pas Chrome à l’époque, d’ailleurs (et peut-être toujours pas). Et même si elle avait utilisé Chrome pour aller sur YouTube, Blogger pour partager ses vidéos (encore un service racheté par Big G) et Gmail pour envoyer des lettres à sa famille, est-ce que ça aurait été impossible sans Chrome ? Est-ce que tout n’aurait pas été faisable sans une once de Google ?</p>\n<p>Si, mille fois si. À partir de là, &quot;s&#39;approprier&quot; la jeune chanteuse pour scander que &quot;c&#39;est grâce à Chrome&quot;, c&#39;est un peu vouloir faire passer subliminalement (oui, j’invente des mots) &quot;si vous utilisez Chrome vous aurez du succès aussi&quot;, façon suppositoire.</p>\n<p>Et ça, c&#39;est <em>Evil</em>, monsieur Google.</p>\n"},{"title":"Préfixes CSS, jusqu'à quand ?","author":"Emmanuel B.","date":"2013-08-06 16:10:16","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"prefixes-css-jusqua-quand","content":"<p>Ou plus exactement, comment savoir s&#39;il est pertinent d’utiliser une tartine de propriétés préfixées ou s&#39;en tenir à la seule propriété finale.</p>\n<h3 id=\"mais-qu-est-ce-que-tu-racontes-\">Mais qu&#39;est-ce que tu racontes ?</h3>\n<p>Pour ceux d’entre toi, lecteur, qui ne comprendrais pas de quoi je parle, voici un chouette petit résumé explicatif !</p>\n<p>Les &quot;<strong>préfixes propriétaires</strong>&quot; (aussi connus sous le sobriquet de &quot;préfixes vendeurs&quot;), sont apparus afin d’intégrer dans le CSS des propriétés non-standardisées (la standardisation étant le travail du <a href=\"http://www.w3.org/\">W3C</a>, l’organisme chargé de chapeauter les technologies html/css). On ajoute donc un préfixe devant la propriété CSS, comme ça : <code>-prefixe-propriété</code>. En sachant qu&#39;il y a plusieurs préfixes existants, on se retrouve souvent avec ceci :</p>\n<pre><code class=\"language-css\">élément {\n    -webkit-propriété: valeur;\n    -moz-propriété: valeur;\n    -ms-propriété: valeur;\n    -o-propriété: valeur;\n    propriété: valeur;\n}\n</code></pre>\n<p>Et là, tu vas me dire &quot;Mais qu&#39;est-ce que c&#39;est ce foutoir ?&quot; (et tu auras raison !). Hé bien chaque préfixe correspond à un moteur de rendu qui équipe différents navigateurs. En voici la liste non-exhaustive (car il y a PLEIN de navigateurs) avec seulement les principaux :</p>\n<ul>\n<li><code>-webkit-</code> : préfixe pour le moteur <strong>WebKit</strong>, qui équipe Safari (et sa version mobile), Chromium, Chrome, Opera, Epiphany, Konqueror, Iron, Maxthon…</li>\n<li><code>-moz-</code> : préfixe pour le moteur <strong>Gecko</strong> développé par Mozilla et qui est donc utilisé par Firefox, SeaMonkey…</li>\n<li><code>-ms-</code> : préfixe pour le moteur <strong>Trident</strong> développé par Microsoft, utilisé par Internet Explorer et les anciennes version de Maxthon</li>\n<li><code>-o-</code> : préfixe pour le moteur Presto, jusqu&#39;à très récemment utilisé par Opera, qui a maintenant migré sur Blink, la version personnalisée de WebKit par Google (qui équipe aussi Chrome, donc).</li>\n</ul>\n<p>On voit parfois passer le préfixe <code>-kthml-</code>, mais il est bien moindre car correspond à un moteur très peu utilisé. Et si vous voyez <code>-htm-</code>, c&#39;est facile : il n’existe pas, c&#39;est une erreur.</p>\n<h2 id=\"comment-savoir-quand-utiliser-un-pr-fixe-\">Comment savoir quand utiliser un préfixe ?</h2>\n<p>C&#39;est là le but de cet article. En effet, les préfixes ont l’avantage de proposer des versions &quot;beta&quot; (non complètes) des propriétés en cours d’élaboration par le W3C (en contrepartie, leur prise en charge est parfois partielle et bancale) pour que les développeurs puissent commencer à travailler avec, mais ils posent aussi un problème de compatibilité, car un préfixe <code>-moz-</code> ne sera pas lu par un navigateur qui ne tourne pas sur Gecko, de même qu&#39;un préfixe <code>-webkit-</code> ne sera pas pris en compte par un navigateur non-webkit. Mais ajouter des préfixes pour tous les navigateurs possible représente un travail conséquent et alourdit le code. De plus, les propriétés étant toujours en cours d’élaboration, leur syntaxe est susceptible de changer (c&#39;est ce qui s&#39;est passé avec <code>linear-gradient</code>). De plus dans certains cas, la propriété est finalisée depuis suffisamment longtemps pour que la plupart des navigateurs aient pu l’implémenter correctement, et les préfixes ne sont donc plus utiles. Dans certains cas, ils ne sont plus pris en charge par les versions récentes d’un navigateur (c&#39;est le cas de <code>-moz-border-radius</code>).</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Mettez toujours la propriété finale (donc sans préfixes) après les propriétés préfixées. Ce n’est pas une lubie, mais un principe de logique : le navigateur doit lire en dernier la propriété finale et l’appliquer à la place de la propriété préfixée.&lt;/div&gt;\n\n</p>\n<h3 id=\"une-solution-se-renseigner\">Une solution : se renseigner</h3>\n<p>Un site référence quelles propriétés sont disponibles avec ou sans préfixes, et pour quels navigateurs. Il s&#39;agit de <a href=\"http://caniuse.com/\">Can I Use</a>. Il permet de voir, pour chaque propriété, la prise en charge pour chaque navigateur principal. Maintenant, voyons comment tirer parti de ces informations. Nous allons prendre pour ça l’exemple de la propriété <code>transition</code>, dont <a href=\"http://caniuse.com/#feat=css-transitions\">la page est ici</a>. On constate que :</p>\n<ul>\n<li>Il n’y a eu aucun préfixe pour aucune version d’IE, on peut donc se passer du préfixe <code>-ms-</code></li>\n<li>Firefox supporte la propriété finale depuis plus de 5 version, on peut donc raisonnablement se passer de <code>-moz-</code></li>\n<li>Chrome supporte la propriété finale depuis six versions, mais Safari que depuis la version 7. Pour iOS et Androïd Mobile, trop récent aussi ; il est donc judicieux d’utiliser <code>-webkit-</code></li>\n<li>Opera supportait la version finale en sa version dernière version sous Presto (12.1). Le pourcentage d’utilisateurs au-dessous de la version 12.1 étant très faible, on peut se passer de <code>-o-</code>. Bien qu&#39;ils utilisent depuis Webkit comme moteur de rendu, il est inutile de s&#39;en préoccuper ici, n’ayant jamais implémenté de version préfixée avec <code>-webkit-</code> de cette propriété.</li>\n</ul>\n<p>Notre code sera donc tout simplement :</p>\n<pre><code class=\"language-css\">élément {\n    -webkit-transition: all 1s ease;\n    transition: all 1s ease;\n}\n</code></pre>\n<p>À refaire pour chaque propriété sur laquelle vous pourriez avoir un doute, bien entendu.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Notez bien que les informations de cet articles sont valables à sa date de rédaction. Je ne le mettrai pas à jour chaque fois qu&#39;une propriété change un poil, donc comprenez-en le sens mais notez que les propriétés présentées peuvent avoir été validées depuis longtemps au moment où vous lirez ceci.&lt;/div&gt;\n\n</p>\n<h2 id=\"pour-se-faciliter-la-vie\">Pour se faciliter la vie</h2>\n<h3 id=\"un-peu-de-javascript\">Un peu de javascript</h3>\n<p><strong>Léa Verou</strong> propose un petit fichier Javascript de sa création <a href=\"http://leaverou.github.io/prefixfree/\">à télécharger ici</a>, qui va s&#39;occuper de gérer les préfixes à votre place ; la contrepartie, c&#39;est que vous n’aurez pas la même finesse qu&#39;en faisant le choix manuellement.</p>\n<h3 id=\"les-_task-runners_\">Les <em>Task Runners</em></h3>\n<p>Les <em>task runners</em> ont envahi le petit monde du front-end il y a maintenant quelques années. Les plus connus sont <a href=\"http://gruntjs.com/\">Grunt</a>, <a href=\"http://gulpjs.com/\">Gulp</a> et <a href=\"http://brunch.io/\">Brunch</a>. Leur rôle est de réaliser des tâches rébarbatives pour nous faciliter la vie : compiler des préprocesseurs (Sass, Less, Stylus, Jade, CoffeeScript), minifier et concaténer des fichiers, optimiser des images, etc. Mais ils peuvent également préfixer automatiquement les propriétés d’un CSS, en se basant sur CanIUse, avec une petite configuration pour régler le niveau de support qu&#39;on souhaite avoir.</p>\n<p>Je ne rentrerais pas ici dans les détails, pour en savoir plus : <a href=\"https://github.com/postcss/autoprefixer\" title=\"AutoPrefixer sur GitHub\">AutoPrefixer</a></p>\n<h2 id=\"aide-m-moire\">Aide-mémoire</h2>\n<p>Parce qu&#39;un peu de généralités ne fait pas de mal !</p>\n<h3 id=\"propri-t-s-css3-qui-ne-n-cessitent-plus-de-pr-fixes\">Propriétés CSS3 qui ne nécessitent plus de préfixes</h3>\n<ul>\n<li><a href=\"http://caniuse.com/#feat=border-radius\">border-radius</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-boxshadow\">box-shadow</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-textshadow\">text-shadow</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-opacity\">opacity</a></li>\n<li><a href=\"http://caniuse.com/#feat=background-img-opts\">background-size</a></li>\n<li><a href=\"http://caniuse.com/#feat=css3-boxsizing\">box-sizing</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-transitions\">transition</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-gradients\">gradient</a> (à utiliser toutefois avec un fallback)<p>&lt;div class=&quot;note note--info&quot;&gt;Je ne mets ici que les propriétés qui ont longtemps été préfixées, pas la liste complète des propriétés CSS3 qui n’ont pas besoin de préfixes.&lt;/div&gt;\n</p>\n</li>\n</ul>\n"},{"title":"Internet Explorer, mon amour","author":"Emmanuel B.","date":"2013-08-24 17:26:22","tags":["navigateurs"],"categories":["Diatribes"],"template":"post.vue","basename":"internet-explorer-mon-amour","content":"<blockquote>\n<p>Il n’y a pas de mauvais navigateur, il n’y a que du mauvais code.</p>\n</blockquote>\n<p>C&#39;est par cette accroche que je réponds très souvent sur internet (sur les forums HTML/CSS d’OpenClassrooms (ex-Site du Zéro) par exemple) à ceux qui justifient une page mal rendue sur Internet Explorer par un &quot;IE ne respecte pas les standards&quot; et autres &quot;IE, c&#39;est de la merde&quot;. Et derrière le titre fort racoleur de cet article, je m&#39;en vais prendre la défense d’un navigateur injustement critiqué.</p>\n<p>Qu&#39;il soit entendu que je ne fais pas ici l’apologie d’un navigateur plutôt qu&#39;un autre ! Je compte simplement donner un bon coup de tatanes aux défauts fallacieux et bourrés de mauvaise foi qu&#39;on attribue à tort à l’un d’entre eux.</p>\n<h2 id=\"le-commencement\">Le commencement</h2>\n<p>IE6, vous connaissez ? Vous l’avez beaucoup critiqué, n’est-ce pas ? Vous lui avez préféré Firefox, vous avez pesté mille et une fois contre lui parce qu&#39;il fallait rajouter des lignes de code pour lui faire entendre des choses simples. Et pourtant, Microsoft ne l’a pas amené à 99% de parts de marché à coup de baguette magique ! Les développeurs web (du moins, ceux qui étaient là en 2000) y ont fortement contribué. Parce qu&#39;IE6 c&#39;était génial. Parce que pour la première fois, un navigateur respectait les standards du CSS (On parle du CSS1, et des premières ébauches de ce qu&#39;allait être le CSS2). Parce qu&#39;il possédait des outils de déploiement pour l’entreprise géniaux. Parce que l’ActiveX, c&#39;était de nouvelles possibilités. Alors Netscape est mort, faute d’avoir su se mettre au niveau, et des millions d’applications métiers ont été développées pour IE6. <strong>La monoculture du web était née</strong>.</p>\n<p>Pour ceux qui veulent entendre un autre que moi en parler, il y a cette vidéo (en anglais) de Bruce Lawson (Opera) qui tenait une excellente conférence sur le sujet à Sud Web 2012 :</p>\n<p>&lt;iframe class=&quot;aligncenter&quot; src=&quot;http://player.vimeo.com/video/52171395?color=ff9933&quot; width=&quot;500&quot; height=&quot;375&quot; frameborder=&quot;0&quot; webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;\n\n</p>\n<h2 id=\"ie-et-les-standards\">IE et les standards</h2>\n<p><em>&quot;Internet Explorer ne respecte pas les standards !&quot;</em> peut-on entendre çà et là sur la toile (surtout de la bouche - enfin du clavier - de ceux qui ne connaissent pas lesdits standards).</p>\n<p>Je crois que la réponse la plus pertinente dans ce genre de cas reste <em>&quot;Euh, si&quot;</em>. Mais je te vois déjà, lecteur, rire derrière ton écran en allant vérifier le score d’IE sur <a href=\"http://html5test.com\">html5test</a>. Alors je sens qu&#39;il va me falloir t&#39;apporter des preuves de ce que j’avance. Et ça tombe bien, parce que j’ai tout ce qu&#39;il faut pour ça.</p>\n<p>Je vais commencer par une preuve qui fait très mal, et du coup je vais l’écrire en gras-qui-te-pète-bien-la-rétine : <strong>Chrome et Firefox galèrent à gérer un border tout simple</strong>. Bon, j’exagère un poil, mais ce n’est pas si loin de la vérité. Plus exactement, <strong>WebKit</strong> (le moteur de rendu qui équipe Chrome, Safari, Opera et Maxthon - entre autres), <strong>Gecko</strong> (Firefox) et <strong>Trident</strong> (Internet Explorer) ont tous une façon différente de gérer les éléments, et sur border on remarque aisément des difficultés sur certains. Pour vérifier ça, vous pouvez vous rendre sur <a href=\"http://lab.infographizm.com/divers/tests-compatibilite-navigateurs/\" title=\"Voir les tests de compatibilité navigateur sur le Laboratoire InfographiZm\">le labo</a>, et constater par vous-même.</p>\n<p>Les résultats sont les suivants. À noter que le code est tout à fait identique pour chaque navigateur.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/08/tests-border-nav1.png\" alt=\"Test bordures navigateur class=\"></p>\n<p>Vous pourrez aussi constater que Firefox ne prend pas en compte le line-height dans un champ de texte, ni le positionnement dans une cellule de tableau.</p>\n<p><strong>Mise à jour 8 Février 2014 :</strong> Toujours aucune amélioration sur ces points sur Firefox 27 et Chrome 32.</p>\n<p><strong>Mise à jour 23 Avril 2015 :</strong> Depuis quelques versions, le problème de position dans les cellules de tableau est réglé sur Firefox.</p>\n<p>La question du test ACID3 a un moment été un centre d’intérêt, avant que tous les navigateurs n’arrivent à 100% de réussite. Cependant, on peut s&#39;interroger autant sur la fiabilité du test que sur l’implémentation des éléments testés, en voyant ce résultat obtenu par Chrome 10 (seule version à avoir eu ce &quot;problème&quot;) :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/08/acid3-chrome10.jpg\" alt=\"acid3-chrome10\"></p>\n<p>Résultat affiché de 100%, alors que le rendu est très loin de celui qui est censé être le <a href=\"http://acid3.acidtests.org/\" title=\"Test Acid3\">gage d’un résultat correct</a>.</p>\n<p>C&#39;est exactement le même genre de soucis avec html5test : ce genre de sites ne fait que vérifier si une fonctionnalité est présente, elle ne teste pas son implémentation. De fait, Chrome prétend gérer les nouveaux paramètres de la propriété <code>background-position</code> introduits en CSS3, alors que ce n’est absolument pas le cas dans les faits.</p>\n<h3 id=\"pourquoi-des-diff-rences-d-un-navigateur-l-autre-\">Pourquoi des différences d’un navigateur à l’autre ?</h3>\n<p>C&#39;est une question de philosophie de développement : google intègre à Chrome beaucoup de choses et s&#39;empresse d’implémenter les dernières nouveautés en pré-alpha, alors que Microsoft préfère généralement attendre la stabilité et les retours sur une technologie avant de l’ajouter à son navigateur. C&#39;est pour ça qu&#39;on trouve beaucoup moins de propriétés préfixées dans IE comparativement aux navigateurs WebKit qui en intègrent des pelletées.</p>\n<p>L’un dans l’autre, les deux façons de faire ont des avantages et des inconvénients. Pour qu&#39;une technologie soit finalisée, il faut que les développeurs puissent jouer avec, apprendre à l’utiliser, la comprendre. De fait, les propriétés préfixées sont un bon moyen de proposer un compromis. Cependant, c&#39;est également un risque : si au cours de son développement, la techno change, il faut redévelopper ce qui a été fait avec pour le rendre compatible (c&#39;est arrivé avec <code>linear-gradient</code>). De plus, les versions futures du navigateur devront, en plus d’intégrer la version &quot;finale&quot; modifier, permettre la rétrocompatibilité vers l’ancienne implémentation.</p>\n<h2 id=\"technologie\">Technologie</h2>\n<p>De ce côté, on peut signaler qu&#39;Internet Explorer était le premier à introduire la gestion des onglets dans des processus séparés (multithread), dès IE7 (2006) ; à ce jour, Firefox ne l’implémente toujours pas, alors que Chrome l’a employé dès la conception du navigateur en 2008. Le <em>sandboxing</em> des onglets, également, a été introduit dès Internet Explorer 8 (2008), et amélioré avec les versions suivantes. De plus, le principe de sécurité d’IE a été repris par Google pour Chrome ; inversement, IE intègre aujourd’hui nativement Adobe Flash comme le fait Chrome, ce qui est un gage de sécurité.</p>\n<p>Du reste, Internet Explorer a longtemps été le seul, sur Windows, à bénéficier d’une version native en 64 bits. Chrome a rejoint les rangs fin 2014.</p>\n<p>On vante souvent les fonctionnalités des autres navigateurs mais IE offre généralement les mêmes possibilités.&lt;p&gt;</p>\n<ul>\n<li>Comme les autres, il peut rétablir des onglets fermés par inadvertance, ou récupérer une session entière après une coupure du PC</li>\n<li>IE intègre un antipub natif auquel on peut donner les listes noires utilisées par AdBlock</li>\n<li>Il embarque aussi un correcteur d’orthographe</li>\n<li>Il possède des outils de développement intégrés</li>\n</ul>\n<h3 id=\"int-gration-d-ie-avec-windows\">Intégration d’IE avec Windows</h3>\n<p>&lt;p&gt;Microsoft propose en sus des outils d’intégration à Windows assez intéressant, il est dommage que les autres navigateurs ne suivent pas le mouvement. On peut en effet épingler un site de façon plus ou moins avancée dans la barre des tâches avec divers raccourcis, et sur les tuiles de l’interface Modern UI de Windows 8.</p>\n<p>J’ai écrit un <a href=\"http://www.emmanuelbeziat.com/blog/site-epingle-avec-internet-explorer/\" title=\"Site épinglé avec Internet Explorer\">tutoriel sur le sujet</a> qui vous permettra d’en savoir plus si ça vous intéresse.</p>\n<h2 id=\"alors-pourquoi-tant-de-haine-\">Alors pourquoi tant de haine ?</h2>\n<p>Internet Explorer souffre du souvenir d’IE6, qui est resté trop longtemps sans successeur. En effet, lorsqu&#39;on est en position de monopole absolu et que des milliers d’applications métier ont été développées pour votre outil (et donc qu&#39;une nouvelle version est très délicate à envisager car nécessite une rétrocompatibilité parfaite - ce qui donnera naissance à la balise meta <code>X-UA Compatible</code>, on préfère se dire qu&#39;on a réussi de ce côté et faire des économies pour se concentrer sur autre chose. C&#39;est le problème de la monoculture (voir la vidéo plus haut). Le développement d’Internet Explorer 7 a donc été longuement repoussé et retardé. Mais IE8 a rattrapé tout le retard de son prédécesseur, et les successeurs successifs (quelle belle allitération !) ont largement comblé le retard.</p>\n<p>Pourtant, si on se balade sur les forums HTML/CSS du <strong>Site du Zéro</strong>, on tombe souvent sur des sujets <em>&quot;Mon site s&#39;affiche mal sur IE&quot;</em>. Pourquoi donc ? Hé bien neuf fois sur dix, parce que le code n’est pas bon. Firefox et Chrome corrigent souvent différentes erreurs à la volée, par exemple une balise mal fermée, et le développeur inattentif est alors persuadé d’avoir un bon code qui fonctionne. Internet Explorer ne possède pas de gestionnaire d’erreurs de ce type, et affiche donc une erreur là où il trouve une erreur. C&#39;est pour ça qu&#39;on dit que le navigateur est strict. Il suffit donc presque toujours de corriger son code, que ce soit en HTML ou en CSS.</p>\n<p>La soi-disant mauvaise gestion des standards d’IE sert trop souvent d’excuse aux développeurs, qui vont préférer trouver des responsables extérieurs plutôt que de remettre en cause leurs propres compétences (ça m&#39;arrive aussi, hein !).</p>\n<p>Mauvaise foi, je vous dis !</p>\n<p>Évidemment, le comble serait de comparer un navigateur récent à un autre ancien. Pourtant certains n’hésitent pas à le faire, se servant d’Internet Explorer 7 (On en est au 11, quand même !), sorti bien avant les specs du CSS3, pour décrier le navigateur tout entier, en le comparant à la dernière version de Chrome ou de Firefox. Et bien entendu, cela n’a aucun sens. Pour être un minimum objectif, il faut comparer ce qui est comparable. Je suis bien certain que beaucoup de sites doivent avoir une drôle de gueule sous Firefox 2.5 aujourd’hui…</p>\n<h2 id=\"conclusion-\">Conclusion ?</h2>\n<p>Eh bien, tous les navigateurs modernes se valent. Tous ont des avantages et des inconvénients, cracher sur l’un ou l’autre tient juste de la foi personnelle. Choisissez donc votre navigateur selon vos préférences et vos goûts personnels, et ne vous laissez pas avoir par ceux qui veulent absolument vanter les mérites de l’élu de leur cœur avec plus de conviction qu&#39;un témoin de Jéhovah qui tente d’entrer dans votre salon pour vous bassiner avec ses &#39;Cthulhu fhtagn !&#39;.</p>\n<p>Et bien sûr, par pitié, oubliez immédiatement vos petites banderoles <em>&quot;site optimisé pour Chrome/Firefox&quot;</em> qui vous feront passer au mieux pour un flemmard qui n’a pas envie de rendre son site compatible, au pire pour un incompétent qui ne sait pas faire mieux !</p>\n<p>Vous êtes prévenus !</p>\n<h2 id=\"edit-du-27-juillet-2015\">Edit du 27 juillet 2015</h2>\n<p>Demain sort Microsoft Edge, remplaçant d’Internet Explorer. Ce qui signifie que ce dernier n’aura plus de version supplémentaire. Niels Leenheer lui a rendu un petit hommage vidéo dans une conférence :</p>\n<p>&lt;iframe class=&quot;aligncenter&quot; width=&quot;700&quot; height=&quot;394&quot; src=&quot;https://www.youtube.com/embed/w4WAPTJM8E0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n</p>\n"},{"title":"Principes du CSS - Les sélecteurs (Partie1 : CSS2)","author":"Emmanuel B.","date":"2013-08-28 01:54:32","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"principes-du-css-les-selecteurs-partie1-css2","content":"<p>Lorsqu&#39;on utilise du CSS, on peut se contenter des trois sélecteurs de base : les éléments, les identifiants et les classes. Souvent, sans le savoir, vous utilisez un sélecteur simple de descendance, par un espace entre deux de ces sélecteurs - hé oui ! Mais il existe d’autres sélecteurs plus avancés, nous allons les passer en revue.</p>\n<p>Je ne traite ici que du CSS 2.1. Le CSS3 apporte de nouveaux sélecteurs très intéressants et utiles, <a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-les-selecteurs-partie-2-css3/\">qui sont listés dans cet article</a>.</p>\n<h2 id=\"pr-ambule\">Préambule</h2>\n<p>Pour petit rappel :</p>\n<pre><code class=\"language-markup\">&lt;balise attribut=&quot;valeur&quot;&gt;\n</code></pre>\n<p>Donc si vous êtes là, c&#39;est que vous savez construire une feuille de style. Et vous travaillez comme ceci, grosso modo :</p>\n<pre><code class=\"language-css\">#page {\n    width: 800px;\n    overflow: auto;\n}\n\n#page .bloc {\n    width: 100px;\n    display: inline-block;\n}\n</code></pre>\n<p>C&#39;est une bonne base de travail ; mais il existe une utilisation plus avancée des sélecteurs. Figurez-vous que ceci veut dire quelque chose en CSS :</p>\n<pre><code class=\"language-css\">#page &gt; div * div + div li:first-child a[href~=&quot;index.html&quot;]  {\n    color: #ccc;\n}\n</code></pre>\n<p>Certes, c&#39;est un tantinet plus long et complexe qu&#39;écrire simplement la classe d’un élément.</p>\n<p>Il est important de noter que la séparation du contenu et de la mise en forme est au coeur même de l’utilisation du CSS et des principes sémantiques que le W3C met en place depuis des anneés. Par là même, l’idéal pour cette sémantique serait d’avoir un code html vide d’éléments de mise en forme - d’ailleurs, le W3C recommande l’absence de tout attribut <code>style</code> dans les balises html et préconise l’utilisation de classes et d’identifiants à la place.</p>\n<p>Mais on peut minimiser au maximum l’utilisation de ces classes et de ces ID grâce à l’utilisation des sélecteurs. Dans l’exemple ci-dessus, j’ai volontairement exagéré la complexité, mais on peut faire beaucoup de choses avec simplicité - parfois même plus qu&#39;avec des classes.</p>\n<p>De plus, ça peut se révéler très utile dans certains cas. Songez à ceci :</p>\n<ul>\n<li>Vous n’aurez peut-être pas toujours accès au html et donc pas la possibilité de le modifier.</li>\n<li>Vous pouvez, grâce à ça, proposer un changement de design très facile, qui ne nécessite que peu de remaniement html sur votre site.</li>\n<li>Cela sert également à appliquer un style à des éléments très nombreux sans avoir besoin de toucher au html.</li>\n</ul>\n<h2 id=\"les-s-lecteurs-de-descendance\">Les sélecteurs de descendance</h2>\n<h3 id=\"s-lecteur-de-descendance\">Sélecteur de descendance</h3>\n<pre><code class=\"language-css\">.rouge span { color: red }\n</code></pre>\n<p>Vous utilisez déjà très probablement ce sélecteur, sans même le savoir. En effet, mettre un élément à la suite d’un autre crée automatiquement un principe de descendance. Dans le cas présent, la <code>div</code> portant la classe <code>rouge</code> devient parente de l’élément <code>span</code> qui lui, devient enfant.</p>\n<p>Dans cet exemple, toutes les balises <code>span</code> contenues dans la <code>div</code> seront affectés, et ce peu importe s&#39;il y a d’autres balises entre eux ; sauf si un parent plus &quot;proche&quot; lui donne une information contradictoire, comme une autre couleur : c&#39;est le principe d’héritage.</p>\n<pre><code class=\"language-markup\">&lt;div class=&quot;rouge&quot;&gt;\n    &lt;div class=&quot;bleu&quot;&gt;\n        &lt;span id=&quot;monID&quot;&gt;Ce texte sera affecté&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n</code></pre>\n<p>Dans le cas présent, le <code>span</code> portant l’id &quot;monID&quot; est enfant de la <code>div</code> &quot;bleu&quot;, puis de la <code>div</code> &quot;rouge&quot;. Voyons un petit schéma simple histoire de bien comprendre ce principe :</p>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n<em>   Mes enfants seront rouges\n\n</em>   Mon parent m&#39;a dit d’être rouge\n<em>   Mon parent m&#39;a dit d’être rouge\n\n</em>   Le parent de mon parent m&#39;a dit d’être rouge\n<em>   Le parent de mon parent m&#39;a dit d’être rouge\n</em>   Mon parent m&#39;a dit d’être rouge, mais mes enfants seront verts !\n\n<em>   Mon parent m&#39;a dit d’être vert\n</em>   Mon parent m&#39;a dit d’être vert\n<em>   Mon parent m&#39;a dit d’être rouge\n</em>   Mes enfants seront bleus\n\n*   Mon parent m&#39;a dit d’être bleu\n&lt;/div&gt;\n\n</p>\n<h3 id=\"selecteur-d-enfant-direct-\">Selecteur d’enfant direct : &quot;&gt;&quot;</h3>\n<pre><code class=\"language-css\">.rouge &gt; span { color: red }\n</code></pre>\n<p>Sur le même principe de lien enfant/parent, ce sélecteur (qui ne porte pas de nom particulier au demeurant, mais que j’appelle &quot;sélecteur d’enfant direct&quot; pour être plus clair) sert à agir uniquement sur les enfants directs d’un élément, à l’inverse du sélecteur simple qui agit de manière récursive (c&#39;est-à-dire sur toute sa descendance, y compris les descendants de ses descendants).</p>\n<pre><code class=\"language-markup\">&lt;div class=&quot;rouge&quot;&gt;\n    &lt;div class=&quot;bleu&quot;&gt;\n        &lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n    &lt;/div&gt;\n\n    &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n</code></pre>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n<em>   Mes enfants directs seront rouges\n\n</em>   &lt;span style=&quot;color:red&quot;&gt;Mon parent m&#39;a dit d’être rouge&lt;/span&gt;\n<em>   &lt;span style=&quot;color:red&quot;&gt;Mon parent m&#39;a dit d’être rouge&lt;/span&gt;\n\n</em>   On ne m&#39;a rien dit\n<em>   On ne m&#39;a rien dit\n</em>   Mon parent m&#39;a dit d’être rouge&lt;/div&gt;\n\n</p>\n<h3 id=\"selecteur-d-enfant-indirect-\">Selecteur d’enfant indirect : &quot;*&quot;</h3>\n<pre><code class=\"language-css\">.rouge * span { color: red }\n</code></pre>\n<p>À l’inverse du sélecteur d’enfant direct, ce sélecteur agit de manière inverse et affecte tous ses descendants sauf ses enfants directs.</p>\n<pre><code class=\"language-markup\">&lt;div class=&quot;rouge&quot;&gt;\n    &lt;div class=&quot;bleu&quot;&gt;\n        &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n&lt;/div&gt;\n&lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n</code></pre>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n<em>   Mes enfants descendants seront rouges\n\n</em>   On ne m&#39;a rien dit\n<em>   On ne m&#39;a rien dit\n\n</em>   Mon grand-parent m&#39;a dit d’être rouge\n<em>   Mon grand-parent m&#39;a dit d’être rouge\n</em>   Mon grand-parent m&#39;a dit d’être rouge\n\n<em>   Mon grand-parent m&#39;a dit d’être rouge\n</em>   Mon grand-parent m&#39;a dit d’être rouge\n*   On ne m&#39;a rien dit&lt;/div&gt;\n\n</p>\n<h3 id=\"selecteur-d-adjacence-directe-\">Selecteur d’adjacence directe : &quot;+&quot;</h3>\n<pre><code class=\"language-css\">.rouge span + span { color: red }\n</code></pre>\n<p>Un sélecteur un peu plus complexe cette fois-ci, mais très utile. Celui-ci sert à définir un lien d’adjacence entre deux balises ayant un parent direct commun. Les éléments adjacents au dernier cité ne seront pas affectés.</p>\n<pre><code class=\"language-markup\">&lt;div class=&quot;rouge&quot;&gt;\n    &lt;div class=&quot;bleu&quot;&gt;\n        &lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n        &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n    &lt;span&gt;Ce texte sera affecté&lt;/span&gt;\n&lt;/div&gt;\n&lt;span&gt;Ce texte ne sera pas affecté&lt;/span&gt;\n</code></pre>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n<em>   Je n’ai rien dit à personne\n\n</em>   Mes frères seront rouges !\n<em>   Mon frère m&#39;a dit d’être rouge\n</em>   Mon frère m&#39;a dit d’être rouge&lt;/div&gt;\n\n</p>\n<p>On peut bien sûr utiliser ce sélecteur plusieurs fois. Par exemple, si on voulait affecter les éléments d’une liste seulement à partir du quatrième élément :</p>\n<pre><code class=\"language-css\">li+li+li+li { color: red }\n</code></pre>\n<p>&lt;div class=&quot;showcode&quot;&gt;\n\n1.  Élément de liste\n2.  Élément de liste\n3.  Élément de liste\n4.  Élément de liste\n5.  Élément de liste\n6.  Élément de liste\n7.  Élément de liste\n8.  Élément de liste\n9.  Élément de liste&lt;/div&gt;\n\n</p>\n<p>C&#39;est un sélecteur dont je me sers régulièrement pour, entre autres, définir des marges automatiques entre deux éléments de même nature, comme des blocs d’un élément de menu.</p>\n<pre><code class=\"language-css\">#sidebar div+div { margin-top: 15px }\n</code></pre>\n<h2 id=\"les-s-lecteurs-d-attributs\">Les sélecteurs d’attributs</h2>\n<p>On peut également attribuer des propriétés à un (ou plusieurs) élément(s) html précis en fonction des attributs qu&#39;ils portent. Ainsi on peut, encore une fois, se passer facilement d’ajouts de classes dans le html en se reposant sur ce qui existe déjà. Il suffit d’accoler le nom de l’attribut en question entre crochets [] à l’élément en question. On ne se soucie pas de la valeur de cet attribut.</p>\n<pre><code class=\"language-css\">a[title] { color: red }\n</code></pre>\n<pre><code class=\"language-markup\">&lt;a href=&quot;#&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; title=&quot;Venez sur mon site !&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n</code></pre>\n<pre><code class=\"language-css\">a[target] { color: red }\n</code></pre>\n<pre><code class=\"language-markup\">&lt;a href=&quot;#&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; title=&quot;&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; title=&quot;&quot; target=&quot;&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n</code></pre>\n<p>Mais on peut également aller plus loin et cibler un élément dont l’attribut prend une valeur précise. C&#39;est très utile pour les éléments d’un formulaire, qui sont définis, avec la même balise, par la valeur de leur type :</p>\n<pre><code class=\"language-css\">input[type=&quot;password&quot;] { color: red }\n</code></pre>\n<pre><code class=\"language-markup\">&lt;input type=&quot;text&quot; /&gt;\n&lt;input type=&quot;password&quot; /&gt; &lt;!-- Cet élément sera affecté --&gt;\n&lt;input type=&quot;submit&quot; /&gt;\n</code></pre>\n<p>Vous pouvez également définir le fait qu&#39;un attribut doit contenir au moins une des valeurs énoncées.</p>\n<pre><code class=\"language-css\">a[rel~=&quot;copyright&quot;] { color: red }\n</code></pre>\n<pre><code class=\"language-markup\">&lt;a href=&quot;#&quot; rel=&quot;&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; rel=&quot;copyright&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n&lt;a href=&quot;#&quot; rel=&quot;copyright copyleft&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n</code></pre>\n<p>Sachez enfin qu&#39;on peut combiner ces sélecteurs à volonté :</p>\n<pre><code class=\"language-css\">a[rel][target=_blank][title] { color: red }\n</code></pre>\n<h2 id=\"les-pseudo-classes\">Les pseudo-classes</h2>\n<p>Les pseudo-classes désignent des éléments que l’on n’aurait pas pu cibler sans ajouter une classe particulière.</p>\n<h3 id=\"-first-child\">:first-child</h3>\n<p>Très pratique dans certains cas, cette pseudo-classe cible un élément s&#39;il est le premier enfant de son parent. Il faut donc bien faire attention, car il s&#39;agit bien du premier enfant, et non du premier enfant d’un tel type. Par exemple :</p>\n<pre><code class=\"language-css\">div p:first-child { color: red }\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Si on voit maintenant, pour le même code CSS, ce code HTML :</p>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;h2&gt;Ce titre ne sera pas affecté&lt;/h2&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Rien ne va se passer. En effet, le code CSS signifie &quot;cibler tous les éléments <code>p</code> s&#39;il s&#39;agit du premier enfant de leur parent&quot; et non &quot;cibler tous les éléments <code>p</code> qui sont les premiers de ces éléments de type <code>p</code> enfants&quot;. Or dans ce cas, c&#39;est <code>h2</code> qui est le premier enfant.</p>\n<h3 id=\"-active\">:active</h3>\n<p>Cette pseudo-classe est de moins en moins utilisée. Elle est héritée de la première version du CSS et servait à cibler un lien &quot;actif&quot; (donc un lien au moment où il était cliqué). On peut maintenant l’utiliser sur n’importe quel élément, mais c&#39;est assez peu usité.</p>\n<pre><code class=\"language-css\">a:active { color: white }\n</code></pre>\n<h3 id=\"-link\">:link</h3>\n<p>Cette pseudo-classe est de moins en moins utilisée. Elle sert à cibler un lien qui n’a pas encore été visité par le visiteur actuel.</p>\n<pre><code class=\"language-css\">a:link { color: white }\n</code></pre>\n<h3 id=\"-visited\">:visited</h3>\n<p>Cette pseudo-classe est de moins en moins utilisée. À l’inverse du précédent, elle sert à cibler un lien qui a déjà été visité par le visiteur actuel.</p>\n<pre><code class=\"language-css\">a:visited { color: violet }\n</code></pre>\n<h3 id=\"-focus\">:focus</h3>\n<p>Cette pseudo-classe permet de cibler un élément qui a actuellement le &quot;focus&quot;. Par exemple, lorsque vous cliquez dans un champ de texte, celui-ci prend automatiquement cette valeur dynamique de focus. C&#39;est aussi le cas des liens, lorsqu&#39;on navigue avec la touche &quot;tab&quot;.</p>\n<pre><code class=\"language-css\">input:focus { background: green }\n</code></pre>\n<h3 id=\"-hover\">:hover</h3>\n<p>Cette pseudo-classe est très utilisée. Elle déclenche un ensemble de propriétés au survol d’un élément par la souris. C&#39;est par exemple très utilisé pour les menus, qui vont se dérouler ou changer de couleur au survol. On peut l’appliquer à tout élément html.</p>\n<pre><code class=\"language-css\">div:hover { background: white }\n</code></pre>\n<p>Il est aussi possible de cibler des éléments au survol de leur parent. Dans le cas suivant, ce sont tous les liens contenus dans un élément de liste, au survol de la div qui les contient (et non au survol du lien) :</p>\n<pre><code class=\"language-css\">div:hover li a { background: white }\n</code></pre>\n<h2 id=\"les-pseudo-l-ments\">Les pseudo-éléments</h2>\n<p>Les pseudo-éléments s&#39;utilisent de la même manière que les pseudo-classes ; cette appellation désigne simplement des éléments que l’on n’aurait pas pu identifier sans ajouter un autre élément (comme span ou div, par exemple).</p>\n<h3 id=\"-first-letter\">:first-letter</h3>\n<p>On peut se servir de <code>:first-letter</code> pour créer des lettrines. C&#39;est d’ailleurs sa principale utilité. Dans l’exemple suivant, tous les éléments <code>p</code> verront leur première lettre affichée en rouge.</p>\n<p><del>~p:first-letter { color: red }</del>~</p>\n<h3 id=\"-first-line\">:first-line</h3>\n<p>Peu utilisé, ce pseudo-élément va agir sur la première ligne de texte d’un élément.</p>\n<p><del>~p:first-line { color: red }</del>~</p>\n<h3 id=\"-after-et-before\">:after et :before</h3>\n<p>Voici deux pseudo-éléments complémentaires très utiles. Ils s&#39;utilisent avec la propriété <code>content</code> et servent à rajouter un élément avant (pour <code>:before</code>) ou après (pour <code>:after</code>) un autre élément.</p>\n<p><del>~span:before{ content: &quot;→ &quot; }</del>~</p>\n<p>Ainsi pour ce code :</p>\n<pre><code class=\"language-markup\">&lt;span&gt;Test&lt;/span&gt;\n</code></pre>\n<p>On obtiendra ce résultat :</p>\n<p>&lt;div class=&quot;showcode&quot;&gt;→ Test&lt;/div&gt;\n<del>~.language-css\na:after{ content: &quot; &gt;&gt;&quot; }</del>~\n\n<del>~.language-markup\n&lt;a href=&quot;#&quot;&gt;Lien&lt;/a&gt;\n&lt;a href=&quot;#&quot;&gt;Lien &gt;&gt;&lt;/a&gt;</del>~\n\n## Le sélecteur universel : &quot; <em> &quot;\n\nCe sélecteur, à ne pas confondre avec le sélecteur d’enfant indirect que nous avons vu plus haut, cible tous les éléments.\n\n~~~.language-css\n</em> { color: red }~~~\n\n&lt;div class=&quot;note note--alert&quot;&gt;Ce sélecteur est donc très &quot;lourd&quot; (tout est relatif) à utiliser et vous ne devriez l’employer qu&#39;avec une extrême parcimonie, voire jamais !&lt;/div&gt;\n\n</p>\n<p>N’hésitez pas si vous avez des questions, le formulaire de commentaires est là !</p>\n"},{"title":"Principes du CSS - Poids des déclarations","author":"Emmanuel B.","date":"2013-09-01 23:10:27","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"principes-du-css-poids-des-declarations","content":"<p>Parfois, votre CSS ne semble pas avoir d’effet. Vous ajoutez une classe à un élément pour le rendre rouge, et celui-ci reste désespérément bleu. Mais pourquoi ? Hé bien, ami lecteur fort curieux (et tu as raison) en train de faire ta veille internet, je vais t&#39;expliquer le <strong>poids des déclarations</strong> (ouaiiis !).&lt;/p&gt;</p>\n<p>Pour rappel, la déclaration, c&#39;est ce qui cible un ou plusieurs éléments html :</p>\n<pre><code class=\"language-css\">#monElement div.element { }\n</code></pre>\n<h2 id=\"le-poids-de-chaque-l-ment\">Le poids de chaque élément</h2>\n<p>Vous devez donc savoir qu&#39;il y a trois façons &quot;basiques&quot; de cibler un élément, c&#39;est à dire trois sélecteurs de base : l’identifiant (ID, #), la classe (class, .), ou le nom de l’élément :</p>\n<pre><code class=\"language-css\">element { color: red } /* nom */\n.element { color: red } /* classe */\n#element { color: red } /* identifiant */\n</code></pre>\n<p>Hé bien ces trois sélecteurs ont chacun un poids :</p>\n<ul>\n<li>L’élément a un poids de 1</li>\n<li>La classe a un poids de 10</li>\n<li>L’identifiant a un poids de 100</li>\n</ul>\n<p>Le poids d’une déclaration est calculé par simple addition de ces poids. Ainsi, prenons pour exemple cette déclaration :</p>\n<pre><code class=\"language-css\">#monID .maClasse {}\n</code></pre>\n<p>Le premier élément est un identifiant, il vaut donc 100. Le second est une classe, il vaut donc 10. Le poids de cette déclaration est donc 100 + 10 = 110. Simple non ?\nVoici d’autres exemples :</p>\n<pre><code class=\"language-css\">#monID span {}\n</code></pre>\n<p>Identifiant (100) + élement (1) = 101</p>\n<pre><code class=\"language-css\">#monID #autreID div.maClasse {}\n</code></pre>\n<p>identifiant (100) + identifiant (100) + element (1) + classe (10) = 211</p>\n<pre><code class=\"language-css\">.maClasse .autreClasse #monID {}\n</code></pre>\n<p>classe (10) + classe (10) + identifiant (100) = 120\nC&#39;est compris ?</p>\n<p><em>&quot;Mais à quoi ça nous sert ?&quot;</em>, vous demandez-vous sûrement. Hé bien c&#39;est simple : <strong>Plus une déclaration a un poids élevé, plus elle est prioritaire sur une autre</strong>, peu importe l’ordre de déclaration.</p>\n<p>Jusqu&#39;ici, vous saviez que l’ordre des déclarations influait sur leur emploi :</p>\n<p><del>~span { color: red }\nspan { color: blue }\nspan { color: green }</del>~</p>\n<p>C&#39;est toujours vrai, l’élément ciblé ici serait de couleur verte, mais uniquement parce que le poids des déclarations est identique. Mais maintenant voyons ceci :</p>\n<pre><code class=\"language-css\">#monID { color: red }\nspan { color: blue }\n</code></pre>\n<p>Si l’élément ciblé est un span qui porte l’id &quot;monID&quot;, alors son texte sera de couleur rouge, car le poids de la première déclaration est de 100 (identifiant), la seconde n’étant que de 1 (élément).</p>\n<p>Prenons un exemple en html :</p>\n<pre><code class=\"language-markup\">&lt;ul id=&quot;menu&quot;&gt;\n    &lt;li class=&quot;color&quot;&gt;&lt;a href=&quot;#&quot;&gt;Lien 1&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Lien 2&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Lien 3&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Lien 4&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Lien 2&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Maintenant, imaginons un CSS déjà existant pour ce html, qui vise à colorer les liens en rouge :</p>\n<pre><code class=\"language-css\">#menu a { color: red }\n</code></pre>\n<p>Cette déclaration a donc un poids de 101 (un identifiant et un élément);</p>\n<p>Sur ce, vous voulez que le lien dont la liste porte la classe &quot;color&quot; s&#39;affiche en vert.</p>\n<pre><code class=\"language-css\">.color a { color: green }\n</code></pre>\n<p>Surprise ! Ça ne fonctionne pas. En effet, cette déclaration n’a un poids que de 11, donc il ne surclasse pas la précédente de 102 même en étant placé après. Il faut donc écrire une déclaration dont le poids surpassera la première :</p>\n<pre><code class=\"language-css\">#menu .color a\n</code></pre>\n<p>Cette déclaration fait donc 111 (identifiant + classe + element), son poids est supérieur à la première, et notre lien s&#39;affiche en vert.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Les pseudo-classes (<code>:hover</code>, <code>:first-child</code>, etc.) ont le même poids qu&#39;une classe (donc 10) et les pseudo-éléments ont le même poids qu&#39;un élément (1).&lt;/div&gt;\n\n</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;\n\nAttention toutefois : Il ne s&#39;agit pas d’une simple notation mathématique, mais de &quot;niveaux de poids&quot;. 10 classes n’auraient le même poids qu&#39;un ID. Il est impossible de surcharger un type &quot;supérieur&quot; — en clair, des éléments ne pourront pas surcharger une classe, une classe ne pourra pas surcharger un ID, etc.\n\nPour être plus précis, il faudrait noter &quot;1.0.1&quot; et non simplement &quot;101&quot;. Ce qui signifie que si on rajoutait 15 classes à cette déclaration, on obtiendrait un poids de &quot;1.15.1&quot;, et non 251.\n&lt;/div&gt;\n\n</p>\n<h3 id=\"notez-bien-\">Notez bien !</h3>\n<p>D’une manière générale, dans le métier, on essaie de faire des déclarations &quot;minimales&quot;, c&#39;est à dire au poids le plus petit possible. En effet, pour l’exemple précédent, on aurait pu faire une déclaration de ce genre :</p>\n<pre><code class=\"language-css\">ul#menu li a { color: red }\n</code></pre>\n<p>Ces déclarations peuvent vite devenir très longues, et les raccourci un maximum est un bon moyen de s&#39;assurer à la fois que le code continuera à changer même si le markup (Template) de la page change dans l’avenir, et de permettre d’optimiser un peu le poids de la feuille de CSS. Mais surtout, cela permet de pouvoir surclasser ces déclarations très facilement. En effet, il y a bien plus de façons simples de surclasser une déclaration d’un poids de 102 que de 625 lorsqu&#39;on veut effectuer une petite modification.</p>\n<p>Pensez-y !</p>\n<h2 id=\"cas-particuliers\">Cas particuliers</h2>\n<pre><code class=\"language-markup\">&lt;div style=&quot;color:red&quot;&gt;mon texte&lt;/div&gt;\n</code></pre>\n<p>Déclarer du CSS inline (c&#39;est à dire dans le html) lui donne automatiquement un poids de 1 000. Autant dire que vous ne pourrez presque rien faire dans votre feuille de style pour le surclasser ! C&#39;est aussi pour ça qu&#39;il faut éviter de mettre du CSS de cette façon. Comment faire alors ?</p>\n<p>Hé bien le marqueur <code>!important</code> donne un poids de 10 000. De quoi surclasser tout ce qui se trouve dans la page, y compris le CSS <em>inline</em>.</p>\n<pre><code class=\"language-css\">element { color: red !important }\n</code></pre>\n<p>Retenez donc que ces deux cas particuliers ne devraient pas être utilisés. La gestion du poids comme de l’héritage suffit largement pour\nmettre votre site en forme !</p>\n<p>Voilà, maintenant vous savez tout sur le poids des déclarations en CSS.</p>\n<h4 id=\"edit-du-7-avril\">Edit du 7 Avril</h4>\n<p>Si vous n’avez rien compris, si vous pensez que des métaphores avec des animaux mignons et des gifs animés vous aideront à mieux appréhender le concept, ou tout simplement si vous trouvez que j’explique mal, <strong>Lamecarlate</strong> a fait un bon article qu&#39;elle a sobrement (Et honteusement, c&#39;était mon idée !) nommé  &#39;<a href=\"http://informatique.lamecarlate.net/blog/articles/selecteurs-css-poids\" title=\"Lamecarlate\">Sélecteurs CSS : poids des déclarations</a>&#39;</p>\n"},{"title":"Les découvertes du web #1","author":"Emmanuel B.","date":"2013-11-08 21:11:11","tags":["design"],"categories":["Veille"],"template":"post.vue","basename":"les-decouvertes-du-web-1","content":"<p>Au programme aujourd’hui : des astuces en CSS, un mythe qui s&#39;effondre et un site bien utile.</p>\n<h3 id=\"grille-css-toujours-pleine\">Grille CSS toujours pleine</h3>\n<p>Une petite astuce sympathique à voir sur <a href=\"http://www.heydonworks.com/article/tetris-the-power-of-css\">heydonwork</a>.</p>\n<h3 id=\"-les-utilisateurs-ne-scrollent-pas-\">&quot;Les utilisateurs ne scrollent pas&quot;</h3>\n<p>Idée reçue ayant la vie dure, <a href=\"http://uxmyths.com/post/654047943/myth-people-dont-scroll\">UxMyths</a> nous propose de quoi y mettre un bon coup de clavier sur le coin de la gueule.</p>\n<h3 id=\"css-prefix\">CSS-Prefix</h3>\n<p>Vous est-il déjà arrivé de devoir reprendre votre CSS pour copier-coller un sélecteur supplémentaire sur une quarantaines de déclarations, pas toutes sur différentes lignes ? Hé bien pas de panique, la solution s&#39;appelle <a href=\"http://www.css-prefix.com/\">CSS-Prefix</a>.</p>\n<p>C&#39;est tout !</p>\n"},{"title":"L'informatique facile m'a tué","author":"Emmanuel B.","date":"2013-11-11 23:04:47","tags":[""],"categories":["Diatribes"],"template":"post.vue","basename":"linformatique-facile-ma-tue","content":"<p>L’informatique, c&#39;est super. Grâce à internet, on peut tout apprendre ; on peut suivre des destins hors du commun et grâce à des projets incroyables certains petits geeks (Parmi lesquels Markus &quot;Notch&quot; Persson, Mark Zuckerberg, Andrey Ternovskiy, etc.) ont atteint la notoriété et parfois même la richesse et la gloire.</p>\n<p><em>&quot;Moi aussi, je veux faire ça !&quot;</em> se disent 45 000 personnes chaque jour (au bas mot hein). Oui, mais est-ce vraiment si simple ?</p>\n<h2 id=\"l-informatique-la-port-e-de-tous\">L’informatique à la portée de tous</h2>\n<p>Parce que tout est accessible à tout le monde, tout semble soudain dévalué. Le mystère tombe, et les métiers de l’informatique semblent perdre toute valeur.</p>\n<p>Si vous touchez un peu (à l’informatique, hein !), vous avez vous-même dû être maintes fois appelé en urgence par votre voisin parce que sa souris ne marche plus, par votre tante parce qu&#39;il n’y a plus internet ou encore par la connaissance d’un mec que vous avez croisé parce que son pc est lent. Et comme tous ceux qui ont le malheur de faire savoir à leur entourage qu&#39;ils se dépatouillent avec un clavier entre les pognes, vous avez sûrement dû sentir une certaine frustration à force d’être pris pour un &lt;del&gt;pigeo&lt;/del&gt; &lt;del&gt;co&lt;/del&gt; &lt;del&gt;bonich&lt;/del&gt; serviable petit(e) larbin(e).</p>\n<p>Hé bien soyez conscient que c&#39;est encore pire dans le métier !</p>\n<h3 id=\"le-syndrome-du-gratuiste\">Le syndrome du gratuiste</h3>\n<p>Le taff pour lequel cette frustration est probablement la plus ressentie, c&#39;est celui de graphiste ; ou plus précisément, d’infographiste. Vous savez, ces gens qui font des affiches, des plaquettes publicitaires, des magazines et toutes sortes de choses visuelles qui croisent votre regard tous les jours ? Hé bien leur boulot est <strong>extrêmement</strong> dévalué. Parce que tout le monde peut faire un peu de Photoshop, ça parait forcément simple. Parce que le neveu du patron il en fait un peu aussi, pourquoi s&#39;embêterai-t-il a payer cher quelqu&#39;un pour faire sensiblement la même chose ?</p>\n<p>Internet est gonflé de graphistes amateurs (plus ou moins talentueux, allant du très bon au très mauvais) qui couvrent le web de leurs créations. Parfois, ça frise vraiment le très bas : on prend une photo non-libre de droit trouvée sur <strong>DeviantArt</strong> (ou ailleurs), on y pose deux ou trois <em>brushes</em>, on bidouille quelques options de calque pour voir ce que ça fait et voilà une belle œuvre à mettre dans son portfolio - après y avoir apposé son pseudo, pour ne pas se faire voler son &quot;travail&quot;.</p>\n<p>Et comme à ce niveau-là, la seule reconnaissance c&#39;est d’être très demandé, de faire des &quot;intros youtube&quot; (la grande mode), tout est gratuit, bien entendu.</p>\n<p>Mais après tout ça, comment un professionnel peut-il justifier auprès d’un client une facture de 1800€ pour une affiche ? Le résultat est là : les graphistes sont sous-évalués, leur travail dévalué et leur profession prise pour un passe-temps d’adolescent mal dégrossi. Pire, ils sont régulièrement exploités au gré de &quot;concours&quot; (lire &quot;arnaques&quot;) organisées par diverses boîtes peu scrupuleuses pour avoir des centaines de propositions pour pas un rond, et n’en rémunérer (mal, qui plus est - parfois pas du tout) qu&#39;une seule.</p>\n<p>Les graphistes ont d’ailleurs récemment poussé un <a href=\"http://www.meltybuzz.fr/gratuiste-le-tumblr-des-graphistes-gratuits-en-rogne-a193271.html\">gros coup de gueule collectif</a> en lançant le tumblr &quot;Gratuiste&quot; (malheureusement fermé depuis) pour recenser toutes les demandes qu&#39;ils reçoivent.</p>\n<h4 id=\"quelques-liens-lire-sur-le-sujet\">Quelques liens à lire sur le sujet</h4>\n<ul>\n<li><a href=\"http://www.mariejulien.com/?post/2007/09/06/Les-concours-de-graphisme-pourquoi-ca-craint-en-general\">&quot;Les concours de graphisme, pourquoi ça craint en général - Marie &amp; Julien</a></li>\n<li><a href=\"http://monmacon.tumblr.com/\">Mon maçon était illustrateur</a>, blog illustré où sont comparés les métiers de graphiste et de maçon pour montrer le ridicule des situations que vivent les illustrateurs.</li>\n<li>Le twitter <a href=\"https://twitter.com/gratuiste\">@gratuiste</a></li>\n</ul>\n<h3 id=\"tout-le-monde-peut-del-cuisiner-del-d-velopper\">Tout le monde peut &lt;del&gt;cuisiner&lt;/del&gt; développer</h3>\n<p>L’autre métier qui en souffre d’une certaine manière, c&#39;est aussi celui de développeur. Au sens large tout d’abord : en effet, tout le monde utilise des programmes, alors quand ça plante, quand ça bugue, quand ça freeze, on maudit les programmeurs qui ont pondu un truc aussi mal fait. Pourtant, faire un programme même simple peut vite s&#39;avérer très complexe. Mais comme c&#39;est &quot;moins&quot; accessible au grand public de prime abord, le domaine logiciel me semble (fustigez-moi si je me trompe, amis programmeurs de softwares) plus ou moins épargné ; on se contente juste de l’ignorer en soirée parce que, bon, &#39;c&#39;est bien beau, mais c&#39;est pas un vrai métier&#39;.</p>\n<p>Pour un développeur web, ce me semble être une autre paire de manches. Grâce à des sites comme OpenClassrooms (ex-Site du Zéro, où j’ai moi-même appris les bases du taff et sur les forums duquel je sévis toujours), tout le monde peut apprendre à créer sa petite page perso. Qui plus est, créer un site sans la moindre connaissance est tout à fait possible grâce à diverses plates-formes (WordPress.com, e-monsite, forumactif…) ou &lt;abbr title=&quot;Content Management System&quot;&gt;CMS&lt;/abbr&gt; (Joomla!, Drupal, WordPress, Prestashop…). Encore une fois, comment un professionnel peut-il efficacement défendre son devis à 3800€ quand le premier venu peut <em>prétendre</em> en faire autant pour 400€ non-déclarés ?</p>\n<p>Pourtant, comme chez les graphistes, la différence entre un amateur et un professionnel sera bien entendu dans la majorité des cas plus flagrante qu&#39;un bouton d’herpès couvert de crème ; cependant le mal sera déjà fait.</p>\n<h2 id=\"le-double-effet-kiss-kool\">Le double effet kiss-kool</h2>\n<p>Alors autour de quoi peut-on réunir un développeur logiciel, un développeur web et un graphiste ? Autour des projets amateurs (et bidons) qui fleurissent sur le net. Jean-Eudes a eu la révélation de sa vie : il veut créer un réseau social pour les gens qui n’ont pas d’amis. Ou bien faire un MMORPG mieux que World of Warcraft, parce que c&#39;est trop long de monter de niveau dessus. Ou bien il veut simplement refaire Minecraft pour être riche, lui aussi.</p>\n<h3 id=\"-j-ai-une-id-e-g-niale-\">&quot;J’ai une idée géniale&quot;</h3>\n<p>Sur nos forums, nous voyons régulièrement de fougueux et courageux &quot;entrepreneurs&quot; qui ont des projets plein la tête. Les 3/4 du temps (voire davantage), ils n’ont ni les compétences pour y participer ni conscience du travail que cela représente. Tout autant de fois, ils n’ont aucun <em>business plan</em> de prévu, un cahier des charges totalement amateur, et ne prévoient bien sûr aucune rémunération - ou bien le très célèbre &#39;Quand notre MMO/Réseau Social/Système d’exploitation sera très connu et qu&#39;on sera riches, vous serez payés&#39;.</p>\n<p>Des &quot;projets&quot; comme ça, on en voit passer une trentaine par jours. Aucun n’aboutira, seuls deux ou trois seront un poil plus développés. Bien sûr, ils ne sont pas novateurs, n’apportent pas grand chose d’intéressant à l’existant et sont loin d’être la poule aux œufs d’or que s&#39;imaginent leurs auteurs. Et pour ne pas dévoiler les dessous de leur &quot;Facebook 2 - mais en mieux&quot;, ils ont en plus le bon goût (hem) de ne rien vouloir en dévoiler de peur qu&#39;on veuille leur piquer le concept : pas une ligne de code pour montrer qu&#39;ils savent de quoi ils parlent, pas une page d’un cahier des charges pour montrer que le projet est concret.</p>\n<p>J’en profite pour l’écrire en gros à tous ceux qui espèrent cacher leurs créations, leur code ou tout autre chose aux yeux du monde : <strong>LE MONDE ENTIER SE FOUT TOTALEMENT DE VOTRE PROJET !</strong> Et ce sera le cas tant que ce ne sera qu&#39;un projet ; Facebook a eu du succès parce qu&#39;il était &quot;prêt&quot; et terminé, les specs&#39; techniques n’auraient intéressé personne.</p>\n<p>Bref, je m&#39;égare. Là encore, <a href=\"http://conquerirlemonde.com/blog/category/erreurs-classiques/\">d’autres en ont parlé bien mieux que moi</a>.</p>\n<h2 id=\"tout-a-pour-dire-quoi-\">Tout ça pour dire quoi ?</h2>\n<p>Simplement que le fait d’être assis devant un ordinateur ne rend pas le métier moins technique qu&#39;un autre. Il n’y a pas de logiciel miracle qui fasse le boulot à notre place ; et quand un outil fait une part du travail, il faut apprendre à l’utiliser (et parfois le développer soi-même). Et le travail, devinez quoi ? Ça se paie.</p>\n<p>J’avais trouvé une belle citation sur une illustration ; comme je ne l’ai pas retrouvée, je vais simplement l’écrire (et la traduire) :</p>\n<blockquote>\n<p>Pourquoi devrais-je payer autant pour une illustration qui vous a pris dix minutes à faire ?</p>\n<ul>\n<li>Parce que j’ai étudié et travaillé dix ans pour apprendre à faire ça en dix minutes.</li>\n</ul>\n</blockquote>\n<h3 id=\"edit-et-post-scriptum\">Edit et post-scriptum</h3>\n<p>J’ai eu quelques retours rapides sur cet article (merci hé, je ne savais pas que quelqu&#39;un lisait ici !), et du coup je voudrais quand même préciser que malgré tout, les métiers concernés n’en sont pas moins passionnants et importants, et que notre travail est quand même assez souvent bien reconnu. Si j’ai eu quelques clients désagréables et mauvais payeurs, d’autres ont au contraire été très honnêtes, ouverts et à l’écoute de l’expertise que je pouvais leur apporter. L’important, c&#39;est de trouver de bons collègues ; et moi, j’ai été engagé dans une super agence !</p>\n<p>Alors rassurez-vous, fidèles lecteurs (oui, vous les deux au fond là bas !), tout n’est pas que tristesse et désespoir ! Vous pourrez même vous payer une bonne tranche de rire sur <a href=\"http://lesjoiesducode.tumblr.com/\">Les Joies du Code</a> et <a href=\"http://www.webagencyfail.com/\">WebAgencyFail</a>.</p>\n<p><strong>Edit du 11 mars 2015 :</strong> Comme le web est un endroit vaste, on tombe parfois sur des gens qui pensent comme nous (Si, si !). Du coup, voici un autre informaticien qui a fait le même constat (comme beaucoup d’entre nous) et qui en parle très bien dans son article &#39;<a href=\"http://www.neoeon.net/index.php?act=1&amp;com=64\" title=\"Neoeon\">Informaticien, un métier ingrat</a> — Neoeon&#39;.</p>\n"},{"title":"Désactiver le :hover pour un scroll fluide","author":"Emmanuel B.","date":"2013-11-28 17:07:44","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"desactiver-le-hover-pour-un-scroll-fluide","content":"<p>L’astuce CSS du jour, c&#39;est à <strong>Christian Schaefer</strong> et <strong>TheCSSNinja</strong> qu&#39;on la doit.</p>\n<blockquote>\n<p><a href=\"https://twitter.com/paul_irish\">@paul_irish</a> Easy. Apply &quot;pointer-events: none&quot; to the &lt;body&gt; on scrollstart and remove it on scrollend. <a href=\"https://twitter.com/tabatkins\">@tabatkins</a>\n&mdash; Christian Schaefer (@derSchepp) <a href=\"https://twitter.com/derSchepp/statuses/400394164350644224\">12 Novembre 2013</a></p>\n</blockquote>\n<h2 id=\"c-est-quoi-donc-le-probl-me-dis-\">C&#39;est quoi donc le problème, dis ?</h2>\n<p>Il est question ici d’un problème que certains d’entre vous ont pu rencontrer, si vous avez bossé sur un portfolio ou n’importe quel site avec beaucoup de contenu réagissant à l’action du visiteur et plus précisément au survol du curseur (ce qu&#39;on appelle, dans le jargon des <em>développeux</em>, le &quot;hover&quot;) : lorsque l’on <em>scrolle</em> dans la page, si le curseur survole lesdits éléments, une latence se fait sentir. Et effectivement, si on utilise les outils de <em>monitoring</em> des différents navigateurs, on remarque que ça prend pas mal de ressources d’un seul coup (en plus d’être moche à l’utilisation).</p>\n<h2 id=\"mais-que-faire-\">Mais que faire ?</h2>\n<p>Suivant le <em>tweet</em> mis en lumière plus haut, et l’article de TheCSSNinja, voici un simple petit bout de code à appliquer dans vos pages web pour résoudre le problème. En substance, il s&#39;agit d’appliquer une classe sur body, qui désactive la réactivité des éléments aux actions du curseur, et de la retirer lorsque le défilement est terminé.</p>\n<p>Voici le code CSS en question :</p>\n<pre><code class=\"language-css\">.disable-hover {\n    pointer-events: none;\n}\n</code></pre>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Notez que la propriété pointer-events cause une erreur dans la validateur CSS du W3C.&lt;/div&gt;\n\n</p>\n<p>Maintenant, un peu de Javascript :</p>\n<pre><code class=\"language-javascript\">var body = document.body,\n    timer;\n\nwindow.addEventListener(&#39;scroll’, function() {\n\n    clearTimeout(timer);\n\n    if(!body.classList.contains(&#39;disable-hover&#39;))\n        body.classList.add(&#39;disable-hover&#39;)\n\n    timer = setTimeout(function(){\n        body.classList.remove(&#39;disable-hover&#39;)\n    }, 200);\n\n}, false);\n</code></pre>\n<p>Et voilà !</p>\n<h3 id=\"conclusature\">Conclusature</h3>\n<p>Je n’avais jamais été confronté moi-même à ce &quot;bug&quot;, attendu que mon navigateur principal (IE) désactive de lui-même les <em>pointer events</em> lorsqu&#39;on fait défiler une page. Piqué de curiosité en lisant l’article, j’ai donc fait le test sur Chrome et Firefox, pour constater qu&#39;effectivement… Ouch. Je reprend donc ici la moelle de l’article en question, d’une part afin de ne pas oublier cette astuce, d’autre part afin que les anglophobes puissent en bénéficier aussi.</p>\n<p>Source : <a href=\"http://www.thecssninja.com/javascript/pointer-events-60fps\">TheCSSNinja.com</a> - Thanks !</p>\n"},{"title":"Mon top des mauvaises pratiques web","author":"Emmanuel B.","date":"2014-01-02 09:46:17","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"mon-top-des-mauvaises-pratiques-web","content":"<p>Dans le domaine du web comme dans tous les autres, il y a de bonnes et de mauvaises pratiques. Rassurez-vous (ou soyez déçu(e)s !) je ne tiendrais pas ici compte de tous les points récurrents sur la validité et la sémantique du html, sur l’optimisation du CSS, js, php ou tout autre langage ou sur les tailles d’images. Non, je vais plutôt parler de pratiques obscures qui peuvent sembler très cool de prime abord et qui sont en fait de vraies mauvaises idées pour diverses raisons.</p>\n<p>À noter que ce top sera étoffé au fur et à mesure que les idées me viendront ou que je rencontrerais des cas d’école.</p>\n<h2 id=\"-1-modifier-les-curseurs\">#1 : modifier les curseurs</h2>\n<p>J’entends par là <strong>modifier le comportement normal des curseurs</strong>, par exemple utiliser (comme je le vois beaucoup trop) <code>cursor: nw-resize;</code> (<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/01/cursor-resize.png\" alt=\"cursor resize\">) en lieu et place de <code>cursor: pointer;</code> (<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/01/cursor-hand.png\" alt=\"cursor hand\">&lt;/a&gt;) au survol des liens et éléments cliquables. Non, non et NON ! Ce n’est pas cool ni original (on faisait ça sur les pages persos de MultiMania avant même l’ADSL !) et ça ne donne en aucun cas l’impression que vous maîtrisez super bien le CSS.</p>\n<p>Les curseurs sont des icones <strong>sensées</strong>, ayant chacun une <strong>signification visuelle codifiée</strong> ancrée chez la grande majorité des utilisateurs des systèmes d’exploitations principaux (Windows, OSX, distributions Linux). Les mélanger (outre le fait de n’avoir aucun intérêt) risque de perdre le visiteur qui passe sur votre site et lui donner envie de fermer la page sans plus de manières. Alors certes on peut rétorquer qu&#39;il suffirait de faire un effort d’adaptation, mais certains individus qui souffrent de troubles difficultés cognitives (mêmes légères !) peuvent s&#39;en retrouver totalement désorientés.</p>\n<p>Et même, rien que sur le principe, ça ne se fait pas ! Imaginez que j’inverse les touches de votre clavier quand vous voulez poster sur un forum ! De la même façon, attention lorsque vous définissez vos propres curseurs : vous pouvez tout à fait avoir des visiteurs ayant des difficultés visuelles qui utilisent des curseurs très gros et très contrasté, et vous risquez de compliquer passablement leur navigation…</p>\n<p>Mon conseil : <strong>Foutez la paix aux curseurs</strong> !</p>\n<h2 id=\"-2-les-liens-qui-bougent\">#2 : les liens qui bougent</h2>\n<p>Tout aussi insupportable que les curseurs indélicats, les <strong>liens qui foutent le camp au survol</strong>, qui <strong>changent de taille</strong>, <strong>de typo</strong>, <strong>d’espacement</strong> et autres variantes. L’apparition de la propriété <code>transition</code> a popularisé ces derniers temps ce genre de pratiques ; cependant, il n’y a rien de plus pénible qu&#39;un lien qui se barre quand vous voulez le survoler. Pire encore, parfois cela conduit le lien à perdre l’état &quot;survolé&quot; (<em>hover</em>), et donc à retourner à sa place initiale où il se retrouvera à nouveau sous le curseur, reprendra l’état survolé et s&#39;animera ainsi en boucle bêtement, rendant le clic plus compliqué qu&#39;un jeu de famille <strong>MB</strong>.</p>\n<p>La seule variante utilisable, c&#39;est quand le lien est un bloc entier qui <strong>ne change pas de taille au survol</strong>, et dont seul le contenu change.</p>\n<p>Mon conseil : tenez-vous en au changement de couleur et aux <a href=\"http://www.w3.org/TR/CSS21/text.html#decoration\"><code>text-decoration</code></a>.</p>\n<h2 id=\"-3-les-balises-qui-n-existent-pas\">#3 : les balises qui n’existent pas</h2>\n<p>Très récemment, je suis tombé sur ça :</p>\n<pre><code class=\"language-markup\">&lt;aa&gt;Quelque chose&lt;/aa&gt;\n</code></pre>\n<p>Ou bien encore ça :</p>\n<pre><code class=\"language-markup\">&lt;r class=&quot;valeur&quot;&gt;Quelque chose&lt;/r&gt;\n</code></pre>\n<p>Inutile de vous dire que ça n’est en aucun cas du html, que ça n’est pas valide, et je trouve absolument scandaleux que les navigateurs affichent un truc pareil sans broncher…</p>\n<p>Alors d’accord, le fait qu&#39;on puisse utiliser des balises inconnues, ça a bien servi au passage du html5 (et encore maintenant pour de vieux IE), mais là, quand même, merde !</p>\n<p>Bref, mon conseil : <strong>Tenez-vous en aux balises existantes en html, et validez votre code !</strong></p>\n"},{"title":"Doucement sur le box-sizing !","author":"Emmanuel B.","date":"2014-01-10 13:27:20","tags":["html/css"],"categories":["Diatribes"],"template":"post.vue","basename":"doucement-sur-le-box-sizing","content":"<p>Récemment dans les milieux autorisés, un certain bout de code a fait son apparition. Rapidement intégré dans les thèmes WordPress, le Framework Bootstrap, Normalize et maints autres projets, <code>box-sizing</code> est devenu un &quot;indispensable&quot; dans une feuille de style aujourd’hui, alors seulement qu&#39;on commence enfin à mettre la technique du <em>Reset CSS</em> de côté.</p>\n<p>Mais Est-ce vraiment une bonne idée ?</p>\n<h2 id=\"souvenons-nous\">Souvenons-nous</h2>\n<p>Un jour, un gugusse fort inspiré a eu une idée &lt;del&gt;merdique&lt;/del&gt; révolutionnaire en découvrant le sélecteur universel <code>*</code>. Fort embêté par quelques marges automatiques, notamment celle sur body (Pour ceux qui l’ignoreraient, body a un margin automatique de 8px), il s&#39;est dit que, plutôt que de penser à mettre quelques <code>margin: 0;</code> là où il en avait besoin, ce serait plus simple de tout péter avec ce petit sélecteur. C&#39;est ainsi qu&#39;est né le premier des reset CSS :</p>\n<pre><code class=\"language-css\">* {\n    margin: 0;\n    padding: 0;\n}\n</code></pre>\n<p>En suivit celui d’Eric Meyer qui, à l’époque d’IE6, avait le bon goût de tenter de corriger intelligement les différences de marges automatiques d’un navigateur à l’autre. Seulement voilà  : à tout péter comme un gros babouin avec ces reset, il en résulte un problème conséquent : les marges automatiques ne sont pas faites pour les clebs et quand on les vire toutes, le texte devient complètement illisible. L’interaction normale des éléments html les uns envers les autres est un poil compromise, les paragraphes ne sont plus des paragraphes, etc.. À l’époque du html4 où internet était un vaste réseau de pages persos MultiMania pleines de gifs &quot;codées&quot; via des logiciels WYSIWYG, on ne se posait pas trop la question : on rustinait ça comme de grosses otaries à coup de <code>&lt;br /&gt;</code> et hop, on avait des marges.</p>\n<p>Puis est venu le temps du xhtml, où l’accent était mis sur <strong>la sémantique du html</strong>, la <strong>séparation de la mise en forme</strong>… Toujours habitués à utiliser des Reset, il a bien fallu se dire qu&#39;après avoir foutu en l’air toutes les marges, il fallait ensuite les remettre manuellement. Quarante lignes pour retirer toutes les marges (Merci Meyer), quatre-vingt pour remettre des marges (Vous comprendrez que je trouve le principe débile) et de futures longues heures à débuguer ça parce que telle ou telle balise aura été oublié, parce que les marges qu&#39;on a mises ne fonctionnent pas comme attendu et diverses raisons supplémentaires.</p>\n<p>Alors que les navigateurs se sont standardisés entretemps, il a fallu presque dix ans pour qu&#39;apparaisse l’idée d’une feuille de style de base qui redéfinirait directement et correctement les marges automatiques plutôt que de carrément les supprimer.</p>\n<p>Et je trouve personnellement qu&#39;aujourd’hui, on se passe très bien des deux.</p>\n<h3 id=\"un-point-sur-le-s-lecteur-universel\">Un point sur le sélecteur universel</h3>\n<p>Le sélecteur universel <code>*</code> (À ne pas confondre avec le <a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-les-selecteurs-partie1-css2/#selecteur-enfant-indirect\">sélecteur d’enfant indirect</a>) n’a que peu d’utilité dans un cas pratique. On s&#39;en sert très peu, voire quasiment jamais. Ses manifestations les plus courantes sont généralement les plus mauvaises, comme dans le cas de ce reset sauvage.</p>\n<blockquote>\n<p>&quot;Toi là, vil élément ! Peu importe qui tu es, tu n’auras plus aucune marge !</p>\n<ul>\n<li><p>Mais monsieur, je suis un élément <em>inline</em>, ça n’a aucune utilité sur moi, je n’ai aucune marge !</p>\n</li>\n<li><p>Je t&#39;ai pas demandé ton avis, petit bouseux. SUIVANT ! Toi là, vil élément…&quot;</p>\n</li>\n</ul>\n</blockquote>\n<p>Le résultat est donc d’attribuer des propriétés à tous les éléments de la page, sans se soucier d’un besoin quelconque. En effet, les éléments comme <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, etc. n’ont aucune marge par défaut. Quelle utilité donc d’alourdir le rendu et la feuille de style avec des propriétés qui n’ont pas lieu d’être ?</p>\n<h2 id=\"le-parall-le-avec-le-pass-\">Le parallèle avec le passé</h2>\n<p>Partant de ce qu&#39;on a vu du passé, analysons le présent : le CSS3 est arrivé avec ses grands sabots et, comme à chaque nouveauté, tout a été écumé par mode : les designs de sites arborant de beaux gradients générés en CSS, les coins arrondis dans tous les sens plus que de raison, les ombres sous les blocs ou les textes, les animations… Tout y passe, comme si le fait de rendre quelque chose possible aisément le rendait indispensable.</p>\n<p>Après la cosmétique douteuse, on s&#39;est rendu compte qu&#39;il y avait aussi du pratique. Et alors est arrivé la mode de <code>box-sizing: border-box;</code>.</p>\n<h3 id=\"quel-int-r-t-\">Quel intérêt ?</h3>\n<p>Le fait est que définir <code>width</code> à un élément concerne en fait la largeur de son contenu, indépendamment de ses marges et de ses bordures. Ainsi, si on attribue à un bloc ce code CSS :</p>\n<pre><code class=\"language-css\">element {\n    width: 100px;\n    padding: 10px;\n    border: 2px solid white;\n}\n</code></pre>\n<p>La largeur totale réelle de l’élément sera de 124px : 100px de large, deux fois 10px de padding (gauche et droite), et deux fois 2px de bordure.</p>\n<p>Il suffit donc de prendre en compte ce fait et de modifier retirer 24px à la largeur attribuée :</p>\n<pre><code class=\"language-css\">element {\n    width: 76px;\n    padding: 10px;\n    border: 2px solid white;\n}\n</code></pre>\n<p>Ainsi, notre élément fera bien 100px de large. Mais désormais, grâce à <code>box-sizing</code> il existe un autre moyen :</p>\n<pre><code class=\"language-css\">element {\n    box-sizing: border-box;\n    width: 100px;\n    padding: 10px;\n    border: 2px solid white;\n}\n</code></pre>\n<p>En effet, la valeur <code>border-box</code> force le navigateur à prendre en compte la largeur attribuée sur l’ensemble de l’élément plutôt que sur son seul contenu (par opposition donc à son autre valeur, celle attribuée aux éléments par défaut : <code>content-box</code>). L’élément fera donc bien 100px de largeur, avec une marge interne de 10px de chaque côté et une bordure de 2px.</p>\n<p>Et c&#39;est super pratique, dans le cas par exemple des formulaires si l’on souhaite que les champs aient une largeur de 100% (un des rares cas où <code>width: 100%</code> est valable) tout en ayant une marge intérieure pour que le texte ne soit pas collé au bord.</p>\n<h2 id=\"ne-pas-faire-n-importe-quoi\">Ne pas faire n’importe quoi</h2>\n<p>De là a fleuri ce petit bout de code en début de nombreuses feuilles de style, comme je le disais en début d’article :</p>\n<pre><code class=\"language-css\">*,\n*:after,\n*:before {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n}\n</code></pre>\n<p>Retour de la méthode paladin des croisades :</p>\n<blockquote>\n<p>&quot;Toi là, vil élément ! Peu importe qui tu es, toi et tes éventuels pseudo-éléments aurez un modèle de contenu &quot;border-box&quot; !</p>\n<ul>\n<li><p>Mais monsieur, je suis un élément <em>inline</em>, ça n’a aucune utilité sur moi… Je ne prend même pas les marges en compte !</p>\n</li>\n<li><p>Je t&#39;ai pas demandé ton avis, petit con. SUIVANT ! Toi là, vil élément…&quot;</p>\n</li>\n</ul>\n</blockquote>\n<p>Le rendu de la page sera donc alourdi par un travail inutile qui ajoutera à <strong>tous</strong> les éléments un <code>box-sizing</code>.</p>\n<p><strong>Oui mais, si on a décrété que faire ça avec les marges était mal, pourquoi ça serait bien avec autre chose ?</strong></p>\n<h3 id=\"l-effet-kiss-kool-compatibilit-\">L’effet kiss-kool : compatibilité</h3>\n<p>Il y a encore des gens coincés à la dernière décade, qui surfent avec Internet Explorer 7. Si vous devez en tenir compte, oubliez directement <code>box-sizing</code> ! Faute de quoi, vous développerez votre site avec des valeurs width sans vous soucier d’y soustraire les marges. De fait, lorsque vous regarderez votre site via ce navigateur qui ne prend pas cette propriété en compte, toutes les largeurs de vos éléments seront faussées ! Moche, hein ?</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>(Vous avez remarqué ? Je termine beaucoup d’articles avec une conclusion.)</p>\n<p>Adonc, comme un cycle, la bêtise de l’emploi du sélecteur universel pour attribuer des propriétés cools et bien à la mode revient. Et je ne vois <strong>toujours pas</strong> en quoi ce serait une bonne idée, cette fois. Je laisse Vaas vous expliquer :</p>\n<p>&lt;div class=&quot;video&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/kNdGM6tOoT4&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;\n\n</p>\n<p>Alors, plutôt que de mettre <code>box-sizing: border-box;</code> partout, utilisez-le simplement lorsque vous en avez besoin.</p>\n"},{"title":"Principes du CSS - Les sélecteurs (Partie 2 : CSS3)","author":"Emmanuel B.","date":"2014-02-04 08:55:02","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"principes-du-css-les-selecteurs-partie-2-css3","content":"<p>Lorsqu&#39;on utilise du CSS, on peut se contenter des trois sélecteurs de base : les éléments, les identifiants et les classes. Souvent, sans le savoir, vous utilisez un sélecteur simple de descendance, par un espace entre deux de ces sélecteurs - hé oui ! Mais il existe d’autres sélecteurs plus avancés, nous allons les passer en revue.</p>\n<p>Je ne traite ici que du CSS 3. Je vous recommande d’avoir lu préalablement l’article concernant les <a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-les-selecteurs-partie1-css2/\" title=\"Principes du CSS – Les sélecteurs (Partie1 : cSS2)\">sélecteurs du CSS2</a>.</p>\n<h2 id=\"les-espaces-de-noms-namespace-\">Les espaces de noms (namespace)</h2>\n<pre><code class=\"language-css\">namespace|div {\n    color: red\n}\n</code></pre>\n<p>Une des grandes nouveautés apportées par cette nouvelle version est la gestion des espaces de noms. Les programmeurs sauront de quoi je parle. Pour faire simple, on peut définir un espace de nom particulier et n’appliquer des propriétés qu&#39;aux balises dans cet espace de nom.</p>\n<p><strong>Exemple :</strong> Définissons un espace de nom pour une page particulière :</p>\n<pre><code class=\"language-css\">@namespace produits url(http://www.monsite.com/produits.html);\n</code></pre>\n<p>Puis un espace de nom pour une autre page :</p>\n<pre><code class=\"language-css\">@namespace membre url(http://www.monsite.com/membre.html);\n</code></pre>\n<p>Il est désormais possible d’appliquer des modifications qui ne seront spécifiques qu&#39;à ces pages :</p>\n<pre><code class=\"language-css\">/* propriétés qui ne seront appliqués que sur les balises h1\nde la page définie par l’espace de nom &quot;produits&quot; */\nproduits|h1 { color: red }\n\n/* uniquement les balises h1 dans la page définie par &quot;membre&quot; */\nmembre|h1 { color: red }\n\n/* uniquement les balises h1 qui ne sont PAS dans un espace de nom\n(donc autre que dans les pages définies plus haut */\n|h1 { color: red }\n\n/* tout élément h1 dans n’importe quel espace de nom */\n*|h1 { color: red }\n\n/* par défaut */\nh1 {color: red}\n</code></pre>\n<p>À noter qu&#39;il est possible de définir un nom d’espace par défaut :</p>\n<pre><code class=\"language-css\">@namespace &quot;http://www.monsite.com&quot;\n</code></pre>\n<p>Tous les sélecteurs css qui n’ont pas d’espace de nom spécifié seront donc attribués à celui-ci.</p>\n<h2 id=\"les-s-lecteurs\">Les sélecteurs</h2>\n<h3 id=\"s-lecteur-d-adjacence-indirecte-\">Sélecteur d’adjacence indirecte : &quot;~&quot;</h3>\n<pre><code class=\"language-css\">h1 ~ pre {\n    color: red\n}\n</code></pre>\n<p>Dans la même idée que les sélecteurs d’adjacence <code>+</code>, celui-ci permet d’atteindre tout élément (ici <code>pre</code>) de même niveau que l’élément référent (ici <code>h1</code>). La différence étant qu&#39;ici, l’élément cible n’a pas besoin d’être directement adjacent à l’élément référent.</p>\n<pre><code class=\"language-markup\">&lt;h1&gt;Titre&lt;/h1&gt;\n&lt;p&gt;Pas affecté&lt;/p&gt;\n&lt;pre&gt;Affecté&lt;/pre&gt;\n&lt;p&gt;Pas affecté&lt;/p&gt;\n</code></pre>\n<h3 id=\"s-lecteur-d-attribut\">Sélecteur d’attribut</h3>\n<pre><code class=\"language-css\">a[href^=https] {\n    color: red\n}\n</code></pre>\n<p>Ce sélecteur permet de choisir un élément dont la valeur de l’attribut commence par ce que vous avez défini. Dans l’exemple, tous les liens dont l’adresse commence par &quot;https&quot;.</p>\n<pre><code class=\"language-markup\">&lt;a href=&quot;http://www.monsite.com&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;https://www.monsite.com&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n</code></pre>\n<p>Évidemment, ça ne se limite pas qu&#39;aux liens.</p>\n<pre><code class=\"language-css\">a[href$=.pdf] {\n    color: red\n}\n</code></pre>\n<p>Avec celui-ci, on peut choisir à l’inverse un élément dont la valeur de l’attribut fini par ce que vous avez défini. L’exemple au-dessus permet donc de choisir tous les liens vers un fichier PDF.</p>\n<pre><code class=\"language-markup\">&lt;a href=&quot;monfichier.doc&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;monfichier.pdf&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n&lt;a href=&quot;monfichier.pdf.doc&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n</code></pre>\n<pre><code class=\"language-css\">a[href*=monsite] {\n    color: red\n}\n</code></pre>\n<p>Celui-ci enfin, permet de sélectionner l’élément dont l’attribut désigné comporte au moins la chaîne de caractère définie.</p>\n<pre><code class=\"language-markup\">&lt;a href=&quot;http://www.lesite.com&quot;&gt;Ce lien ne sera pas affecté&lt;/a&gt;\n&lt;a href=&quot;http://www.monsite.com&quot;&gt;Ce lien sera affecté&lt;/a&gt;\n</code></pre>\n<h2 id=\"les-pseudo-classes\">Les pseudo-classes</h2>\n<h3 id=\"-last-child\">:last-child</h3>\n<p>À la manière de <code>:first-child</code>, cette pseudo-classe cible un élément s&#39;il est le dernier enfant de son parent.</p>\n<pre><code class=\"language-css\">div p:last-child {\n    color: red;\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Si on voit maintenant, pour le même code CSS, ce code HTML :</p>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;h2&gt;Ce titre ne sera pas affecté&lt;/h2&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Rien ne va se passer. En effet, le code CSS signifie &quot;cibler tous les éléments <code>p</code> s&#39;il s&#39;agit du dernier enfant de leur parent&quot; et non &quot;cibler tous les éléments <code>p</code> qui sont les derniers de ce éléments de type <code>p</code> enfants&quot;. Or dans ce cas, c&#39;est <code>h2</code> qui est le dernier enfant.</p>\n<h3 id=\"-first-of-type\">:first-of-type</h3>\n<p>L’élément manquant à <code>:first-child</code>. Cette pseudo-classe permet cette fois-ci de cibler chaque premier élément d’un type donné, pour son parent (par exemple, le premier &lt;span&gt; dans un paragraphe).</p>\n<pre><code class=\"language-css\">div *:first-of-type {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;span&gt;Cet élément sera affecté&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div&gt;\n    &lt;h2&gt;Ce titre sera affecté&lt;/h2&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;span&gt;Cet élément sera affecté&lt;/span&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"-last-of-type\">:last-of-type</h3>\n<p>Le parfait opposé de <code>:first-of-type</code>. Cette pseudo-classe permet cette fois-ci de cibler chaque dernier élément d’un type donné, pour son parent.</p>\n<pre><code class=\"language-css\">div p:last-of-type {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;h2&gt;Ce titre ne sera pas affecté&lt;/h2&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"-only-of-type\">:only-of-type</h3>\n<p>Un peu plus particulier cette-fois ci, cette pseudo-classe permet d’affecter un élément qui est le seul de son type par rapport à son parent.</p>\n<pre><code class=\"language-css\">div p:only-of-type {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div&gt;\n    &lt;h2&gt;Ce titre ne sera pas affecté&lt;/h2&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;h2&gt;Ce titre ne sera pas affecté&lt;/h2&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"-only-child\">:only-child</h3>\n<p>Comme son nom l’indique, cette pseudo-classe n’agit que sur un élément qui est le seul enfant de son parent.</p>\n<pre><code class=\"language-css\">div p:only-child {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"-nth-child-n-\">:nth-child(n)</h3>\n<p>Un peu particulier, cette pseudo-classe permet de cibler un élément qui est le _n_ième enfant de son parent. Par exemple, si on veut choisir le second élément d’une liste :</p>\n<pre><code class=\"language-css\">li:nth-child(2) {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;ul&gt;\n    &lt;li&gt;Cet élément ne sera pas affecté&lt;/li&gt;\n    &lt;li&gt;Cet élément sera affecté&lt;/li&gt;\n    &lt;li&gt;Cet élément ne sera pas affecté&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<h3 id=\"-nth-last-child-n-\">:nth-last-child(n)</h3>\n<p>Même chose que précédement, mais cette fois le décompte de <em>n</em> commence en partant du dernier enfant. Par exemple, si on veut cibler l’avant-dernier élément d’une liste :</p>\n<pre><code class=\"language-css\">li:nth-last-child(2) {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;ul&gt;\n    &lt;li&gt;Cet élément ne sera pas affecté&lt;/li&gt;\n    &lt;li&gt;Cet élément ne sera pas affecté&lt;/li&gt;\n    &lt;li&gt;Cet élément ne sera pas affecté&lt;/li&gt;\n    &lt;li&gt;Cet élément sera affecté&lt;/li&gt;\n    &lt;li&gt;Cet élément ne sera pas affecté&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<h3 id=\"-nth-of-type-n-\">:nth-of-type(n)</h3>\n<p>Similaire à <code>:nth-child(_n_)</code> , celle-ci permet de cibler le _n_ième enfant d’un type défini. Par exemple, si on veut choisir le troisième paragraphe :</p>\n<pre><code class=\"language-css\">p:nth-of-type(3) {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Sachant qu&#39;il s&#39;agit de type et non de nombre d’enfant, on peut s&#39;en servir même lorsqu&#39;il y a des balises entre deux :</p>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;span&gt;balise&lt;/span&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;span&gt;balise&lt;/span&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;span&gt;balise&lt;/span&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"-nth-last-of-type-n-\">:nth-last-of-type(n)</h3>\n<p>Cette fois-ci, vous pouvez cibler le dernier d’un type, en partant du dernier de ce même type. Par exemple pour un avant-dernier paragraphe :</p>\n<pre><code class=\"language-css\">p:nth-last-of-type(3) {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Sachant qu&#39;il s&#39;agit de type et non de nombre d’enfant, on peut s&#39;en servir même lorsqu&#39;il y a des balises entre deux :</p>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;span&gt;balise&lt;/span&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;span&gt;balise&lt;/span&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n    &lt;span&gt;balise&lt;/span&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"-not-selecteur-\">:not(selecteur)</h3>\n<p>Un peu particulier encore une fois, cette pseudo-classe permet d’affecter tout élément qui n’est pas du type spécifié. Un exemple :</p>\n<pre><code class=\"language-css\">:not(p) {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Cet élément sera affecté&lt;/li&gt;\n        &lt;li&gt;Cet élément sera affecté.\n            &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"-empty\">:empty</h3>\n<p>Une pseudo-classe toute simple qui permet de cibler tout élément qui n’a aucun enfant.</p>\n<pre><code class=\"language-css\">p:empty {\n    color: red\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément sera affecté&lt;/p&gt;\n    &lt;p&gt;Cet élément ne sera pas affecté\n        &lt;span&gt;car il contient un enfant&lt;/span&gt;\n    &lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"-enabled\">:enabled</h3>\n<p>Celle-ci permet de cibler tout élément qui est, soit par défaut, soit précisément via html, défini comme &quot;actif&quot;. C&#39;est surtout utile pour les éléments de formulaire.</p>\n<p><del>~input:enabled {\n    background: white\n}</del>~</p>\n<pre><code class=\"language-markup\">&lt;!-- cet élément sera affecté --&gt;\n&lt;input type=&quot;text&quot; /&gt;\n&lt;!-- cet élément ne sera pas affecté, il est désactivé --&gt;\n&lt;input type=&quot;text&quot; disabled=&quot;disabled&quot; /&gt;\n</code></pre>\n<h3 id=\"-disabled\">:disabled</h3>\n<p>À l’inverse, cette pseudo-classe permet de cibler un élément défini comme désactivé.</p>\n<pre><code class=\"language-css\">input:disabled {\n    background: grey\n}\n</code></pre>\n<pre><code class=\"language-markup\">&lt;!-- cet élément ne sera pas affecté, il n’est pas désactivé --&gt;\n&lt;input type=&quot;text&quot; /&gt;\n&lt;!-- cet élément sera affecté, il est désactivé --&gt;\n&lt;input type=&quot;text&quot; disabled=&quot;disabled&quot; /&gt;\n</code></pre>\n<h2 id=\"conclusion-\">Conclusion… ?</h2>\n<p>Tout en essayant d’être complet, je n’ai pas été exhaustif. Le CSS3 est une norme loin d’être terminée, qui évolue encore, et qui pourrait voir d’autres éléments s&#39;ajouter par la suite. Comme toujours, n’oubliez pas qu&#39;on peut toujours mixer plusieurs sélecteurs !</p>\n"},{"title":"Des barres de progression toutes simples en CSS","author":"Emmanuel B.","date":"2014-02-06 04:37:43","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"des-barres-de-progression-toutes-simples-en-css","content":"<p>J’ai reçu récemment une demande d’explication sur ma méthode pour créer les barres de progression sur mon site (sous les compétences, en page d’accueil).</p>\n<p>Bien que tout simple, je me suis dit que ça pourrait intéresser du monde. En avant guinguette !</p>\n<h2 id=\"le-html\">Le html</h2>\n<p>Alors on va la faire simple. Pour moi j’ai utilisé une liste non-ordonnée html, simplement parce qu&#39;il s&#39;agissait d’une liste de compétences (Ouais, c&#39;est pas compliqué le html, voyez ?). Inutile de préciser que ça marcherait avec n’importe quoi. Aussi, pour l’exemple, je vais utiliser de bonnes vieilles <code>div</code>.</p>\n<p>&lt;div class=&quot;barre&quot; data-length=&quot;30&quot;&gt;&lt;/div&gt;</p>\n<p>&lt;div class=&quot;barre&quot; data-length=&quot;20&quot;&gt;&lt;/div&gt;</p>\n<p>&lt;div class=&quot;barre&quot; data-length=&quot;50&quot;&gt;&lt;/div&gt;</p>\n<p>&lt;div class=&quot;barre&quot; data-length=&quot;80&quot;&gt;&lt;/div&gt;</p>\n<p>&lt;div class=&quot;barre&quot; data-length=&quot;40&quot;&gt;&lt;/div&gt;~~~</p>\n<h3 id=\"data-length-\">Data-length ?</h3>\n<p>Alors certains se posent peut-être une question intéressante, par exemple &quot;mais kaisseucé ?&quot;.</p>\n<p>L’attribut <code>data-</code> permet de stocker des données sur des éléments, tout simplement. <a href=\"http://www.alsacreations.com/article/lire/1397-html5-attribut-data-dataset.html\">D’autres en parlent bien mieux que moi</a> !</p>\n<p>C&#39;est arbitraire, j’aurais aussi bien pu utiliser une classe, mais je trouvais ça tellement plus <em>pimp</em> d’utiliser de beaux <code>data-</code> que j’y ai été à cœur joie. Dans les faits, ça se prête très bien au CSS avec les <a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-les-selecteurs-partie1-css2/#selecteur-attribut\">sélecteurs d’attributs</a> (va lire mon tutoriel sur les sélecteurs, va !).</p>\n<h2 id=\"le-css\">Le CSS</h2>\n<p>Ma foi, ce n’est pas plus compliqué que ça. On va utiliser le positionnement relatif et absolu, et le pseudo-élément :after (se référer au tutoriel sur les sélecteurs, encore une fois).</p>\n<p>On commence par donner le style de fond à la <code>div</code>, ainsi qu&#39;un positionnement relatif pour pouvoir ensuite positionner le pseudo-élément.</p>\n<pre><code class=\"language-css\">.barre {\n    width: 300px;\n    background: grey;\n    border: 2px solid grey;\n    position: relative;\n    height: 10px;\n}\n</code></pre>\n<p>Maintenant, on donne un style au pseudo-élément, qui devient notre barre &quot;intérieure&quot; :</p>\n<pre><code class=\"language-css\">.barre:after {\n    content: &quot;&quot;\n    position: absolute;\n    background: orange;\n    left: 0;\n    top: 0;\n    bottom: 0;\n}\n</code></pre>\n<p>Reste ensuite à leur attribuer une largeur, en fonction de la valeur de notre <code>data-length</code>. Je ne vous mets que les dizaines (parce que ça n’a pas beaucoup d’intérêt de faire plus, à mon sens ; et aussi parce que j’ai la flemme de me cogner les 90 autres valeurs.).</p>\n<pre><code class=\"language-css\">.barre[data-length=&quot;10&quot;]:after { width: 10% }\n.barre[data-length=&quot;20&quot;]:after { width: 20% }\n.barre[data-length=&quot;30&quot;]:after { width: 30% }\n.barre[data-length=&quot;40&quot;]:after { width: 40% }\n.barre[data-length=&quot;50&quot;]:after { width: 50% }\n.barre[data-length=&quot;60&quot;]:after { width: 60% }\n.barre[data-length=&quot;70&quot;]:after { width: 70% }\n.barre[data-length=&quot;80&quot;]:after { width: 80% }\n.barre[data-length=&quot;90&quot;]:after { width: 90% }\n.barre[data-length=&quot;100&quot;]:after { width: 100% }\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Et voilà ! On peut imaginer des animations pour remplir les barres petit à petit, récupérer la valeur de data-length en js dynamiquement et tout ça, mais c&#39;était juste pour expliquer le principe.</p>\n<p>Pour voir le tout en action, vous pouvez aller sur <a href=\"http://codepen.io/EmmanuelB/pen/nwivz\" title=\"CodePen\">mon CodePen</a>.</p>\n"},{"title":"Windows 8 est très bien !","author":"Emmanuel B.","date":"2014-02-08 08:23:18","tags":["windows"],"categories":["Diatribes"],"template":"post.vue","basename":"windows-8-est-tres-bien","content":"<p>Boum, ma gueule ! Oui, j’attaque directement par la conclusion : j’ai toujours été mauvais en dissertations.</p>\n<p>Plus sérieusement, très régulièrement il m&#39;arrive sur de très nombreux forums de voir différentes aberrations sur la dernière mouture de Windows. Affirmations sorties du chapeau, croyances erronées véhiculées par les médias… Et si on y jetais un coup d’œil ?</p>\n<h2 id=\"le-cas-vista\">Le cas Vista</h2>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/02/windows-vista-logo.png\" alt=\"Windows vista\"></p>\n<p>Avant de commencer avec le cas Windows 8, je vais d’abord me pencher sur Vista et m&#39;atteler tout d’abord à détruire un bon gros à-priori (à tel point que j’ai même la prétention de l’écrire en gras !) : <strong>Vista était un très bon OS</strong>.</p>\n<p>Il n’a pas rencontré un succès marketing, c&#39;est vrai. C&#39;est le cas de beaucoup de bons produits/films/artistes/groupes musicaux/autres, et inversement, beaucoup de sombre nullités (c&#39;est pour rester poli) ont droit à une adoration médiatique surcotée et totalement injustifiée. Et si les ventes n’étaient pas au rendez-vous, c&#39;est pour quelques raisons que nous allons voir tout de suite.</p>\n<h3 id=\"les-incompatibilit-s\">Les incompatibilités</h3>\n<p>Le premier problème qui a été relevé, c&#39;était de &quot;nombreuses&quot; incompatibilités matérielle et logicielles. En informatique, les technologies évoluent très vite, et Windows XP était sorti en 2001 avec une compatibilité pour du matériel antérieur. Évidemment, il a fallu faire des choix : rester en arrière et freiner l’avancée technologique, ou bien forcer un peu les choses. Le résultat fut un mélange des deux. Les promesses de ce qui devait alors être <strong>Windows Longhorn</strong> n’ont pas pu être toutes respectées, mais Vista partait néanmoins d’une toute nouvelle version du Noyau NT (version 6.0). De fait, les constructeurs de matériel devaient s&#39;adapter à ce nouvel environnement et développer de nouveaux drivers.</p>\n<p>Certains (nVidia, par exemple) se sont empressés de sortir des pilotes compatibles dès les premières <em>developer preview</em> afin d’être prêts lors de la sortie finale, alors que d’autres n’ont pas daigné se sortir les doigts du postérieur (ATI ou pire, Creative Labs qui a tout simplement longtemps refusé de rendre compatible son logiciel pour cartes son X-Fi). Résultat : les forums pollués de &#39;Bouuh, mon matériel ne marche pas sur Vista, c&#39;est un OS de merde&#39;. Et voilà comment on fait une fausse réputation à un OS, alors que Vista embarquait, tout comme 7 et 8, un paquet incroyable de drivers et de jeux d’instructions de tous types afin d’avoir une compatibilité bien plus étendue que celle d’XP.</p>\n<h3 id=\"le-besoin-de-mat-riel-puissant\">Le besoin de matériel puissant</h3>\n<p>Il y avait aussi une composante matérielle à prendre en compte. L’évolution du PC était au point mort depuis un bon moment. Comme XP tournait très bien sur de vieilles machines et que le 64bits n’était pas d’actualité (sachant qu&#39;un Windows 32bits ne peut gérer - théoriquement - que 3,25Go de mémoire vive), il n’y avait pas de besoins supplémentaires. De fait, les ordinateurs en vente dans le commerce stagnaient depuis un bon moment à 512Mo de RAM en moyenne, et les processeurs double-cœur n’étaient qu&#39;un jouet haut-de-gamme pour geeks avides de puissance.</p>\n<p>Oui mais voilà, Vista avait besoin de plus de ressources, bien plus. Alors il a fallu changer tout ça, mettre un bon coup de pied dans la fourmilière, détartrer les usines et remettre les ingénieurs au boulot. En moins d’un an, les PC du commerce sont passés en moyenne à 2Go de RAM et le Core 2 Duo d’Intel était devenu la norme, le tout sans augmentation drastique de prix pour le consommateur. Si aujourd’hui vous pouvez faire tourner votre 7 adoré de manière fluide c&#39;est parce que Vista est arrivé comme un patron, a posé ses bollocks (ou ses ovaires, personne ne sait si Windows est un mâle ou une femelle) sur le bureau. Ouais.</p>\n<p>De plus, il avait le bon goût d’être disponible en 32bits et en 64bits. Si la seconde version a mis plus de temps à trouver son intérêt auprès de l’utilisateur final, ça a été une grosse avancée pour les constructeurs évoqués plus haut, qui se sont réellement penchés en masse sur le développement de drivers 64bits ; ce qui a largement servi à 7 pour s&#39;installer confortablement, une fois le terrain bien préparé.</p>\n<h4 id=\"pour-ces-deux-cas-ce-n-tait-pas-la-faute-de-microsoft-\">Pour ces deux cas, ce n’était PAS la faute de Microsoft.</h4>\n<p>La vraie grosse erreur de la firme, c&#39;est d’autoriser la labellisation &quot;Vista Ready&quot; de machines trop peu puissantes, ce afin d’améliorer les ventes. C&#39;est pour cette raison que Vista est apparu lourd, gourmand et lent.</p>\n<h3 id=\"avanc-es-de-vista\">Avancées de Vista</h3>\n<p>Il n’empêche que Vista a apporté, avec NT6, de nombreuses améliorations sur tous les fronts : gestion native de l’IPv6, l’&lt;abbr lang=&quot;en&quot; title=&quot;User Account Control&quot;&gt;UAC&lt;/abbr&gt;, &lt;abbr lang=&quot;en&quot; title=&quot;Windows Presentation Foundation&quot;&gt;WPF&lt;/abbr&gt; et &lt;abbr lang=&quot;en&quot; title=&quot;Windows Communication Foundation&quot;&gt;WCF&lt;/abbr&gt;, gestion des profils IIS, architecture DotNET, reconnaissance vocale native, création de DVD, <em>versionning</em> de fichiers, chiffrement des données, synchronisation des périphériques, ReadyBoost, outils de réparation au démarrage, contrôle parental, et j’en passe des tout aussi biens.</p>\n<h2 id=\"l-arriv-e-de-7\">L’arrivée de 7</h2>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/02/windows-7-logo.png\" alt=\"Windows 7\"></p>\n<p>En voilà un Windows qu&#39;il a été bien accueilli ! C&#39;est même le premier Windows à l’être. Ses ventes exceptionnelles sont un record absolu pour Microsoft : 100 millions de licences écoulées en 6 mois, 525 millions en deux ans. À titre de comparaison, Windows XP a s&#39;est écoulé à 20 millions d’unités en 6 mois, et 400 millions en 6 ans.</p>\n<p>Pourtant, il n’est <strong>qu&#39;une évolution de Vista</strong>, puisqu&#39;il est essentiellement basé dessus (Noyau NT6.1). Ce n’est en somme qu&#39;un gros patch contenant quelques optimisations et la nouveauté principale : la &quot;SuperBar&quot;, ou la barre des tâches sur laquelle on peut épingler ses programmes. Au rayon des autres ajouts, on peut noter la prise en charge GPS, gestion des périphériques tactiles et de nouveaux raccourcis claviers.</p>\n<p>C&#39;est quand même bien moins fourni que Vista… Normal, puisque celui-ci a déjà fait tout le boulot.</p>\n<h2 id=\"bonjour-windows-8\">Bonjour Windows 8</h2>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/02/windows-8-logo.png\" alt=\"Windows 8\"></p>\n<p>C&#39;est donc naturellement que Windows 7 se devait d’avoir un successeur. À défaut de pouvoir réitérer l’exploit commercial de 7 (en sachant que le marché du PC s&#39;essouffle désormais face aux smartphones et aux tablettes), il s&#39;appuie toujours sur les acquis précédents (Noyau NT6.2 puis 6.3 pour Windows 8.1). On trouve encore quelques nouveautés et optimisations : prise en charge native de l’USB3, des téléviseurs 3D, montage natif des images ISO, interface ruban dans l’explorateur, meilleure gestion des transferts de fichiers, possibilité de rétablir les réglages d’usine, chiffrement des disques, meilleur <em>versionning</em>, gestion plus avancée du multi-écrans, sécurité accrue, nouveau gestionnaire de tâches, optimisation du démarrage, meilleur accès au matériel, synchronisation des paramètres, meilleure utilisation des profils…</p>\n<h3 id=\"et-modernui-\">Et ModernUI.</h3>\n<p>Et ModernUI, oui. Anciennement baptisé Metro, cette interface fortement décriée est sans doute la raison principale du rejet des utilisateurs : &#39;C&#39;est plus comme avant !&#39;</p>\n<p>Comme d’habitude, les gens s&#39;empressent de tirer des conclusions hâtives, relayées par des médias dont ce n’est pourtant pas le domaine mais avides de ne pas rater le dernier scandale à la mode ; on peut lire ça et là que le bureau n’existe plus, que Windows 8 est uniquement pensé tactile. Avant même que l’OS ne soit sorti et que quiconque ait pu l’essayer, les jeux sont faits. Avoir une bonne réputation prend des années, une mauvaise prend cinq minutes. La &quot;disparition&quot; du menu démarrer trouble au plus haut point les utilisateurs, son remplacement par ModernUI dérange.</p>\n<p>Comme pour Windows Vista, les troupeaux de réfractaires au moindre changement en font une publicité négative qui cartonne, avec des arguments aussi recherchés que &#39;Ouin, on peut pas s&#39;en servir au clavier et à la souris&#39; (Faux), &#39;Ouin, il faut 15 clics de plus pour éteindre son ordinateur&#39; (Faux), &#39;Ouin il est trop instable&#39; (Faux), et autres déballage de mauvaise foi afin de justifier leur dégoût, comme si le simple fait de dire &quot;je n’aime pas&quot; n’était pas suffisant et qu&#39;il leur fallait prouver qu&#39;ils ont raison de ne pas aimer.</p>\n<p>ModernUI est tout une interface, mais je ne m&#39;étendrais pas dessus ; je m&#39;en tiendrais à sa fonction de menu démarrer, pour des raisons de flemme et de sujet.</p>\n<h2 id=\"les-arguments-d-biles\">Les arguments débiles</h2>\n<p>Je lis tellement de bêtises sur le sujet que je ne peux résister à l’envie d’étaler devant vos yeux ébaubis une liste des arguments fallacieux, des trésors de mauvaise foi et des idées reçues totalement fausses qui reviennent le plus souvent :</p>\n<h3 id=\"-le-menu-d-marrer-disparu-\">&quot;Le menu démarrer à disparu&quot;</h3>\n<p>Non. Non, non, non. Qu&#39;Est-ce que le menu démarrer ? Sous Windows Vista/7, c&#39;est une interface, accessible en cliquant en bas à gauche (par défaut) de l’écran (ou en appuyant sur la touche <code>Windows</code>), qui :</p>\n<ol>\n<li>Liste les applications épinglées par l’utilisateur, afin de les rendre accessibles d’un clic.</li>\n<li>Donne accès à un moteur de recherche global, accessible en cliquant dessus ou en écrivant directement l’objet de sa recherche.</li>\n<li>Donne accès, au moyen d’un clic sur &quot;Tous les programmes&quot;, à la liste des programmes installés sur le PC.</li>\n</ol>\n<p><strong>Et ModernUI, qu&#39;Est-ce que c&#39;est ?</strong> C&#39;est une interface, accessible en cliquant en bas à gauche (par défaut) de l’écran (ou en appuyant sur la touche <code>Windows</code>), qui :</p>\n<ol>\n<li>Liste les applications épinglées par l’utilisateur, afin de les rendre accessibles d’un clic.</li>\n<li>Donne accès à un moteur de recherche global, accessible en cliquant dessus ou en écrivant directement l’objet de sa recherche.</li>\n<li>Donne accès, au moyen d’un clic sur une icône, à la liste des programmes installés sur le PC.</li>\n</ol>\n<p>Ben merde alors, en fait c&#39;est tout pareil ! Et oui, ami lecteur : le menu démarrer n’a pas disparu, ModernUI <strong>EST</strong> le menu démarrer !</p>\n<h3 id=\"-windows-8-n-est-pas-ergonomique-\">&quot;Windows 8 n’est pas ergonomique&quot;</h3>\n<p><em>O, rly</em> ? Pourtant, ce n’est jamais que Windows 7. Exactement pareil, avec un bureau et des icones dessus, une barre des tâches épinglable, l’heure en bas à droite, et des fenêtres qui se baladent. Et si vous mettez ma parole en doute, voici une <a href=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/02/w8-screen.jpg\" title=\"Windows 8 Bureau\">capture d’écran de de mon bureau</a> &lt;small&gt;(en petit, parce que quoi, vous voulez pas regarder mon dossier porno aussi non ?!)&lt;/small&gt;. En quoi est-ce que ça change ? &quot;Les menu en ruban&quot; diront certains. Sauf que, en fait, cet affichage permet de gérer la plupart des options de fenêtres disponible auparavant via <em>&quot;Fichier&quot;</em>,<em> &quot;Édition&quot;</em>, <em>&quot;Affichage&quot;</em>, sans pour autant avoir à ouvrir une multitude de fenêtres différentes. Ça s&#39;appelle donc une amélioration, puisque le gain de temps, par exemple pour afficher les fichiers masqués ou les extensions, passe de cinq clics à deux (oui parce que vous allez le voir, le clic est très important pour le détracteur de Windows 8).</p>\n<p>Peut-être parle-t-on alors de l’interface ModernUI ? Ça tombe bien, le point précédent montrait que l’utilisation &quot;basique&quot; est absolument identique à celle du menu démarrer. Pas davantage de clics, et même moins dans le cas de la liste des programmes puisqu&#39;on n’a pas à ouvrir de sous-dossiers ici. Et comme le réfractaire est de mauvaise foi, il s&#39;acharnera à prouver la contre-intuitivité des applications de ModernUI, qu&#39;il ne va pourtant pas utiliser puisqu&#39;il ne veut qu&#39;un menu démarrer. Mesquin, va !</p>\n<p>C&#39;est cependant le point qui serait le plus critiquable, puisque ModernUI est loin d’être arrivé à maturité…</p>\n<h3 id=\"-windows-8-est-instable-\">&quot;Windows 8 est instable&quot;</h3>\n<p>L’argument de mauvaise foi par excellence, avancé sans réelle recherche (à part &#39;Mon ordi a planté, c&#39;est la preuve !&#39;) et qui contredit les <em>benchs</em> à ce sujet. XP a été décrié pour son instabilité notoire jusqu&#39;au premier (voire second) Service Pack. Vista a lui aussi connu quelques problèmes. Windows 7 était un modèle de stabilité, basé sur la solidité acquise par Vista. 8 s&#39;appuie sur 7. Rien de plus à dire…</p>\n<h3 id=\"-windows-8-est-bourr-d-incompatibilit-s-\">&quot;Windows 8 est bourré d’incompatibilités&quot;</h3>\n<p>Comme je l’ai déjà évoqué tantôt, Windows Vista, 7 et 8 contiennent tout un tas de pilotes et d’instructions afin de garantir une compatibilité maximale. Le reste, c&#39;est aux constructeurs / développeurs de le faire. Du reste, ce qui est compatible Windows 7 est <em>foncièrement</em>  compatible Windows 8 (Même noyau !) ; si vous rencontrez une incompatibilité quelconque, il faut creuser pourquoi au lieu d’incriminer l’OS. C&#39;est probablement la faute d’un drivers que vous auriez oublié d’installer…</p>\n<p>À titre d’exemple (bien qu&#39;une seule personne ne soit pas représentative, j’en conviens), depuis septembre 2011 (Date de sortie de la version <em>Developer Preview</em>), je n’ai rencontré <strong>aucune</strong> (j’insiste.) incompatibilité avec mes nombreux logiciels que sont la suite quasi-complète d’Adobe (Photoshop, InDesign, Illustrator, Dreamweaver, Premiere Pro, Captivate, After Effects…), 3D Studio Max, Zbrush, WinSCP, Visual Studio, uWamp, SmartGit, Reaper, Guitar Pro, Pod Farm, la suite Office (Word, Excel, Powerpoint, Outlook) ou la majorité de mes quelques 90 jeux sur Steam. AUCUN.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Je parle bien ici de compatibilité logicielle. Les drivers (ou pilotes), sont la jonction entre le matériel (langage machine) et les applications qui tournent sur l’OS ; les deux ne sont pas de même niveau, et les seconds se reposent sur les premiers. C&#39;est pourquoi il est important que les constructeurs travaillent au développement de drivers pour chaque système ; c&#39;est aussi pourquoi certaines applications peuvent ne pas fonctionner, dépendantes d’une ressource de plus bas niveau.&lt;/div&gt;\n\n</p>\n<h3 id=\"-un-windows-sur-deux-est-mauvais-\">&quot;Un Windows sur deux est mauvais&quot;</h3>\n<p>Un vieux <em>meme</em> débile d’internet, récurrent, éculé, et faux. Faux car tout d’abord, il &quot;oublie&quot; des versions de Windows comme ça l’arrange pour que le petit tableau tienne la route. Faux ensuite parce que, comme je me suis tué à l’expliqué en début de ce long article, si 7 est un bon OS, Vista et 8 aussi puisque ce sont foncièrement les mêmes.</p>\n<h3 id=\"-ils-sont-d-j-en-train-de-travailler-sur-windows-9-preuve-qu-ils-veulent-oublier-8-rapidement\">&quot;Ils sont déjà en train de travailler sur Windows 9, preuve qu&#39;ils veulent oublier 8 rapidement</h3>\n<p>N’importe quoi. Tous les Windows, à l’exception de Windows XP qui est resté cinq ans sans successeur, sont sortis avec deux à trois ans d’écart.</p>\n<h3 id=\"-le-march-du-pc-est-en-chute-libre-depuis-la-sortie-de-8-c-est-la-preuve-\">&quot;Le marché du PC est en chute libre depuis la sortie de 8, c&#39;est la preuve !&quot;</h3>\n<p>Non, c&#39;est la preuve que le marché des tablettes a trouvé sa cible. Les bonnes gens ont claqué 400 à 600 boules pour un smartphone qui leur permet de jouer à des petits jeux sans avoir à installer les saletés vérolées de Zinga. Ils peuvent avoir accès à leurs mails, à Facebook, aux images rigolotes, ils peuvent communiquer librement avec Skype et les SMS/MMS qui sont devenus gratuits et illimités, ils ont la vidéoconférence dessus et plus d’outils qu&#39;ils n’en utiliseront jamais pour prendre, traiter et partager leurs photos et vidéos. Les plus <em>pimp</em> d’entre eux ont même acheté une tablette à 600 baluches pour faire la même chose sur un écran plus grand. Dans ce cadre là, sachant que pour une grande majorité leur utilisation d’un PC se limite à ces utilisations, au nom de quoi est-ce qu&#39;ils iraient jeter 700€ supplémentaires pour un ordinateur ?</p>\n<p>Le marché du PC perd du terrain face au mobile ; ça ne veut pas dire que les ventes chutent mais simplement que les parts de marché changent. Si en 2010 il s&#39;est vendu 250 millions de PC (chiffres au hasard !) contre 10 millions de tablettes, et qu&#39;en 2012 il s&#39;est vendu 500 millions de PC et 300 millions de tablettes, la part de marché du PC a fortement reculé ; pour autant, les ventes ont grimpé quand même. C&#39;est dingue ce qu&#39;on peut faire avec des pourcentages (et c&#39;est tout aussi dingue ce que les journalistes arrivent à leur faire dire !).</p>\n<p>Ceux qui privilégient le bon vieil ordinateur sont ceux qui en ont un réel besoin (travail, jeux…) et ceux qui veulent rester dessus par confort ou habitude. Et pour ceux qui veulent de l’entre-deux sur un peu tout, il y a les smartphones un peu tablettes (les phablettes), et les tablettes un peu PC (hybrides divers) ; deux tableaux sur lesquels joue Microsoft avec Windows Phone 8, Windows RT, et Windows 8 (bientôt unifiés).</p>\n<p>Tout ça en sachant que le marché du PC (j’englobe les Macs avec) a eu un gros boum récemment, et que beaucoup de monde en possède donc encore un presque neuf, ou à défaut, qui marche encore très bien ; là encore quel besoin d’en racheter un maintenant ? C&#39;est couillon à dire, mais si aujourd’hui même chaque personne dans le monde achetait un ordinateur, ledit marché du PC serait en chute libre demain et pour au moins plusieurs mois. C&#39;est juste mathématique.</p>\n<p>Alors que vient foutre Windows 8 là-dedans ? OUI, C&#39;EST ÇA : rien du tout.</p>\n<h3 id=\"-ils-l-ont-dit-la-t-l-microsoft-va-mal-\">&quot;Ils l’ont dit à la télé, Microsoft va mal !&quot;</h3>\n<p>Passer de 13 milliards de chiffre d’affaires à 70 milliards en moins de dix ans… Je voudrais bien aller aussi mal, et de nombreuses entreprises aussi !</p>\n<h3 id=\"-il-a-t-pens-pour-le-tactile-alors-c-est-la-plaie-avec-une-souris-\">&quot;Il a été pensé pour le tactile, alors c&#39;est la plaie avec une souris&quot;</h3>\n<p>Sérieusement ? Si taper sur un bon carré bien <em>fat</em> avec vos gros doigts boudinés et graisseux est possible et facile alors comment, par Jupiter et ses roubignoles, serait-il possible de ne pas réussir à cliquer dessus avec le pointeur ultra-précis de votre foutue souris <em>gamer</em> laser à 3000 dpi ?! J’attends encore des exemples concrets d’utilisation difficile, parce que je n’en ai encore rencontré aucun. Jamais quelqu&#39;un qui m&#39;a sorti cet &quot;argument&quot; n’a été fichu de me donner le moindre petit cas complexe d’utilisation à me mettre sous la dent.</p>\n<p>Inadapté, ça se discute. Difficile, non.</p>\n<h3 id=\"-il-se-vend-mal-c-est-la-preuve-\">&quot;Il se vend mal, c&#39;est la preuve !&quot;</h3>\n<p>Jusqu&#39;à maintenant et sur une même échelle de temps, il se vend mieux que Windows XP et Windows Vista en leur temps. Encore une fois, 7 est un record et un cas d’école, pourtant 8 n’est pas loin derrière : 240 Millions de licences écoulées en 12 mois pour le premier, 200 millions en 15 mois pour le second. Un échec cuisant, en effet…</p>\n<h3 id=\"-il-faut-plus-de-temps-clics-pour-faire-des-choses-simples-\">&quot;Il faut plus de temps/clics pour faire des choses simples&quot;</h3>\n<p>Mon préféré. C&#39;est bien connu, les feignasses qui passent onze heures par jour sur Facebook sont très économes du clic, c&#39;est tellement important de gagner une millisecondes et d’économiser un mouvement de doigt ! Non, ne riez pas : un clic perdu pour faire une tâche, c&#39;est un clic qui n’est pas utilisé pour chercher du porno ou du lolcat ! C&#39;est über-important !</p>\n<p>Je pourrais en rajouter davantage pour montrer à quel point la réflexion est stupide, mais soit. Observons &lt;del&gt;deux papillons&lt;/del&gt; les procédures standards sous Windows 7, comptons le nombre d’actions et de clics, et comparons avec Windows 8.</p>\n<ul>\n<li>Lancer un programme du menu démarrer.</li>\n</ul>\n<p><strong>Windows 7 :</strong></p>\n<ol>\n<li>Amener son curseur en bas à gauche de l’écran</li>\n<li>Cliquer</li>\n<li>Diriger sa souris vers un programme épinglé</li>\n<li><p>Cliquer\n<strong>Windows 8 :</strong></p>\n</li>\n<li><p>Amener son curseur en bas à gauche de l’écran</p>\n</li>\n<li>Cliquer</li>\n<li>Diriger sa souris vers un programme épinglé</li>\n<li>Cliquer\n<strong>Verdict :</strong> Stricte égalité (je déconnais pas quand je disais que c&#39;était pareil).</li>\n</ol>\n<p>NB: Dans les deux cas, on peut aussi appuyer sur la touche &lt;kbd&gt;Windows&lt;/kbd&gt; et enlever un clic et un déplacement de souris !</p>\n<ul>\n<li>Lancer un programme dans la liste des programmes installés\n<strong>Windows 7 :</strong></li>\n</ul>\n<ol>\n<li>Amener son curseur en bas à gauche de l’écran</li>\n<li>Cliquer</li>\n<li>Diriger sa souris vers &quot;Tous les programmes&quot;</li>\n<li>Cliquer</li>\n<li>Scroller dans la liste des dossiers pour trouver le dossier</li>\n<li>Déplacer le curseur vers le dossier du programme</li>\n<li>Cliquer pour ouvrir le dossier</li>\n<li>Déplacer le curseur sur l’icone du programme</li>\n<li><p>Cliquer sur le programme\n<strong>Windows 8 :</strong></p>\n</li>\n<li><p>Amener son curseur en bas à gauche de l’écran</p>\n</li>\n<li>Cliquer</li>\n<li>Diriger sa souris vers &quot;Tous les programmes&quot;</li>\n<li>Cliquer</li>\n<li>Déplacer sa souris vers le programme</li>\n<li>Cliquer sur le programme\n<strong>Verdict :</strong> Gros avantage Windows 8.</li>\n</ol>\n<ul>\n<li>Éteindre le PC (oui, il y a des gens qui me soutiennent que c&#39;est plus compliqué sur W8 !)\n<strong>Windows 7 :</strong></li>\n</ul>\n<ol>\n<li><p>Appuyer sur le bouton Power\n<strong>Windows 8 :</strong></p>\n</li>\n<li><p>Appuyer sur le bouton Power\n<strong>Verdict :</strong> <em>Are you fucking kiddin’ me ?!</em></p>\n</li>\n</ol>\n<ul>\n<li>Redémarrer le PC (ou éteindre via le menu, mettre en veille, etc)\n<strong>Windows 7 :</strong></li>\n</ul>\n<ol>\n<li>Amener son curseur en bas à gauche de l’écran</li>\n<li>Cliquer</li>\n<li>Diriger sa souris vers la petite flèche à coté de &quot;Arrêter&quot;</li>\n<li>Cliquer</li>\n<li>Déplacer sa souris vers la fenêtre de choix</li>\n<li><p>Cliquer sur le choix\n<strong>Windows 8 :</strong></p>\n</li>\n<li><p>Amener son curseur en bas à gauche de l’écran</p>\n</li>\n<li>Cliquer avec le bouton droit (OMG, tant de difficulté dans ta vie !) pour ouvrir un menu contextuel</li>\n<li>Diriger sa souris vers &quot;Arrêter ou se déconnecter&quot;</li>\n<li>Cliquer</li>\n<li>Déplacer sa souris vers le lien du choix</li>\n<li>Cliquer sur le choix\n<strong>Verdict :</strong> Stricte égalité</li>\n</ol>\n<p>Bon, oùkèlé la grosse perte de temps et de clic ?</p>\n<h3 id=\"-on-est-oblig-s-d-avoir-un-compte-microsoft-\">&quot;On est obligés d’avoir un compte Microsoft&quot;</h3>\n<p>Non. On peut utiliser n’importe quel compte, même Yahoo, Gmail ou autre. Le compte Microsoft n’a d’intérêt que pour utiliser le store Microsoft de ModernUI.</p>\n<h3 id=\"-il-faut-obligatoirement-entrer-un-mot-de-passe-\">&quot;Il faut obligatoirement entrer un mot de passe&quot;</h3>\n<p>Inexact. Dans le cas d’un compte local, on peut se connecter sans aucun mot de passe. Dans le cas d’un compte synchronisé, on peut utiliser au choix un mot de passe, un code pin, ou une image-code.</p>\n<h3 id=\"-il-y-a-plein-de-sujets-de-gens-qui-ont-des-probl-mes-avec-sur-les-forums-\">&quot;Il y a plein de sujets de gens qui ont des problèmes avec sur les forums&quot;</h3>\n<p>Ça, c&#39;est ce que j’appelle l’effet Iceberg. Il y a énormément plus de sujets concernant des problèmes avec Windows 7 puisque celui-ci est présent depuis plus longtemps. Donc la plupart des gens qui ont un problème dessus vont trouver une réponse existante à leur question ou leur problème. Il y a encore régulièrement des sujets de problèmes avec d’autres OS, du reste. Mais c&#39;est une partie que les gens occultent souvent.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/02/effeticeberg.jpg\" alt=\"Effet Iceberg\"></p>\n<p>De plus, fait intéressant, quand un utilisateur sous Windows 7 expose un problème quelconque, les autres cherchent des causes probables (défaillance matérielle, drivers, etc.) ; quand un utilisateur sous Windows 8 expose un problème quelconque, les autres mettent directement en cause l’OS, sans chercher de causes. Étrange, hein ?</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;<strong>Edit du 8 février 2014</strong> L’un de mes YouTubers préférés, Bruce Benamran (<a href=\"https://www.youtube.com/channel/UCcziTK2NKeWtWQ6kB5tmQ8Q\" title=\"YouTube\">sa chaine &quot;e-penser&quot;</a>), a publié récemment une vidéo sur <em>l’effet cigogne</em> (ou <em>post hoc ergo propter hoc</em> pour ceux qui aiment se la péter dans diverses langues mortes dont tout le monde se fout), qui décrit assez bien le problème. Outre la vidéo (que je vous mets ci-dessous), j’en profite pour vous recommander sa chaine, elle déboite les rotules à mémé.&lt;/div&gt;\n\n</p>\n<p>&lt;div class=&quot;video&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/lg2hFq9RlYM?rel=0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;\n\n</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Entendons-nous bien, il n’est pas ici question de vanter les mérites de Windows 8 au profit d’un autre OS qui vous conviendrait très bien, que ce soit un Windows, OSX ou une distribution Linux. Si vous êtes satisfait de votre Windows 7, restez-y : il est très bien, tout à fait valable, moderne, puissant et tout ce qu&#39;on veut. Windows 8 est une évolution intéressante, pas une révolution.</p>\n<p>Non, le but est surtout de dire aux gens (enfin, aux deux mecs qui passaient là par hasard) d’arrêter de vouloir le défoncer à tout prix. De montrer à ceux qui le conspuent qu&#39;ils se basent sur du vent et que s&#39;ils avaient fait l’effort d’arrêter leur petit caprice pour tester réellement l’OS, ils ne cracheraient pas dessus à ce point. La preuve la plus flagrante se trouve sur les forums d’informatique : ceux qui ne l’aiment pas sont principalement ceux qui ne l’ont pas ; les autres s&#39;en sont - en très grande majorité - très bien accommodés et le recommandent à tous.</p>\n<p>Pour finir, une petite remarque sur l’accueil des nouvelles versions du système de Microsoft : chaque nouveau Windows est décrié. Windows 7 a été la seule exception depuis Windows 95. À chaque cycle, la rengaine est la même :</p>\n<ul>\n<li><strong>Sortie de Windows XP</strong> → &quot;Bouuh, interface Fisher-Price, rendez-nous les fenêtres grises carrées et le menu démarrer comme 98 !&quot;</li>\n<li><strong>Sortie de Windows Vista</strong> → &quot;Bouuh, interface Bling-bling, rendez-nous les fenêtres bleues et le menu démarrer comme XP !&quot;</li>\n<li><strong>Sortie de Windows 8</strong> → &quot;Bouuh, interface Fisher-Price, rendez-nous les fenêtres transparentes et le menu démarrer comme Vista/7 !&quot;</li>\n</ul>\n<blockquote>\n<p>Ce que les gens détestent de prime abord, ils le défendront bec et ongles lorsqu&#39;on voudra le leur enlever.</p>\n<p>&lt;footer&gt;Ouais, c&#39;est de moi.&lt;/footer&gt;\n\n</p>\n</blockquote>\n<hr>\n<h3 id=\"il-en-parle-aussi\">Il en parle aussi</h3>\n<p>&lt;p&gt;Je viens de trouver grâce à un internaute de <strong>Clubic</strong> une autre diatribe du même acabit, que je note ici pour l’avoir sous la main, et aussi pour vous la faire partager : <a href=\"http://www.geekmag.fr/windows-8-mes-impressions-apres-quelques-mois-dutilisation/\" title=\"GeekMag\">&#39;Windows 8 : mes impressions après quelques mois d’utilisation&#39;</a>. <em>Haters gonna hate</em>.</p>\n"},{"title":"Non, vous ne faites pas du responsive !","author":"Emmanuel B.","date":"2014-03-04 06:38:28","tags":["html/css"],"categories":["Diatribes"],"template":"post.vue","basename":"non-vous-ne-faites-pas-du-responsive","content":"<p>S&#39;il vous est un jour arrivé de dire (ou de penser très fort) : &#39;Moi, mon site est tout en % pour être responsive !&#39;, sachez qu&#39;il se peut que je vous souhaite du mal. Bon allez, peut-être pas jusque-là ; mais quand même, vous vous fourrez profondément les deux pouces dans chaque mirette.</p>\n<p>Alors le responsive, c&#39;est quoi ?</p>\n<h2 id=\"sch-ma-simple\">Schéma simple</h2>\n<p>Je sais qu&#39;un joli dessin est souvent plus éloquent qu&#39;un long discours, cependant j’ai vachement la flemme de dégainer Photoshop pour vous faire une belle vignette explicative. La tartine n’étant pas mon fort (Comme dirait Maxime), je vous le résume avec ce sens de la concision, ce don du raccourci et ce parti-pris de condensé qui sont les plus beaux fleurons de mon style et qui font écrire aux critiques des choses tellement élogieuses sur mon compte que je ne puis manger désormais que dans de la vaisselle d’argent. Adonc (remarquez en sus mon amour pour les tournures de phrase désuètes), voici un schéma bien clair — quoiqu&#39;un peu simpliste — par écrit :</p>\n<ul>\n<li><strong>Responsive</strong> = Adapté à différents supports</li>\n<li><strong>Fluide</strong> = Adapté à différentes tailles d’écran d’un même support</li>\n<li><strong>Pourcentage</strong> = N’a basiquement rien à voir avec la choucroute</li>\n</ul>\n<h2 id=\"le-probl-me-du-pourcentage\">Le problème du pourcentage</h2>\n<p>Je commence par la parenthèse de cet article, à savoir la question du pourcentage dans l’intégration d’un site. Honnêtement, c&#39;est bancal, hasardeux. On ne s&#39;en sert que dans des cas spécifiques, par exemple pour obtenir des colonnes ou grilles fluides comme dans <a href=\"http://getbootstrap.com/\" title=\"Bootstrap 3\">Bootstrap</a>, et quelques autres points.</p>\n<p>Si vous êtes un(e) adepte du <code>width: 100%;</code>, je vous renvoie à l’excellent article de <strong>Raphaël Goetter</strong>, &#39;<a href=\"http://blog.goetter.fr/post/13556565063/width-100-tu-es-le-mal\" title=\"La tête dans le flux !\">Width 100%, tu es le mal</a>&#39;, qui vous expliquera non-seulement le problème inhérent à cette déclaration pourrie, mais également <strong>comment vous en passer au mieux</strong>.</p>\n<h2 id=\"fluide-dis-tu-\">Fluide, dis-tu ?</h2>\n<p>Lorsqu&#39;on fait un site fluide (aussi appelé &quot;liquide&quot; dans certains cas), on fait en sorte que l’interface s&#39;étire, s&#39;adapte en fonction de l’écran du visiteur, afin que l’affichage soit correct aussi bien sur un Netbook riquiqui de 1024 pixels de large que sur mon <strong>grand et beau</strong> 27 pouces. Et quand je dis &quot;correct&quot;, j’entends par là que ce soit bien pensé ! Un site de 2560 pixels d’envergure est purement et totalement illisible et contraindra le malheureux visiteur à effectuer de grands mouvement rotatoires de sa partie têtale et de vous maudire deux-cent fois à chaque fois qu&#39;il perd sa ligne de lecture.</p>\n<h3 id=\"foutez-la-paix-aux-pourcentages\">Foutez la paix aux pourcentages</h3>\n<p>Comme je le disais, pour faire un site qui s&#39;adapte en largeur, on se passe très bien des valeurs en pourcentages (jusqu&#39;à un certain besoin, certes). Les valeur en pixels s&#39;en sortent très bien (L’ami <a href=\"http://clement-galidie.fr/\" title=\"Clément Galidie\">Clément Galidie</a> renchérira — à raison — que les valeurs en <em>em</em> aussi). Penchez-vous sur des propriétés comme <code>min-width</code> et <code>max-width</code> et sur mon autre article &#39;<a href=\"http://www.emmanuelbeziat.com/blog/aligner-trois-colonnes-proprement/\">Aligner trois colonnes proprement</a>&#39; pour vous en convaincre.</p>\n<h2 id=\"le-responsive-c-est-quoi-\">Le responsive, c&#39;est quoi ?</h2>\n<p>D’après la définition donnée plus tôt, le <strong>responsive design</strong> très à la mode ne consiste pas seulement à faire en sorte que votre site s&#39;étire docilement. Quand je parle d’adapter un site à différent supports, il s&#39;agit de le faire <em>vraiment</em>. De s&#39;assurer que la navigation soit possible avec un doigt si on est sur du tactile, sans risquer de cliquer sur trois boutons en même temps ; ou que les boutons de la télécommande permettent de parcourir le site sans difficulté. Faire en sorte que le contenu non-pertinent pour un smartphone soit caché ou supprimé, que les chargements soient optimisés pour des connexions lentes ou limitées de type 3G. Faire en sorte que le tout soit parfaitement utilisable sur le lecteur d’écran d’un visiteur malvoyant.</p>\n<p>Certes, parmi les techniques les plus simples et basiques pour des sites responsive, on trouve les media-queries qui sont très pratiques. Et souvent, on couple ça avec une interface fluide. Mais ce n’est qu&#39;un début.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Maintenant que vous savez de quoi il retourne, vous n’avez plus d’excuse pour sortir des énormités liées au pourcentages et au responsive, et pas davantage pour coder à la truelle. Non mais !</p>\n"},{"title":"Les découvertes du web #2","author":"Emmanuel B.","date":"2014-03-05 10:35:12","tags":["decouvertes"],"categories":["Veille"],"template":"post.vue","basename":"les-decouvertes-du-web-2","content":"<p>Aujourd’hui, deux petits liens bien pratiques !</p>\n<h3 id=\"-dois-je-utiliser-\">&quot;Dois-je utiliser ?&quot;</h3>\n<p>Pour tous vos projets web, pour tous vos clients aux idées farfelues, voici un condensé des mauvaises pratiques à la mode, avec des arguments imparables pour dire <strong>non</strong> : <a href=\"http://www.doisjeutiliser.fr/\">DoisJeUtiliser.fr</a></p>\n<h3 id=\"ridiculement-responsive\">Ridiculement responsive</h3>\n<p>De bien joli boutons qui changent de taille et de forme en fonction du contenu : <a href=\"http://kurtnoble.com/labs/rrssb/\" title=\"Kurt Noble\">Ridiculously Responsive Social Sharing Buttons</a></p>\n<p>C&#39;est tout !</p>\n"},{"title":"Site épinglé avec Internet Explorer","author":"Emmanuel B.","date":"2014-03-12 00:20:28","tags":["html/css","javascript","seo"],"categories":["Tutoriels"],"template":"post.vue","basename":"site-epingle-avec-internet-explorer","content":"<p>Avec Windows 7 est apparue la possibilité d’épingler des programmes dans la barre des tâches. Internet Explorer (depuis la version 9) propose une fonctionnalité d’épinglage avancé : il suffit de déplacer l’onglet d’une page vers la barre des tâches pour y trouver de nouvelles actions possibles. Ces fonctionnalités se paramètrent sur votre propre site, nous allons donc voir comment.</p>\n<p>&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/sites-epingles.jpg\" alt=\"sites-epingles\">&lt;figcaption&gt;Fonctionnalités des sites épinglés&lt;/figcaption&gt;&lt;/figure&gt;\n\n</p>\n<p>Pour la première partie, un minimum de connaissances en HTML est requis. Les parties HTML seront suffisamment détaillées pour que les moins expérimentés s&#39;y retrouvent.</p>\n<p>Pour la seconde partie, facultative, mais non moins intéressante, vous aurez également besoin de bonnes connaissances en Javascript. Ces parties sont réservées à des développeurs plus avancés, et de fait seront plus indicatives qu&#39;explicatives. Il vous faudra donc être familier avec les fonctions et les variables.</p>\n<p>Allons-y.</p>\n<h2 id=\"comment-pingle-t-on-un-site-\">Comment épingle-t-on un site ?</h2>\n<p>Il existe plusieurs façons pour un utilisateur d’épingler un site.</p>\n<p>Dans Windows 7 et 8 (en mode bureau), il suffit de faire glisser l’onglet du site ou le favicon (icône du site) vers la barre des tâches pour que le site s&#39;épingle seul. Il est également possible d’utiliser le menu Outils (<code>Alt</code> + <code>o</code>), puis de sélectionner &quot;<em>Ajouter le site au menu démarrer</em>&quot;, mais le raccourci se place dans le menu et non sur la barre des tâches.</p>\n<p>&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/epinglage.jpg\" alt=\"épinglage\">&lt;figcaption&gt;Ajouter un site à l’écran d’accueil, sous Windows 8&lt;/figcaption&gt;&lt;/figure&gt;\n\n</p>\n<p>Dans Windows 8 (en mode ModernUI), il y a un bouton &quot;<em>Épingler à l’écran d’accueil</em>&quot; dans la barre de navigation en bas de la fenêtre d’Internet Explorer.</p>\n<p>Il est également possible de créer des outils d’épinglage (boutons, barres), comme nous le verrons par la suite.</p>\n<h3 id=\"les-modifications-d-interface\">Les modifications d’interface</h3>\n<p>Lorsqu&#39;un site est lancé depuis un raccourci épinglé, l’interface change légèrement par rapport à une fenêtre normale d’Internet Explorer. Le bouton accueil à droite disparaît, l’icône du site est affichée à gauche des boutons de navigation, et ceux-ci adoptent une couleur différente.</p>\n<p>&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/exemple-site-epingle.jpg\" alt=\"Un exemple de site épinglé\">&lt;figcaption&gt;Un exemple de site épinglé&lt;/figcaption&gt;&lt;/figure&gt;\n\n</p>\n<h3 id=\"la-barre-des-t-ches-mais-pas-seulement-\">La barre des tâches, mais pas seulement !</h3>\n<p>Il existe également une petite subtilité : si vous glissez le site non pas sur la barre des tâches mais sur le bouton du menu Démarrer (uniquement pour Windows 7 donc), votre site et ses raccourcis apparaîtront dans celui-ci.</p>\n<p>&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/menu-demarrer.jpg\" alt=\"epinglage menu démarrer\">&lt;figcaption&gt;On peut aussi épingler au menu démarrer !&lt;/figcaption&gt;&lt;/figure&gt;\n\n</p>\n<p>La théorie étant vue, place à l’action.</p>\n<h2 id=\"pr-parer-le-terrain\">Préparer le terrain</h2>\n<p>Il faut savoir que n’importe quel site peut être épinglé à la barre de tâche, il n’y a rien à faire pour rendre un site épinglable ou non. Ce que nous allons faire tout au long de ce tutoriel, c&#39;est <strong>personnaliser cet épinglage</strong> ; pour commencer, nous allons voir quelques informations de personnalisation de base à donner au site par le biais des métadonnées.</p>\n<h3 id=\"les-m-tadonn-es-d-installation\">Les métadonnées d’installation</h3>\n<p>Ces éléments permettent de définir plusieurs paramètres qui seront enregistrés lors de l’épinglage du site, et donc de la création du raccourci. Ce sont des éléments facultatifs, mais recommandés.</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Il est important de comprendre que ces valeurs ne seront utilisées qu&#39;à l’épinglage. Si vous modifiez ces données après que vous ou un utilisateur ayez épinglé le site, les modifications ne seront pas prises en comptes. Il faudra réépingler le site pour qu&#39;une nouvelle &quot;installation&quot; se crée avec ces nouveaux paramètres.&lt;/div&gt;\n\n</p>\n<h4 id=\"application-name\">application-name</h4>\n<p>La première chose que l’on pourrait vouloir faire, c&#39;est modifier le nom affiché dans la fenêtre d’information, qui apparaît lors du clic droit sur l’icône d’un site épinglé. En effet, par défaut il sera affiché le contenu de la balise <code>&lt;title&gt;</code> du document lié.</p>\n<p>Ajoutons donc une métadonnée afin de choisir nous-mêmes ce qui sera affiché par le lien de base :</p>\n<p>&lt;meta name=&quot;application-name&quot; content=&quot;Un beau site épinglable&quot;&gt;~~~</p>\n<p>Le résultat est immédiat, le nom du lien vers le site est transformé selon nos souhaits.</p>\n<h4 id=\"msapplication-tooltip\">msapplication-tooltip</h4>\n<p>Il est également possible d’ajouter une infobulle qui apparaîtra lors du survol de l’icône.</p>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;msapplication-tooltip&quot; content=&quot;Cliquez pour vous rendre sur un magnifique site !&quot;&gt;\n</code></pre>\n<h4 id=\"msapplication-starturl\">msapplication-starturl</h4>\n<p>Il faut savoir que, par défaut, la page qui s&#39;ouvrira lorsqu&#39;un utilisateur cliquera sur le bouton du site épinglé sera celle qu&#39;il visitait au moment où il l’a épinglé. S&#39;il était sur une page obscure du fin fond de votre site, c&#39;est cette page qu&#39;il verra chaque fois qu&#39;il ouvrira votre site par le biais de l’icône épinglée.</p>\n<p>Pour choisir vous-même quelle URL sera lancée au moment de l’ouverture, vous pouvez utiliser ce code :</p>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;msapplication-starturl&quot; content=&quot;./&quot;&gt;\n</code></pre>\n<p>Ici, on demande au site de toujours s&#39;ouvrir à la racine (l’index). On pourrait mettre n’importe quelle adresse, soit absolue (de forme <a href=\"http://www.monsite.com\">http://www.monsite.com</a>), soit relative à la page en cours (de forme /test.html).</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Seuls les protocoles HTTP et HTTPS sont autorisés.&lt;/div&gt;\n\n</p>\n<h4 id=\"msapplication-window\">msapplication-window</h4>\n<p>Par défaut, lors de la première ouverture d’un site épinglé, la fenêtre ouverte aura une taille de 800×600 pixels. Par la suite, la taille conservée sera celle qu&#39;aura décidé l’utilisateur en redimensionnant ladite fenêtre.</p>\n<p>Cependant, il peut être judicieux de vouloir faire en sorte que le premier affichage soit plus grand. Et c&#39;est possible avec cette balise meta :</p>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;msapplication-window&quot; content=&quot;width=1024;height=768&quot;&gt;\n</code></pre>\n<p><code>height</code> représente bien sûr la hauteur, et <code>width</code> la largeur.</p>\n<h3 id=\"les-m-tadonn-es-d-ex-cution\">Les métadonnées d’exécution</h3>\n<p>Ces paramètres sont lus à chaque fois que le site épinglé est ouvert. Les données peuvent donc être facilement mises à jour.</p>\n<h4 id=\"msapplication-navbutton-color\">msapplication-navbutton-color</h4>\n<p>Comme je le disais plus tôt, lorsqu&#39;un site est lancé depuis un raccourci épinglé (on parle de mode site), l’interface est légèrement modifiée par rapport au site ouvert normalement. Par exemple, les boutons précédents et suivants adoptent une couleur adaptée au site ; par défaut, Internet Explorer choisit cette couleur parmi les dominantes principales du site.</p>\n<p>Là encore, vous pouvez choisir vous-même cette couleur :</p>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;msapplication-navbutton-color&quot; content=&quot;#c80000&quot;&gt;\n</code></pre>\n<h4 id=\"msapplication-task\">msapplication-task</h4>\n<p>Grâce à cette balise, vous pouvez ajouter des liens dans la liste des Tâches. Ce sera l’objet de la partie suivante de ce tutoriel.</p>\n<h4 id=\"msapplication-task-separator\">msapplication-task-separator</h4>\n<p>Cet élément permet de créer une ligne de séparation entre deux éléments de la liste des Tâches. La valeur de content est facultative.</p>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;msapplication-task-separator&quot; content=&quot;&quot;&gt;\n</code></pre>\n<h3 id=\"quelques-exemples\">Quelques exemples</h3>\n<p>Saviez-vous que de nombreux sites utilisent déjà ces fonctionnalités ? Voici de petits exemples…</p>\n<h4 id=\"facebook\">Facebook</h4>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;application-name&quot; content=&quot;Facebook&quot; /&gt;\n&lt;meta name=&quot;msapplication-tooltip&quot; content=&quot;Start the Facebook App&quot; /&gt;\n&lt;meta name=&quot;msapplication-starturl&quot; content=&quot;/&quot; /&gt;\n&lt;meta name=&quot;msapplication-window&quot; content=&quot;width=800;height=600&quot; /&gt;\n</code></pre>\n<h4 id=\"bing\">Bing</h4>\n<pre><code class=\"language-markup\">&lt;meta content=&quot;Bing&quot; name=&quot;application-name&quot; /&gt;\n&lt;meta content=&quot;Bing&quot; name=&quot;msapplication-tooltip&quot; /&gt;\n&lt;meta content=&quot;width=1024;height=768&quot; name=&quot;msapplication-window&quot; /&gt;\n&lt;meta content=&quot;/&quot; name=&quot;msapplication-starturl&quot; /&gt;\n</code></pre>\n<h4 id=\"twitter\">Twitter</h4>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;//abs.twimg.com/favicons/win8-tile-144.png&quot;&gt;\n&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#00aced&quot;&gt;\n</code></pre>\n<p>&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/exemple-bing.jpg\" alt=\"exemple-bing\">&lt;figcaption&gt;L’exemple de Bing&lt;/figcaption&gt;&lt;/figure&gt;\n\n</p>\n<h2 id=\"liste-de-raccourcis-statiques-t-ches-\">Liste de raccourcis statiques (tâches)</h2>\n<p>&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/taches-fb.jpg\" alt=\"taches facebook\">&lt;figcaption&gt;Exemple de tâches d’un site connu&lt;/figcaption&gt;&lt;/figure&gt;\n\n</p>\n<p>Le plus simple pour commencer, est de pouvoir ajouter des liens statiques, appelés &quot;tâches&quot; (jumplists en anglais). Ces liens ont pour but de rediriger vers des pages pérennes de votre site.</p>\n<p>Les tâches de base (statiques) sont définies par des balises de métadonnées (meta). Vous pouvez créer jusqu&#39;à cinq tâches, qui apparaîtront dans la catégorie &quot;Tâches&quot;.</p>\n<p>Voici la balise en question, qui se définit par la valeur de name &quot;msapplication-task&quot;.</p>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;msapplication-task&quot; content=&quot;&quot;&gt;\n</code></pre>\n<p>Les valeurs possibles de content sont au nombre de quatre, et doivent être séparées par un point-virgule. Voici un tableau des différentes valeurs possibles et de leur utilité :</p>\n<p>&lt;table&gt;&lt;tr&gt;&lt;th&gt;Nom&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;Nom de la tâche, qui apparaît dans la liste.\n&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td class=&quot;nowrap&quot;&gt;action-uri&lt;/td&gt;&lt;td&gt;L’adresse qui sera ouverte lorsque l’élément sera cliqué, et qui peut être absolue ou relative.&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td class=&quot;nowrap&quot;&gt;icon-uri&lt;/td&gt;&lt;td&gt;Une icône (image ou fichier icône) qui sera affichée juste en face du lien. L’adresse de l’icône peut également être absolue ou relative.&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td class=&quot;nowrap&quot;&gt;window-type&lt;/td&gt;&lt;td&gt;Permet de définir le mode d’ouverture de la page liée.\n\n<em>   tab (valeur par défaut) : nouvel onglet dans la fenêtre actuelle\n</em>   window : nouvelle fenêtre\n*   self : onglet actuel&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n\n</p>\n<p>Par exemple, pour créer un lien vers un blog, avec une icône personnalisée, on pourrait faire ceci :</p>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;msapplication-task&quot; content=&quot;name=Le Blog !;action-uri=http://monblog.com;icon-uri=blog.ico&quot;&gt;\n</code></pre>\n<p>Ou pour faire un lien vers une page Twitter en utilisant leur favicon comme icône :</p>\n<pre><code class=\"language-markup\">&lt;meta name=&quot;msapplication-task&quot; content=&quot;name=Twitter;action-uri=http://fr.twitter.com/moi;icon-uri=http://twitter.com/favicon.ico&quot;&gt;\n</code></pre>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Il est tout à fait possible de s&#39;arrêter ici. Ces fonctions sont largement suffisantes pour beaucoup de sites. Les parties suivantes du tutoriel requièrent des notions plus ou moins avancées de Javascript, et ne conviendront pas aux débutants.&lt;/div&gt;\n\n</p>\n<h2 id=\"liste-de-raccourcis-dynamiques\">Liste de raccourcis dynamiques</h2>\n<p>Il est également possible de créer des tâches dynamiquement, en utilisant du Javascript. Ces tâches peuvent être par exemple les derniers articles d’un blog, vos derniers tweets, ou bien les derniers commentaires d’une vidéo. Vous pouvez créer jusqu&#39;à vingt tâches dynamiques, mais <strong>seules les dix dernières seront affichées</strong>.</p>\n<h3 id=\"v-rification-du-_mode-site_\">Vérification du <em>mode site</em></h3>\n<p>Lorsque le site est ouvert depuis un raccourci épinglé, on dit qu&#39;il est en mode site. Il sera donc utile de vérifier en Javascript si le site est exécuté avec ce mode ou pas. Pour ça, il existe une méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ie/ff976310%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msIsSiteMode()</code></a>.</p>\n<p>Nous pouvons créer une fonction simple de vérification, et attribuer le résultat à une variable :</p>\n<p>~~~var siteMode = testSiteMode();</p>\n<p>// Teste si le site a été lancé depuis un raccourci épinglé (mode site);\nfunction testSiteMode() {\n    try {\n        if (window.external.msIsSiteMode()) {\n            return true;\n        }\n    }\n    catch(e) {\n        return false;\n    }\n}~~~</p>\n<p>Ainsi, il n’y aura plus qu&#39;à tester la variable <code>siteMode</code> par la suite.</p>\n<h3 id=\"cr-er-une-liste-vide\">Créer une liste vide</h3>\n<p>Avant de pouvoir ajouter des liens à une liste, il faut créer une liste grâce à la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976293%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeCreateJumpList()</code></a>.</p>\n<p><del>~.language-javascript window.onload = function() {\n    try {\n        if (siteMode) {\n            // Créer la nouvelle liste\n            window.external.msSiteModeCreateJumpList(&#39;Liste Dynamique&#39;);\n        }\n    }\n    catch (e) {\n        // Echec, ne rien faire\n    }\n}</del>~</p>\n<p>Ainsi, une nouvelle catégorie est ajoutée au-dessus des &quot;Tâches&quot;.</p>\n<p>Il peut également être utile de remettre à zéro une liste, par exemple à la demande de l’utilisateur, ou pour mettre à jour des liens. Pour cela il existe la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976315%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeClearJumpList()</code></a>.</p>\n<pre><code class=\"language-javascript\">window.onload = function() {\n    try {\n        if (siteMode) {\n            // Supprimer toute liste dynamique existante\n            window.external.msSiteModeClearJumpList();\n            // Créer la nouvelle liste\n            window.external.msSiteModeCreateJumpList(&#39;Liste Dynamique&#39;);\n        }\n    }\n    catch (e) {\n        // Echec, ne rien faire\n    }\n}\n</code></pre>\n<h3 id=\"ajouter-des-l-ments-la-liste\">Ajouter des éléments à la liste</h3>\n<p>Maintenant que la liste est prête, nous allons y ajouter des éléments le plus simplement du monde, grâce à la fonction <a href=\"&quot;MSDN&quot;\"><code>msSiteModeAddJumpListItem()</code></a>.</p>\n<pre><code class=\"language-javascript\">window.onload = function() {\n    try {\n        if (siteMode) {\n            // Supprimer toute liste dynamique existante\n            window.external.msSiteModeClearJumpList();\n            // Créer la nouvelle liste\n            window.external.msSiteModeCreateJumpList(&#39;Liste Dynamique&#39;);\n\n            // Créer les nouveaux éléments\n            window.external.msSiteModeAddJumpListItem(&#39;Ma Page&#39;, &#39;page.html’, &#39;page2.ico&#39;);\n            window.external.msSiteModeAddJumpListItem(&#39;Mon blog&#39;, &#39;/blog/&#39;, &#39;blog.ico&#39;);\n\n            // Créer les nouveaux éléments\n            window.external.msSiteModeShowJumpList();\n        }\n    }\n    catch (e) {\n        // Echec, ne rien faire\n    }\n}\n</code></pre>\n<p>Notez l’utilisation de la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976318%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeShowJumList()</code></a> : elle est obligatoire, sans quoi les liens ajoutés ne seront pas affichés.</p>\n<p>Il ne vous reste désormais qu&#39;à trouver des idées d’application. Vous pouvez par exemple, comme <strong>Amazon</strong>, enregistrer une liste de favoris, ou la liste des dernières recherches effectuées.</p>\n<p>On pourrait par exemple imaginer créer un bouton pour l’ajout d’une fiche de membre à une liste de Favoris. Le bouton appellerait une fonction <code>AjouterMembreListe</code>, et les paramètres seraient passés dynamiquement à la fonction avec PHP (ou autre) :</p>\n<pre><code class=\"language-javascript\">var site = null;\nfunction AjouterMembreListe(nomMembre, adresseMembre) {\n    site = window.external;\n    site.msSiteModeCreateJumpList(&#39;Mes membres favoris&#39;);\n    site.msSiteModeAddJumpListItem(nomMembre, adresseMembre, &#39;images/membre.ico&#39;);\n}\n</code></pre>\n<h2 id=\"les-notifications-en-javascript\">Les notifications en Javascript</h2>\n<p>Puisque l’on a ajouté des éléments de manière dynamique, il peut être utile de prévenir l’utilisateur que des changements ont été faits. Il y a deux possibilités pour cela : ajouter une image superposée à l’icône, ou faire clignoter l’icône dans la barre des tâches.</p>\n<h3 id=\"ajouter-une-image-par-dessus-l-ic-ne\">Ajouter une image par-dessus l’icône</h3>\n<p>Une technique qui peut-être très pratique pour indiquer qu&#39;un certain type d’événement s&#39;est produit. Par exemple, que l’utilisateur a reçu un certain nombre de messages.</p>\n<p>&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/03/notif-fb.jpg\" alt=\"notification-facebook\">&lt;figcaption&gt;La notification de Facebook&lt;/figcaption&gt;&lt;/figure&gt;\n\n</p>\n<p>Cela se fait avec la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976316%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeSetIconOverlay()</code></a>, qui attend deux paramètres : l’adresse de l’image (obligatoire), et un texte descriptif de la notification (optionnel).</p>\n<p><del>~window.external.msSiteModeSetIconOverlay(&#39;newMP.ico&#39;, &#39;Un nouveau message privé est arrivé&#39;);</del>~</p>\n<p>Pour retirer cette image, on peut utiliser la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976314%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeClearIconOverlay()</code></a>, par exemple lorsque les messages ont été lus.</p>\n<h3 id=\"exemple-concret\">Exemple concret</h3>\n<p>Voici maintenant un exemple d’utilisation, qui imagine que nous avons un système de Commentaires. On souhaite créer une fonction qui modifie l’image en fonction d’un statut passé dynamiquement en fonction d’un événement. Une recherche est faite sur le site pour détecter la présence de nouveaux messages, et le résultat est transmis à l’icône épinglée par le biais d’une fonction :</p>\n<ul>\n<li>État normal</li>\n<li>Nouveaux messages, avec affichage du nombre de messages</li>\n<li>En recherche</li>\n<li>Erreur\n~~~.language-javascript\nvar etats = { VIDE: 0, NORMAL: 1, ERREUR: 2 };\nvar messages = [ &#39;En attente&#39;, &#39;Nouveaux commentaires !&#39;, &#39;Erreur&#39; ];</li>\n</ul>\n<p>// Fonction de modification de l’icône en fonction du statut\nfunction modifierIcone(statut) {\n    switch (statut) {\n        case etats.VIDE:\n        // S&#39;il n’y a aucune notification, enlever l’image et laisser l’icône vide\n        clearOverlayIcon();\n        break;</p>\n<pre><code>    case etats.NORMAL:\n    // Si le nombre de messages non lu est nul, enlever l’image et laisser l’icône vide\n    if (messagesNonLus == 0) {\n        clearOverlayIcon();\n    }\n    else {\n        // Sinon, appliquer une icône particulière en fonction du nombre de messages, et afficher une description\n        setOverlayIcon(&#39;img/num_&#39; + messagesNonLus + &#39;.ico&#39;, messages[2]);\n    }\n    break;\n\n    case etats.ERREUR:\n                // S&#39;il y a une erreur, l’afficher, puis remettre l’icône normale\n    if (messagesNonLus == 0) {\n        setOverlayIcon(&#39;img/erreur.ico&#39;, messages[3]);\n        setStatus(etats.CLEAR);\n    }\n    break;\n}\n</code></pre><p>}~~~</p>\n<h3 id=\"clignotement-du-bouton-dans-la-barre-des-t-ches\">Clignotement du bouton dans la barre des tâches</h3>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Utile pour attirer rapidement l’attention, il faut néanmoins se demander s&#39;il n’est pas plus pertinent d’utiliser une image superposée à l’icône. En effet, il n’y a rien de plus agaçant pour un utilisateur qu&#39;un élément qui clignote toutes les deux minutes. Il sera par exemple préférable de mettre un chiffre en image pour signaler que de nouveaux commentaires ont été postés, plutôt que de flasher l’utilisateur à chaque fois.&lt;/div&gt;\n&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/03/clignotement.jpg\" alt=\"clignotement\">&lt;figcaption&gt;Un exemple de clignotement&lt;/figcaption&gt;&lt;/figure&gt;\n\nLe clignotement se fait au moyen de la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff975166%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeActivate()</code></a>. Celle-ci ne prend aucun paramètre, et ne fait rien d’autre que faire clignoter l’icône jusqu&#39;à ce que l’utilisateur ait ouvert la fenêtre.\n\n## L’aperçu miniature et la barre d’outils\n\nPour aller plus loin, il est également possible d’ajouter des fonctionnalités à la fenêtre d’aperçu, à la manière des lecteurs multimédias qui disposent dans cette même fenêtre de boutons tels que Play, Stop, Pause, Suivant et Précédent. Il est possible de créer le même genre d’éléments pour un site épinglé.\n\nAu-delà de boutons de lecture, on peut imaginer ajouter un bouton pour accéder directement à une liste de favoris, un bouton de partage sur les réseaux sociaux, modifier un état (en ligne/hors ligne), ou bien accéder aux informations de localisation d’une entreprise ; bref, un véritable petit contrôle à distance de votre site.\n\n&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/03/barre-outils.jpg\" alt=\"barre d&#039;outils\">&lt;figcaption&gt;Une barre d’outils&lt;/figcaption&gt;&lt;/figure&gt;\n\n#### À retenir avant toute chose\n\n<em>   Tout d’abord, il ne peut y avoir que sept boutons en tout et pour tout. Il est possible cependant d’affecter à certains boutons un double emploi. Par exemple, le bouton Play devient le bouton pause lorsque la lecture commence.\n</em>   Ensuite, vous ne pouvez pas ajouter de boutons à une barre d’outils déjà créée. Il faudra obligatoirement la réinitialiser. Il est cependant possible de masquer ou désactiver temporairement des boutons qui ne seraient pas désirés.\n<em>   Enfin, la barre d’outils et ses boutons sont créés pour toute la durée de la vue du site en mode épinglé. Si l’utilisateur quitte la page d’origine, les boutons et la barre d’outils restent visibles.\n\n### Créer les boutons et la barre\n\nContrairement aux tâches, les boutons de la barre d’outils doivent être créés avant la barre. Nous utilisons la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976313%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeAddThumbBarButton()</code></a>, qui attend deux paramètres : l’URL de l’icône à utiliser (16×16px), et la description à afficher dans l’infobulle du bouton.\n\n<del>~.language-javascript\nvar btnFacebook = window.external.msSiteModeAddThumbBarButton(&#39;facebook.ico&#39;, &#39;Facebook&#39;);\nvar btnTwitter = window.external.msSiteModeAddThumbBarButton(&#39;twitter.ico&#39;, &#39;Twitter&#39;);\nvar btnGoogle = window.external.msSiteModeAddThumbBarButton(&#39;googleplus.ico&#39;, &#39;Google+&#39;);</del>~\n\nLe &quot;nom&quot; des boutons (c&#39;est un identifiant) sera utile pour leur attribuer des actions.\n\nIl reste ensuite à afficher la barre avec la fonction <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976319%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeShowThumbBar()</code></a>. Comme signalé en début de chapitre, une fois passée cette étape, il ne sera pas possible d’ajouter de boutons supplémentaires.\n\n<del>~.language-javascript\nwindow.external.msSiteModeShowThumbBar();</del>~\n\n### Donner des actions aux boutons\n\nRendus ici, nous avons trois jolis boutons affichés sous notre site, mais qui ne servent à rien. Voyons maintenant comment leur offrir une fonction avec un gestionnaire d’événements avec l’événement <a href=\"http://msdn.microsoft.com/fr-fr/library/ff975582%28v=vs.85%29.aspx\" title=\"MSDN\"><code>onmsthumbnailclick</code></a>.\n\n#### Appeler l’événement\n\nEn fonction du mode de document (je vous passe les détails), la méthode d’appel au gestionnaire peut changer. Il faut donc prévoir les deux cas possibles :\n\n<del>~if (document.addEventListener) {\n    document.addEventListener(&#39;msthumbnailclick&#39;, actionBouton, false);\n}\nelse if (document.attachEvent) {\n    document.attachEvent(&#39;onmsthumbnailclick&#39;, actionBouton);\n}</del>~\n\nAvec ceci, vous n’aurez pas de problème. Continuons donc : on peut maintenant créer la fonction adéquate. Lors de l’étape précédente, nous avons donné des identifiants à chaque bouton, c&#39;est ce qui est passé en paramètre ici :\n\n<del>~function actionBouton(bouton) {\n    switch (bouton.buttonID) {\n        case btnFacebook: action; break;\n        case btnTwitter: action; break;\n        case btnGoogle: action; break;\n    }\n}</del>~\n\nIl ne reste plus qu&#39;à définir les actions en questions, par exemple en faisant des appels de fonctions que vous aurez préalablement créées (ou que vous allez créer par la suite) :\n\n<del>~function actionBouton(bouton) {\n    switch (bouton.buttonID) {\n        case btnFacebook: actionFB(); break;\n        case btnTwitter: actionTwitt(); break;\n        case btnGoogle: actionGplus(); break;\n    }\n}</del>~\n\n### Modifier l’affichage des boutons\n\nComme je vous le disais plus tôt, il n’est pas possible d’ajouter ou de modifier des boutons une fois la barre d’outils affichés, mais il est en revanche possible d’agir sur les boutons déjà présents.\n\n#### Activer et désactiver un bouton\n\nSi vous faites un lecteur audio comme dans l’exemple de l’image d’illustration plus haut, il peut être utile d’activer ou désactiver certains boutons. Par exemple, lorsque l’utilisateur est sur la première piste, le bouton &quot;piste précédente&quot; est inutile ; idem lorsqu&#39;il écoute la dernière piste pour le bouton &quot;piste suivante&quot;.\n\nC&#39;est la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976320%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeUpdateThumbBarButton()</code></a> qui va permettre ceci. Elle attend trois paramètres obligatoires :\n\n</em>   l’identifiant du bouton retourné par la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976313%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeAddThumbBarButton()</code></a> ; souvenez-vous, nous avons nommé les nôtres <code>btnFacebook</code>, <code>btnTwitter</code> et <code>btnGoogle</code>&lt;/a&gt; dans le point précédent. Ce sont ces noms qu&#39;il faut indiquer.\n<em>   un booléen qui indiquera si le bouton est activé (<code>true</code>) ou désactivé (<code>false</code>) : c&#39;est ce dont nous allons nous servir ici.\n</em>   un second booléen qui indiquera si le bouton est affiché (<code>true</code>) ou masqué (<code>false</code>)\n\nVoyons un exemple avec deux boutons qui s&#39;activent et se désactivent l’un l’autre :\n\n<del>~.language-javascript\nvar btnEtat = 0;\n\nfunction boutonChange() {\n    // On active les deux boutons avant toute chose\n    window.external.msSiteModeUpdateThumbBarButton(boutonID1, true, true);\n    window.external.msSiteModeUpdateThumbBarButton(boutonID2, true, true);\n\n    if (btnEtat === 0) {\n        // Activer le bouton 1 et désactiver le bouton 2\n        window.external.msSiteModeUpdateThumbBarButton(boutonID1, true, true);\n        window.external.msSiteModeUpdateThumbBarButton(boutonID2, false, true);\n        btnEtat = 1;\n    }\n    else {\n        // Activer le bouton 2 et désactiver le bouton 1\n        window.external.msSiteModeUpdateThumbBarButton(boutonID1, false, true);\n        window.external.msSiteModeUpdateThumbBarButton(boutonID2, true, true);\n        btnEtat = 0;\n    }\n}</del>~\n\n#### Masquer un bouton\n\nParfois, il peut être utile de masquer un bouton. On utilise donc la même méthode (<a href=\"http://msdn.microsoft.com/fr-fr/library/ff976320%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeUpdateThumbBarButton()</code></a>) que pour l’activation et la désactivation, mais cette fois nous nous intéressons au dernier paramètre attendu par la méthode. Il suffit donc de mettre le dernier paramètre sur false pour masquer un bouton :\n\n<del>~.language-javascript\nwindow.external.msSiteModeUpdateThumbBarButton(boutonID, true, false);</del>~\n\nLorsqu&#39;on change de page au sein d’un site en mode site, la barre d’outils reste visible tant que la fenêtre épinglée est ouverte, mais les boutons risquent de cesser de fonctionner. En effet, si l’utilisateur va sur un autre site, le gestionnaire d’événements ne sera plus présent. Il peut donc être utile de les masquer lorsque la page où le code se trouve est déchargée.\n\n<del>~.language-javascript\nfunction masquerBoutons() {\n    window.external.msSiteModeUpdateThumbBarButton(btnFacebook, true, false);\n    window.external.msSiteModeUpdateThumbBarButton(btnTwitter, true, false);\n    window.external.msSiteModeUpdateThumbBarButton(btnGoogle, true, false);\n}</del>~\n\nIl suffit ensuite d’appeler la fonction à l’événement unload :\n\n<del>~.language-markup\n&lt;body onunload=&quot;masquerBoutons()&quot;&gt;</del>~\n\nLors du retour sur la page adéquate, comme les boutons sont créés dans le chargement <code>onload</code>, ils seront à nouveau affichés automatiquement.\n\n#### Modifier l’état d’un bouton en changeant son style\n\nParfois, comme dans le cadre d’un bouton play/pause, il peut être utile de pouvoir changer l’état d’un bouton. C&#39;est possible avec la méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/ff976298%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msSiteModeAddButtonStyle()</code></a>. On peut lui donner quatre paramètres, dont deux sont facultatifs : l’identifiant du bouton, l’icône du nouveau bouton (16×16px toujours), puis la description dans l’infobulle du &quot;nouveau&quot; bouton, et enfin un nouvel ID si besoin.\n\nEn gardant l’idée du bouton play/pause, nous allons d’abord créer les styles par défaut.\n\n<del>~btnPlayPause = window.external.msSiteModeAddThumbBarButton(&#39;play.ico&#39;, &#39;Lecture&#39;); stylePlay = 0;\n// Style par défaut\nstylePause = window.external.msSiteModeAddButtonStyle(btnPlayPause, &#39;pause.ico&#39;, &#39;Pause&#39;);</del>~\n\nEnsuite, il suffit de modifier ces états via une fonction. On imagine qu&#39;on passe une variable (relative à un player web) <code>etat</code> qui vaut soit pause, soit play.\n\n<del>~function playPause(etat) {\n    // En fonction de l’état envoyé, on défini le style à affecter\n    var styleBtn = etat.pause ? stylePlay : stylePause;\n    // On attribue au bouton le nouveau style\n    window.external.msSiteModeShowButtonStyle(btnPlayPause, styleBtn);\n}</del>~\n\nEt voilà pour cette partie.\n\n## Aller plus loin : les astuces\n\n### Une image pour épingler le site\n\nComme je vous le disais au début, il est possible de créer des images dans votre site que l’utilisateur aura simplement à déplacer vers la barre des tâches au lieu de l’onglet, vous donnant ainsi la possibilité d’expliquer simplement à vos utilisateurs de quoi il retourne. C&#39;est ainsi que sur certains sites comme HtmlGoodies, les utilisateurs d’Internet Explorer 9 ou plus ont une petite barre affichée indiquant qu&#39;il suffit de la déplacer dans la barre des tâches (l’image étant explicite) pour bénéficier de nouvelles fonctionnalités.\n\n&lt;figure class=&quot;text-center&quot;&gt;<img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/03/htmlgoodies.jpg\" alt=\"htmlgoodies\">&lt;figcaption&gt;L’exemple de HTMLGoodies&lt;/figcaption&gt;&lt;/figure&gt;\n\nFaire ceci est très simple, car il suffit d’ajouter à une image la classe <code>msPinSite</code> pour que le navigateur sache quoi faire de cette image et comment la traiter. N’importe quel format d’image web peut-être utilisé (JPG, GIF, PNG).\n\n<del>~.language-markup\n&lt;img src=&quot;monImage.png&quot; alt=&quot;Glisser-épingler le site&quot; class=&quot;msPinSite&quot; /&gt;</del>~\n\nMicrosoft a d’ailleurs publié une petite page d’exemple, <a href=\"http://ie.microsoft.com/testdrive/Browser/Radio/Default.html\">Pin Site Radio</a>.\n\n### Détecter s&#39;il s&#39;agit du premier lancement du site épinglé\n\nSi vos utilisateurs lancent le site épinglé pour la première fois, il peut être intéressant de les rediriger vers une nouvelle page pour leur en expliquer les fonctionnalités (tâches statiques ou dynamiques…). Pour ça, il existe une méthode <a href=\"http://msdn.microsoft.com/fr-fr/library/gg593108%28v=vs.85%29.aspx\" title=\"MSDN\"><code>msIsSiteModeFirstRun()</code></a>. Vous devez lui donner un booléen en paramètre, qui va définir s&#39;il doit ensuite enregistrer que le site a été consulté pour la première fois ou non.\n\n<del>~.language-javascript\ntry {\n    if (window.external.msIsSiteMode()) {\n        //  s&#39;il s&#39;agit du premier lancement\n        if (external.msIsSiteModeFirstRun(false)) {\n            window.location = &quot;./pageExplications.html&quot;\n        }\n    }\n}\ncatch (e) {\n    // Épinglage non-supporté\n}</del>~\n\n## Pinify, le plugin jQuery\n\nIl existe un plugin jQuery nommé Pinify, qui apporte quelques suppléments (à consulter sur leur site). Il nécessite jQuery 1.5 minimum. Vous pouvez télécharger la <a href=\"http://jquery.com/\" title=\"jQuery\">dernière version de jQuery</a> depuis le site officiel.\n\nConcrètement, il permet de faire tout ce que l’on vient de voir, aussi bien la partie HTML que Javascript, de manière plus simple et rapide avec la syntaxe habituelle du jQuery. Vous pourrez donc créer vos balises meta, ajouter des listes de raccourcis (tâches) statiques ou dynamiques, gérer les notifications et créer une barre d’outils avec encore plus de facilité.\n\n&lt;div class=&quot;note note--info&quot;&gt;Cette partie est facultative, et s&#39;adresse aux développeurs déjà habitués à manipuler du Javascript et jQuery. Elle sera donc concise et se contentera de présenter la façon de faire pour les étapes vues, en utilisant Pinify ; en cas de besoin, leur documentation est disponible.&lt;/div&gt;\n\n</p>\n<p>Tout d’abord, il faut <a href=\"http://polyfillsbook.com/pinify/\" title=\"Pinify\">télécharger Pinify</a> et ajouter le fichier <code>jquery.pinify.js</code> à notre page (après avoir inclus jQuery). Tout est expliqué sur leur page, je vous laisse le soin d’aller lire leurs explications.</p>\n<p>Ensuite, il suffit d’appeler la fonction <code>.pinify();</code> :</p>\n<pre><code class=\"language-javascript\">$(&#39;head’).pinify();\n</code></pre>\n<p>À partir de là, le plugin inclus automatiquement les balises meta de base. Nous allons maintenant voir comment les personnaliser.</p>\n<h3 id=\"la-partie-statique\">La partie statique</h3>\n<h4 id=\"ajouter-des-m-tadonn-es-de-base\">Ajouter des métadonnées de base</h4>\n<pre><code class=\"language-javascript\">$(&quot;head&quot;).pinify({\n    applicationName: &#39;Mon site&#39;,\n    favIcon: &#39;favicon.ico&#39;,\n    navColor: &#39;#bb0055&#39;,\n    startUrl: &#39;http://www.monsite.com&#39;,\n    tooltip: &#39;Afficher mon site&#39;,\n    window: &#39;width=1024;height=768&#39;\n});\n</code></pre>\n<h4 id=\"cr-er-des-t-ches\">Créer des tâches</h4>\n<pre><code class=\"language-javascript\">$(&quot;head&quot;).pinify({\n    applicationName: &#39;Mon site&#39;,\n    favIcon: &#39;favicon.ico&#39;,\n    navColor: &#39;#bb0055&#39;,\n    startUrl: &#39;http://www.monsite.com&#39;,\n    tooltip: &#39;Afficher mon site&#39;,\n    window: &#39;width=1024;height=768&#39;,\n    tasks: [{\n        &#39;name&#39;: &#39;Lire le site&#39;,\n        &#39;action’: &#39;http://www.monsite.com/mapage.html’,\n        &#39;icon’: &#39;favicon.ico&#39;\n    },\n    {\n        &#39;name&#39;: &#39;Afficher mon blog&#39;,\n        &#39;action’: &#39;http://www.monsite.com/monblog/&#39;,\n        &#39;icon’: &#39;blog.ico&#39;\n    }]\n});\n</code></pre>\n<h3 id=\"la-partie-dynamique\">La partie dynamique</h3>\n<p>Dans l’exemple suivant, on va générer des tâches dynamiques… De manière dynamique. En effet, on va récupérer automatiquement les liens d’un menu de navigation (ici représenté par l’id &quot;menu&quot;) et ajouter chaque lien dans une liste de tâches.</p>\n<pre><code class=\"language-javascript\">var menuItem = [];\n\n$(&quot;#menu a&quot;).each(data, function (key, val) {\n    var $this = $(this);\n    // On crée un objet dans lequel on stocke le nom, l’adresse et l’adresse de l’icône\n    var item = {\n        &#39;name&#39;: $this.html(),\n        &#39;url’: $this.attr(&#39;href&#39;),\n        &#39;icon’: &#39;favicon.ico&#39;\n    };\n    // l’objet est ensuite ajouté à l’array que nous avons créé plus haut\n    menuItem.push(item);\n});\n\n// On utilise ensuite la fonction d’ajout addJumpList pour créer la liste et l’afficher\n$.pinify.addJumpList ({\n    title: &#39;Mon menu&#39;,\n    items: menuItem\n});\n</code></pre>\n<h3 id=\"les-notifications\">Les notifications</h3>\n<h4 id=\"m-thode-de-l-ic-ne-suppl-mentaire\">Méthode de l’icône supplémentaire</h4>\n<p>Encore plus simple que dans la version d’origine, jQuery oblige :</p>\n<pre><code class=\"language-javascript\">$.pinify.addOverlay ({\n    icon: &#39;iconeNotif.ico&#39;,\n    title: &#39;Nouvelle notification’\n});\n</code></pre>\n<p>Par opposition, vous pouvez utiliser la fonction <code>clearOverlay()</code> pour retirer une icône.</p>\n<pre><code class=\"language-javascript\">$.pinify.clearOverlay();\n</code></pre>\n<h4 id=\"m-thode-du-clignotement\">Méthode du clignotement</h4>\n<p>Tout aussi simplement que la méthode initiale :</p>\n<pre><code class=\"language-javascript\">$.pinify.flashTaskbar();\n</code></pre>\n<h3 id=\"les-aper-us\">Les aperçus</h3>\n<p>Cette fois, le plugin simplifie grandement la tâche :</p>\n<pre><code class=\"language-javascript\">$.pinify.createThumbbarButtons({\n    buttons: [{\n        name: &#39;Facebook&#39;,\n        icon: &#39;facebook.ico&#39;,\n        click: function () {\n            // Gérer la fonction ici\n        }\n    },\n    {\n        name: &#39;Twitter&#39;,\n        icon: &#39;twitter.ico&#39;,\n        click: function () {\n            // Gérer la fonction ici\n        }\n    }]\n});\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Voilà, vous savez désormais tout. Il est possible d’aller plus loin encore, en <strong>C#</strong> cette fois-ci, sur un serveur IIS (Windows Server), et de proposer des fonctionnalités avancées. Par exemple, vous pouvez attribuer des fonctions d’administration automatiques à un utilisateur pour peu qu&#39;il ait les droits requis.</p>\n<p>Néanmoins, il s&#39;agit de fonctionnalités bien plus avancées, nous nous arrêterons donc ici pour le moment. De nouvelles fonctionnalités apparaîtront avec les prochaines versions de Windows et d’Internet Explorer, comme déjà depuis IE10 les <strong>notifications de Badge</strong>. Ce sera l’occasion d’y revenir, et le tutoriel sera mis à jour en temps voulu.</p>\n<p>Faites de beaux sites épinglables !</p>\n"},{"title":"Bien utiliser les sprites CSS","author":"Emmanuel B.","date":"2014-03-28 11:15:50","tags":["html/css","seo"],"categories":["Tutoriels"],"template":"post.vue","basename":"bien-utiliser-les-sprites-css","content":"<p>Les sprites CSS sont une façon de se servir d’une seule et même image qui en <em>contient</em> plusieurs, en n’affichant que ce qui nous intéresse. Les avantages de cette technique sont multiples, comme nous allons le voir.</p>\n<h2 id=\"les-sprites-c-est-quoi-\">Les sprites, c&#39;est quoi ?</h2>\n<p>C&#39;est une technique qui consiste à regrouper plusieurs images en une seule et à ne sélectionner que la zone que l’on veut afficher. Cette technique a été très utilisée dans les jeux vidéos à l’époque des jeux 2D, par exemple ceux où vous cassiez des briques avec un plombier bedonnant en salopette ou un hérisson avec des tennis rouges… En fait, chaque personnage ou objet avait sur une même image toutes les positions nécessaires à son animation, et une seule petite zone était affichée, dans laquelle « défilait » le reste des images selon les actions du joueur. Eh bien en webdesign, c&#39;est un peu pareil, et c&#39;est ce que nous allons voir maintenant.</p>\n<p>Cela va probablement chambouler un peu vos habitudes de découpage d’un design, et vous amener à réfléchir au meilleur moyen de les préparer.</p>\n<p>Concrètement, par exemple pour avoir un ensemble d’icônes faites avec des images qui changent au survol de la souris, vous auriez fait autant d’images que de possibilités :</p>\n<p><img src=\"http://uploads.siteduzero.com/files/237001_238000/237401.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237400.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237396.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237395.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237394.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237393.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237403.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237402.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237392.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237391.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237399.png\" alt=\"icon\"><img src=\"http://uploads.siteduzero.com/files/237001_238000/237397.png\" alt=\"icon\"></p>\n<p>Pour la suite du tutoriel, on va les fusionner comme ceci et utiliser cette image :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/03/sprite-test.png\" alt=\"sprite\"></p>\n<p>&lt;div class=&quot;note note--question&quot;&gt;Mais quel intérêt y a-t-il ? C&#39;est moins pratique en CSS ! Et puis charger une grosse image, ça prend plus de temps qu&#39;une petite, non ?&lt;/div&gt;\n\n</p>\n<p>Songez à ceci : la grande image fait 68 ko, chaque petite fait 12 ko. Donc, d’un côté on chargera une fois 68ko, et de l’autre on chargera douze fois 12 ko, soient… 144 ko. Mais ce n’est pas tout : à chaque fois que vous allez devoir charger une image, donc effectuer une requête HTTP pour récupérer l’image et l’afficher, soit un aller-retour. En n’ayant qu&#39;une seule image, vous économisez de nombreux allers-retours. Certes cela paraît minime, mais imaginez que vous ayez des centaines de milliers de visiteurs uniques par jour !</p>\n<p>De plus, dans le cas d’un élément qui change d’image au survol, vous êtes certain qu&#39;il n’y aura pas de latence au moment du survol : le site n’aura pas à aller demander l’image et à la charger, puisqu&#39;elle a déjà été chargée et mise en cache.</p>\n<h2 id=\"une-premi-re-approche-le-principe\">Une première approche : le principe</h2>\n<p>Maintenant que nos images sont prêtes, il va falloir choisir en CSS ce que l’on veut afficher. Pour cela, il faut d’abord que l’image soit définie comme background dans un objet ayant une certaine taille.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;En fonction de ce que l’on veut et de la façon dont on a organisé notre image, une seule taille (largeur ou hauteur) peut être définie, par exemple pour faire un <code>repeat-x</code> ou <code>repeat-y</code>.&lt;/div&gt;\n\n</p>\n<p>Pour l’instant, prenons un cas simple où l’on veut afficher des icônes les unes à la suite des autres, toutes de largeur et hauteur fixes et définies.</p>\n<p>Voici notre code HTML :</p>\n<pre><code class=\"language-markup\">&lt;ul class=&quot;icon&quot;&gt;\n    &lt;li class=&quot;icon__item icon__item--1&quot;&gt;&lt;/li&gt;\n    &lt;li class=&quot;icon__item icon__item--2&quot;&gt;&lt;/li&gt;\n    &lt;li class=&quot;icon__item icon__item--3&quot;&gt;&lt;/li&gt;\n    &lt;li class=&quot;icon__item icon__item--4&quot;&gt;&lt;/li&gt;\n    &lt;li class=&quot;icon__item icon__item--5&quot;&gt;&lt;/li&gt;\n    &lt;li class=&quot;icon__item icon__item--6&quot;&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Chaque point de la liste sera donc une icône. Vous n’êtes évidemment pas obligé d’utiliser des listes. Comme elles sont toutes de même taille, on applique une classe « icone », la même pour toutes afin de ne pas répéter les mêmes éléments à chaque fois, et ne pas avoir à toutes les modifier en cas de changement :</p>\n<pre><code class=\"language-css\">/* Cibler les éléments &lt;li&gt; appartenant à un élément de classe &quot;icone&quot; */\n.icon__item\n{\n    width: 60px;\n    height: 60px;\n    display: inline-block;\n    background: url(&quot;sprite.png&quot;) no-repeat;\n}\n</code></pre>\n<p>Qu&#39;avons-nous fait pour l’instant ? Nous avons simplement dit que chaque point de la liste sera un bloc en ligne de 60 pixels de hauteur et de largeur, et qu&#39;il aura une image de fond. Pour éviter tout problème, on peut lui appliquer la valeur <code>no-repeat</code>.</p>\n<p>Maintenant, c&#39;est là que les choses se corsent (mais pas beaucoup, promis). On va appliquer des classes avec un background de notre image, en leur indiquant la position, au moyen de <code>background-position</code>. Voyons ce que ça donne dans la pratique, pour l’icône de droite seulement :</p>\n<pre><code class=\"language-css\">.icon__item--1 { background-position: left top; }\n</code></pre>\n<p><img src=\"http://uploads.siteduzero.com/files/237001_238000/237404.png\" alt=\"resultat1\"></p>\n<p>&lt;div class=&quot;note note--question&quot;&gt;Qu&#39;est-ce qui s&#39;est passé précisément ? Il n’y a rien de particulier…&lt;/div&gt;\n\n</p>\n<p>Revoyons un peu le code. On a gardé la même image de background qu&#39;initialement, et on lui a simplement donné une position. L’image est affichée à partir de son bord gauche et de son bord haut (left top). Comme on a dit que la liste avait une largeur et une hauteur de 60 pixels, le reste de l’image au-delà de ces 60×60 n’est pas affiché, on a donc exactement ce qu&#39;on voulait. Sauf qu&#39;on ne s&#39;en rend pas bien compte car on n’a qu&#39;une image pour l’instant, mais nous allons arranger ça très vite.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;La position de base est toujours le coin en haut à gauche. Vous pouvez essayer de mettre 0 0 à la place de left top, vous verrez que vous obtiendrez le même résultat.&lt;/div&gt;\n\n</p>\n<h2 id=\"la-m-thode-en-action\">La méthode en action</h2>\n<p>Bien, bien, bien. On voulait peindre le plafond, je vous ai donné l’échelle, je vous ai placé dessus, je vous ai donné la peinture. Maintenant, accrochez-vous bien au pinceau : j’enlève l’échelle !</p>\n<pre><code class=\"language-css\">.icon__item {\n    width: 60px;\n    height: 60px;\n    display: inline-block;\n    background: url(&quot;sprite.png&quot;) no-repeat;\n}\n\n.icon__item--1 { background-position: left top; }\n.icon__item--2 { background-position: 20% top; }\n.icon__item--3 { background-position: 40% top; }\n.icon__item--4 { background-position: 60% top; }\n.icon__item--5 { background-position: 80% top; }\n.icon__item--6 { background-position: right top; }\n</code></pre>\n<p>Allez, vous allez voir que c&#39;est tout simple. Vous avez même peut-être déjà compris ! Revoyons l’action ralentie au magnétoscope :</p>\n<pre><code class=\"language-css\">.icon__item--2 { background-position: 20% top; }\n</code></pre>\n<p>On a donc déplacé notre image de 20 % vers la droite, comme dans l’image suivante. Comme l’image est régulière et le nombre d’icônes de 6, faire le déplacement en pourcentage est aisé : il y a en tout cinq déplacements à faire, d’un seul bloc à chaque fois. 1/5 = 20 %.</p>\n<p><img src=\"http://uploads.siteduzero.com/files/237001_238000/237389.png\" alt=\"explication\"></p>\n<p>Ainsi, au fur et à mesure, on peut placer notre image où on le souhaite, et comme on a toujours la taille de 60×60px à partir du point défini, on a l’illusion qu&#39;il n’y a qu&#39;une seule image.</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Notez bien : j’ai utilisé les valeurs left et right au début et à la fin car c&#39;est plus simple que des valeurs en pourcentage, mais 0 % et 100 % auraient aussi bien fonctionné. En fonction des images utilisées, ce n’est pas toujours possible. Ici, notre image est « régulière », ce qui permet ce genre de facilités.&lt;/div&gt;\n\n</p>\n<p>Mais il existe également une autre façon de faire : utiliser des valeurs en pixels. Nous allons voir comment.</p>\n<pre><code class=\"language-css\">.icon__item--1 { background-position: left top; }\n.icon__item--2 { background-position: -60px top; }\n.icon__item--3 { background-position: -120px top; }\n.icon__item--4 { background-position: -180px top; }\n.icon__item--5 { background-position: -240px top; }\n.icon__item--6 { background-position: right top; }\n</code></pre>\n<p>Comme vous le voyez, les valeurs en pixels sont négatives. Si vous vous trompez et que vous mettez une valeur positive, le déplacement se fera dans le mauvais sens, et le résultat le plus probable, c&#39;est que vous ne verrez tout simplement pas l’image. Faites bien attention, là encore j’aurais pu utiliser 0px en lieu et place de left et -300px au lieu de right.</p>\n<p>&lt;div class=&quot;note note--question&quot;&gt;Alors, quelle est la différence entre l’utilisation des % et des pixels ?&lt;/div&gt;\n\n</p>\n<p>Il n’y a pas vraiment de différence, mais des avantages et des inconvénients inhérents à chaque méthode. Voyons deux cas :</p>\n<ul>\n<li>vous souhaitez ajouter une icône supplémentaire ;</li>\n<li>vous souhaitez changer la taille des icônes.</li>\n</ul>\n<p>Dans le premier point, si vous avez utilisé les valeurs en pixels, vous n’aurez qu&#39;à ajouter cette image à la suite en rajoutant une classe <code>icon__item--7</code> avec un décalage de 60px de plus que la précédente. Si vous utilisiez les %, il va vous falloir tout réajuster. Dans le second point, si vous avez utilisé les valeurs en pourcentage, vous n’aurez qu&#39;à changer la taille dans la classe <code>icône</code>, et ne plus toucher à rien. En revanche, si vous utilisiez des valeurs en pixels, il va vous falloir tout recalculer pour l’ensemble de vos classes <code>icon__item--X</code>. De plus, dans le cas où nous aurions plusieurs images fusionnées de différentes tailles, il pourrait arriver que le pourcentage ne soit pas assez précis.</p>\n<p>Voyons où nous en sommes :</p>\n<p><img src=\"http://uploads.siteduzero.com/files/237001_238000/237405.png\" alt=\"preview\"></p>\n<p>Voilà, maintenant que vous avez digéré ça, faites quelques essais. On va passer au morceau final, somme toute assez simple une fois ceci compris.</p>\n<h2 id=\"un-peu-d-animation-le-survol\">Un peu d’animation : le survol</h2>\n<p>Vous l’attendiez tous, hein ?</p>\n<p>En fait, la gestion du survol de la souris va être toute simple à partir de ce qu&#39;on a déjà fait. Comme un code vaut mieux qu&#39;un long discours, voici :</p>\n<pre><code class=\"language-css\">.icon__item {\n    width: 60px;\n    height: 60px;\n    display: inline-block;\n    background-image: url(&quot;sprite.png&quot;);\n    background-repeat: no-repeat;\n}\n\n.icon__item--1 { background-position: left top; }\n.icon__item--2 { background-position: 20% top; }\n.icon__item--3 { background-position: 40% top; }\n.icon__item--4 { background-position: 60% top; }\n.icon__item--5 { background-position: 80% top; }\n.icon__item--6 { background-position: right top; }\n\n.icon__item--1:hover { background-position: left bottom; }\n.icon__item--2:hover { background-position: 20% bottom; }\n.icon__item--3:hover { background-position: 40% bottom; }\n.icon__item--4:hover { background-position: 60% bottom; }\n.icon__item--5:hover { background-position: 80% bottom; }\n.icon__item--6:hover { background-position: right bottom; }\n</code></pre>\n<p>Ouh, c&#39;était compliqué hein ?</p>\n<h3 id=\"alors-qu-avons-nous-fait-\">Alors qu&#39;avons-nous fait ?</h3>\n<p>Grâce à la pseudo-classe <code>:hover</code>, on peut agir sur l’action du survol de la souris sur l’élément. On a donc tout simplement remplacé top par <code>bottom</code> pour afficher le bas de chaque position d’icône. Ainsi, on a donc tout un menu en icônes, dynamique, avec une seule image. Il suffirait d’y rajouter des liens, je vous laisse le soin de faire ce que vous voulez.</p>\n<p><img src=\"http://uploads.siteduzero.com/files/237001_238000/237390.png\" alt=\"preview\"></p>\n<h2 id=\"cas-particulier-les-images-r-p-t-es\">Cas particulier : les images répétées</h2>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Les sprites ont tout de même leurs limites. En effet, il arrivera dans vos designs que vous devrez répéter une image. Or, si vous choisissez d’affecter un background sur toute une surface, toute l’image va apparaître.&lt;/div&gt;\n\n</p>\n<p>Il va donc vous falloir faire attention, et penser à regrouper vos images à répéter suivant leur sens. Pour répéter vos images horizontalement avec un <code>repeat-x</code>, vous devez placer vos images verticalement et jouer sur le placement en hauteur :</p>\n<p><img src=\"http://uploads.siteduzero.com/files/241001_242000/241514.png\" alt=\"preview\"></p>\n<p>À l’inverse, pour répéter vos images verticalement avec un <code>repeat-y</code>, vous devrez concevoir vos sprites horizontalement :</p>\n<p><img src=\"http://uploads.siteduzero.com/files/241001_242000/241515.png\" alt=\"preview\"></p>\n<p>Voilà pourquoi il est important de bien réfléchir à l’organisation de vos sprites.</p>\n<h3 id=\"petits-exemples\">Petits exemples</h3>\n<p>Voilà ce qu&#39;avait Google il fut un temps :</p>\n<p><img src=\"http://uploads.siteduzero.com/files/253001_254000/253715.png\" alt=\"Google\"></p>\n<p>Je vous laisse regarder ceux de <a href=\"http://l2.yimg.com/dh/ap/default/140318/pc_icons_btns_sprite_0318_3pm_v2.png\" title=\"Sprite Yahoo\">Yahoo</a>, <a href=\"https://ssl.gstatic.com/gb/images/v1_b444d4f7.png\" title=\"Sprite Google\">Google</a>, <a href=\"https://fbstatic-a.akamaihd.net/rsrc.php/v2/yI/r/-AOcMrAaRxs.png\" title=\"Sprite Facebook\">Facebook</a>, <a href=\"http://g-ecx.images-amazon.com/images/G/08/gno/sprites/global-sprite-v1._V361337220_.png\" title=\"Sprite Amazon\">Amazon</a>…</p>\n<h2 id=\"les-sprites-sous-un-lien-textuel\">Les sprites sous un lien textuel</h2>\n<p>J’ai eu quelques demandes et questions concernant les possibilités d’utilisation des sprites. Des questions qui peuvent paraître simples à certains, mais que je vais quand même aborder ici pour que tout le monde trouve son bonheur.</p>\n<p>&lt;div class=&quot;note note--quesion&quot;&gt;Comment puis-je utiliser la méthode des sprites avec des liens, pour faire un menu ?\nComment puis-je afficher du texte par-dessus mes images ?&lt;/div&gt;\n&lt;div class=&quot;note note--info&quot;&gt;Cet exemple ne concerne que des liens ayant un contenu textuel écrit dans le HTML, sous lequel on souhaiterait mettre une image de fond changeant au survol. Pour des images cliquables, voir la partie suivante.&lt;/div&gt;\n\n</p>\n<p>Le principe des sprites peut être appliqué sur n’importe quel élément. Si vous souhaitez faire des liens cliquables dont le fond change au survol, comme sur le Site du Zéro, il faut appliquer nos classes à la balise du lien, comme suit :</p>\n<pre><code class=\"language-markup\">&lt;ul class=&quot;menu&quot;&gt;\n    &lt;li class=&quot;menu__item&quot;&gt;&lt;a class=&quot;menu__link&quot; href=&quot;lien&quot;&gt;Ma Page 1&lt;/a&gt;&lt;/li&gt;\n    &lt;li class=&quot;menu__item&quot;&gt;&lt;a class=&quot;menu__link&quot; href=&quot;lien&quot;&gt;Ma Page 2&lt;/a&gt;&lt;/li&gt;\n    &lt;li class=&quot;menu__item&quot;&gt;&lt;a class=&quot;menu__link&quot; href=&quot;lien&quot;&gt;Ma Page 3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Voici notre image (certes un peu moche… Mais c&#39;est pour l’idée) :</p>\n<p><img src=\"http://uploads.siteduzero.com/files/247001_248000/247162.png\" alt=\"image test sprite\"></p>\n<pre><code class=\"language-css\">.menu {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.menu__item {\n    float: left;\n    width: auto;\n}\n\n.menu__link {\n    display: block;\n    width: 140px;\n    height: 40px;\n    line-height: 40px;\n    text-align: center;\n    background: url(&quot;mon-image.png&quot;) no-repeat 0 top; /* On positionne l’image en haut */\n}\n\n.menu__link:hover {\n    /* On affiche seulement la portion de l’image voulue : le bas */\n    background-position: 0 bottom;\n}\n</code></pre>\n<p>De cette manière, vous constatez que comme on applique l’image en background sur un élément, on peut parfaitement y afficher du texte et utiliser les liens normalement.</p>\n<h3 id=\"cas-des-images-cliquables\">Cas des images cliquables</h3>\n<p>&lt;div class=&quot;note note--alert&quot;&gt;Malgré tout, il est important de savoir que dans le cas d’une image cliquable, les sprites ne devraient pas être utilisés !&lt;/div&gt;\n\n</p>\n<p>En effet, utiliser les sprites avec un lien sans texte reviendrait à avoir un lien vide :</p>\n<pre><code class=\"language-markup\">&lt;a href=&quot;mapage.html&quot;&gt;&lt;/a&gt;\n</code></pre>\n<p>Sur ce code, on appliquerait nos backgrounds et l’effet de positionnement au survol. Mais créer un lien vide en HTML n’est pas une bonne chose, pour des questions d’accessibilité.</p>\n<p>&lt;div class=&quot;note note--question&quot;&gt;Mais pourquoi ? Comme on le stylise en CSS, on peut quand même le voir et cliquer dessus, non ?&lt;/div&gt;\n\n</p>\n<p>Certes, mais songez que certains internautes sont contraints de naviguer avec l’affichage des CSS désactivé, ou des lecteurs d’écrans. C&#39;est le cas des personnes malvoyantes. Pour eux, le résultat sera sans appel : un lien vide qui n’affiche rien, et qui n’est donc pas cliquable. En conséquence, il devient impossible de naviguer sur votre site. C&#39;est pour cela qu&#39;il faut utiliser une image dans le HTML.</p>\n<p>&lt;div class=&quot;note note--question&quot;&gt;Mais le problème sera le même avec une image dans le HTML : si un utilisateur est malvoyant, il ne la verra pas !&lt;/div&gt;\n\n</p>\n<p>Et c&#39;est là le rôle de l’attribut <code>alt</code>, qui est obligatoire dans la balise <code>&lt;img /&gt;</code>. En effet, dans le cas où une image ne serait pas chargée pour une raison ou une autre (erreur de connexion, lecteur d’écran pour personne malvoyante…), c&#39;est la description contenue dans l’attribut <code>alt</code> qui sera affiché ! Ainsi, le lien reste toujours cliquable. Pensez donc toujours à remplir cette balise consciencieusement.</p>\n<h3 id=\"une-solution-\">Une solution ?</h3>\n<p>Bien sûr ! Et elle se trouve dans un autre article sur ce blog ! &#39;<a href=\"http://www.emmanuelbeziat.com/blog/changer-une-image-au-survol/\" title=\"Changer une image au survol\">Changer une image au survol</a>&#39;.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Pour conclure, voici un petit site pour vous aider à créer vos sprites : <a href=\"http://fr.spritegen.website-performance.org/\">Spritegen</a>, ainsi qu&#39;un autre pour optimiser la taille de vos images en les compressant sans en dégrader la qualité : <a href=\"http://www.smushit.com/ysmush.it/\">Smush.it</a>.</p>\n"},{"title":"Règles HTML/CSS pour les débutants","author":"Emmanuel B.","date":"2014-05-06 02:23:53","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"regles-htmlcss-pour-les-debutants","content":"<p>Écumant les forums de codage et autres coins de geeks, je me rends compte que les mêmes erreurs reviennent très souvent dans le code des débutants (et même de moins débutants). Alors, faute de pouvoir traquer et éradiquer les sources qui propagent du html écrit à la truelle et du javascript de 12 ans d’âge, je tente — vaille que vaille — d’éduquer les jeunes délinquants du markup dont je croise la prose.</p>\n<p>Et comme je suis une feignasse, plutôt que de répéter trouzmille fois les mêmes choses, j’en fais ici un condensé.</p>\n<h2 id=\"lexique\">Lexique</h2>\n<p>Le premier problème récurrent, c&#39;est de ne pas connaître les noms des différents éléments qui composent le code. C&#39;est bien plus compliqué d’exposer un problème quand on ne sait pas comment s&#39;appelle quelque chose. Aussi, voici un schéma explicatif très simple de la terminologie HTML/CSS.</p>\n<pre><code class=\"language-markup\">&lt;balise attribut=&quot;valeur&quot;&gt;\n</code></pre>\n<pre><code class=\"language-css\">déclaration {\n    propriété: valeur;\n}\n</code></pre>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Une déclaration CSS est composée de sélecteurs. Si vous ne voyez pas de quoi il s&#39;agit, voir l’article sur les <a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-les-selecteurs-partie1-css2/\" title=\"Principes du CSS – Les sélecteurs (Partie1 : cSS2)\">sélecteurs CSS</a>.&lt;/div&gt;\n\n</p>\n<p>Voilà ; dorénavant, interdiction de parler de &quot;propriétés html&quot; ou de &quot;balises css&quot;.</p>\n<h2 id=\"html\">HTML</h2>\n<h3 id=\"la-balise-br-\">La balise &lt;br /&gt;</h3>\n<p>Une erreur courante (Mais où avez-vous trouvé ça ?!) consiste à écrire la balise <code>&lt;br /&gt;</code> en inversant le sens d’auto-fermeture : <code>&lt;/br&gt;</code>. Ça n’existe pas. C&#39;est soit <code>&lt;br /&gt;</code> (xhtml ou html) soit <code>&lt;br&gt;</code> (html seulement) ; pas <code>&lt;/br&gt;</code> ni <code>&lt;br/&gt;</code> (l’espace n’est pas facultatif).</p>\n<p>Et cette balise ne sert qu&#39;à revenir à la ligne au sein d’un bloc de texte. Elle ne sert pas à sauter des lignes, ni à faire des marges.</p>\n<h3 id=\"attribut-alt-sur-les-images\">Attribut alt sur les images</h3>\n<p>L’attribut <code>alt=&quot;&quot;</code> est obligatoire sur les balises <code>&lt;img /&gt;</code>.</p>\n<h3 id=\"ouverture-et-fermeture-des-balises\">Ouverture et fermeture des balises</h3>\n<p>Les balises doivent être imbriquées proprement. C&#39;est à dire que lorsque vous ouvrez une balise puis une seconde, il faut refermer la seconde avant la première.</p>\n<p>Bon :</p>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;span&gt;\n    &lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Mauvais :</p>\n<pre><code class=\"language-markup\">&lt;div&gt;\n    &lt;span&gt;\n    &lt;/div&gt;\n&lt;/span&gt;\n</code></pre>\n<h3 id=\"balises-d-pr-ci-es\">Balises dépréciées</h3>\n<p>On est en 2014 au moment de la rédaction de cet article, et je vois encore régulièrement du code obsolète depuis l’arrivée du xhtml (2001). Il est important de noter que désormais (et depuis longtemps maintenant), on sépare la structure et le contenu (html) de la mise en forme (css).</p>\n<p>Il est primordial de comprendre ce principe de sémantique du HTML. Lorsque qu&#39;on utilise une balise <code>&lt;em&gt;</code>, ce n’est pas pour mettre du texte en italique, c&#39;est pour créer une <a href=\"https://fr.wiktionary.org/wiki/emphase\" title=\"emphase — Wiktionnaire\">emphase</a> ; or, il se trouve que dans les règles d’écriture occidentale, l’emphase est exprimée en italique. Exemple : &quot;Tu es <em>vraiment</em> sûr de ton coup ?&quot;.</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;On retient : on n’utilise pas des balises pour leur rendu, mais pour leur <strong>sens sémantique</strong>.&lt;/div&gt;\n\n</p>\n<p>De fait, toutes les balises et attributs à but esthétique doivent être définitivement supprimées de vos pages : <code>&lt;center&gt;</code>, <code>&lt;font&gt;</code>, <code>&lt;basefont&gt;</code>, <code>&lt;strike&gt;</code>.</p>\n<p>À noter que plusieurs balises dépréciées en xhtml ont fait leur retour en html5 <strong>avec un nouveau sens sémantique</strong> (tout relatif, personnellement j’ai surtout l’impression qu&#39;ils savaient pas quoi en foutre). Leurs spécifications sont assez peu claires, voire franchement brouillons. Je vous les liste quand même : <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;s&gt;</code>, <code>&lt;u&gt;</code>.</p>\n<p>De la même façon, les attributs liés au style doivent dégager : <code>alink</code>, <code>background</code>, <code>bgcolor</code>, <code>link</code>, <code>vlink</code>, <code>align</code>, <code>valing</code>, <code>hspace</code>, <code>vspace</code>, <code>border</code>, <code>height</code>, <code>width</code>, <code>nowrap</code>, <code>star</code>, <code>clear</code>, <code>noshade</code>…</p>\n<h3 id=\"marquee\">marquee</h3>\n<p>La balise <code>&lt;marquee&gt;</code> n’est pas une balise standard, n’a jamais fait partie des spécifications et n’en fera jamais partie. Ne l’utilisez pas.</p>\n<h3 id=\"les-tableaux\">Les tableaux</h3>\n<p>Les tableaux sont utilisés pour mettre des données tabulaires, comme des résultats sportifs ou des notes.</p>\n<p>En aucun cas il n’est permis de s&#39;en servir pour mettre en page son site.</p>\n<h3 id=\"attributs-d-v-nements\">Attributs d’événements</h3>\n<p>Les attributs d’événements, utilisés auparavant pour faire des appels aux fonctions javascript, sont à proscrire. Utilisez les gestionnaires d’événements directement dans un code javascript.</p>\n<p>Parmi ces attributs, on trouve notamment <code>onclick</code>, <code>onblur</code>, <code>onmouseover</code>, <code>onmouseout</code>.</p>\n<h3 id=\"les-mots-rallonge\">Les mots à rallonge</h3>\n<p>Très souvent, on tombe sur des sujets rapportant des comportements étranges de texte qui dépasse de leur contenu. Et le texte en question, est une ligne infinie de caractères, soit du &quot;aaaaaaaaaaaaaaaaaaaaaaaaa&quot; (beaucoup plus long, entendons-nous), soit du &quot;oihoihgopizeagjae&quot;. Le fait est qu&#39;aucun mot n’est aussi long, et que le texte se met en forme aux espaces qui le composent. Donc sans espace, il n’ira jamais à la ligne sans une propriété pour l’y forcer. Donc avant de songer à l’y forcer, utilisez du vrai texte factice avec un <a href=\"http://fr.lipsum.com/\" title=\"Lipsum\">générateur de lipsum</a>, qui sert justement à ça.</p>\n<h3 id=\"les-balises-structurantes\">Les balises structurantes</h3>\n<p>Les nouvelles balises de structure introduites en html5 (à savoir <code>header</code>, <code>aside</code>, <code>footer</code>, <code>nav</code>, <code>figure</code>, <code>section</code>, etc.) ne remplacent pas les <code>div</code>. On utilise toujours des <code>div</code> si on doit faire un bloc qui n’a pas de vocation sémantique particulière.</p>\n<p>De la même façon, ces balises ne sont pas uniques (sauf <code>main</code>) et ne dispensent donc pas d’utiliser classes et ID pour les cibler en CSS plutôt que de simplement utiliser leur nom d’élément. En clair, faites comme avant, mais en remplaçant les <code>div</code> lorsqu&#39;un élément sémantique est possible. Exemple : <code>&lt;header id=&quot;header&quot;&gt;</code>.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;En ce moment, la tendance est à l’utilisation quasi-exclusive de classes et à l’abandon des ID. Mais c&#39;est bien une tendance, et non une spécification du langage. Faites comme vous le sentez, mais n’abusez pas des ID !&lt;/div&gt;\n\n</p>\n<h3 id=\"la-balise-p-\">La balise &lt;p&gt;</h3>\n<p>La balise <code>&lt;p&gt;</code> est utilisée pour mettre en forme des paragraphes. Si vous n’avez pas besoin de faire des paragraphes (C&#39;est à dire plusieurs blocs de textes espacés entre eux), rien ne vous force à utiliser cette balise. Et contrairement à ce que j’ai pu lire, rien n’oblige les images à être contenues dans un paragraphe.</p>\n<h3 id=\"l-attribut-style\">L’attribut style</h3>\n<p>Évitez d’utiliser l’attribut <code>style=&quot;&quot;</code> pour mettre du CSS directement dans votre html. Outre le fait que ça rende le code difficile à maintenir (principalement à cause du problème de poids, cf. l’article sur le <a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-poids-des-declarations/\" title=\"Principes du CSS – Poids des déclarations\">poids des déclarations</a>), ça brise la séparation contenu / mise en forme.</p>\n<h2 id=\"css\">CSS</h2>\n<h3 id=\"position\">Position</h3>\n<p>L’erreur la plus répandue est de croire qu&#39;utiliser la propriété <code>position</code> est une bonne idée pour mettre en forme son site. C&#39;est <strong>FAUX</strong>. C&#39;est une très mauvaise idée, ce n’est pas fait pour ça, et ça ne vous apportera que des problèmes. Le positionnement est un système particulier qui demande d’être absolument maîtrisé avant de l’utiliser, sous peine de voir son site faire n’importe quoi.</p>\n<h3 id=\"les-pourcentages\">Les pourcentages</h3>\n<p>Une autre croyance qui a la vie dure : mettre toutes les valeurs en % serait mieux. Ce n’est pas le cas. Il n’y a que de rares cas où l’utilisation des % se justifie (notamment les grilles CSS, comme <a href=\"http://960.gs/\">960.gz</a> ou celles utilisé par <a href=\"http://getbootstrap.com/\">Bootstrap</a> ou <a href=\"http://foundation.zurb.com/\">Foundation</a>).</p>\n<p>Vous pouvez très bien faire un site extensible en n’utilisant qu&#39;un minimum de valeurs en % (un exemple : <a href=\"http://www.emmanuelbeziat.com/blog/aligner-trois-colonnes-proprement/\" title=\"Aligner trois colonnes proprement\">Aligner trois colonnes proprement</a>. Et même dans ces cas-là, n’utilisez pas les % pour des marges, elles n’ont pas à être extensibles !</p>\n<p>Les pourcentages apportent beaucoup plus de problèmes et de problématiques que de solutions, alors il faut être parfaitement certain de maîtriser son environnement avant de s&#39;en servir. <a href=\"https://jsfiddle.net/ee944u5t/\">Voici un exemple concret</a>, rencontré par un internaute d’OpenClassrooms : lorsqu&#39;on agrandi la fenêtre de rendu, on remarque un dépassement vertical (en bas). Les marges ayant été définies de façon relative (avec des pourcentages), celles-ci sont calculées par rapport à la largeur du parent, même pour les marges verticales. Donc en étirant la largeur du conteneur, on étire la marge verticale du bloc enfant… Bref, n’importe quoi.</p>\n<p>Et pensez aux propriétés <code>min-width</code> et <code>max-width</code>.</p>\n<p>Et <code>width: 100%;</code>, <a href=\"http://blog.goetter.fr/articles/width-100-tu-es-le-mal/\" title=\"Width 100%, tu es le mal !\">n’y pensez même pas</a>.</p>\n<h3 id=\"les-hauteurs\">Les hauteurs</h3>\n<p>Une erreur courante : vouloir à tout prix contrôler la hauteur des éléments de son site. C&#39;est une <strong>mauvaise</strong> idée. Une page s&#39;adapte en hauteur en fonction de son contenu. La hauteur que vous définissez par rapport à ce que vous voyez sur votre écran ne correspond pas à ce que verront les autres. Si quelqu&#39;un zoome le texte pour des questions de visibilités, si un écran est trop petit et réduis l’espace, alors le contenu va dépasser le contenant, et ce sera à la fois moche et illisible. Sauf cas très spécifiques, ne touchez pas à la hauteur des éléments, laissez-les prendre la hauteur qu&#39;ils veulent. Pour décoller le contenu des bords d’un conteneur, pensez au padding !</p>\n<h3 id=\"float-et-display\">Float et display</h3>\n<p>&lt;p&gt;Il est parfaitement inutile d’essayer de donner à un élément flottant une propriété <code>display</code>. Un flottant est <strong>TOUJOURS</strong> de type <em>block</em>, et il est <strong>IMPOSSIBLE</strong> de changer ça.</p>\n<h3 id=\"le-reset-css\">Le reset CSS</h3>\n<p>Une autre mauvaise idée. Plus d’explications dans l’article <a href=\"http://www.emmanuelbeziat.com/blog/doucement-sur-le-box-sizing/\" title=\"Doucement sur le box-sizing !\">Doucement sur le box-sizing !</a>.</p>\n<p>Et surtout, évidemment, surtout pas ça :</p>\n<pre><code class=\"language-css\">* { margin: 0; padding: 0; }\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Difficile d’être exhaustif, aussi cette petite liste sera complétée au fur et à mesure. Bref, maintenant que vous avez lu ça, vous avez de bonnes cartes en main. Alors faites du bon code !</p>\n"},{"title":"Participez au web !","author":"Emmanuel B.","date":"2014-06-17 20:58:08","tags":["bonnes pratiques","html/css","javascript"],"categories":["Tutoriels"],"template":"post.vue","basename":"participez-au-web","content":"<p>Internet, c&#39;est un peu n’importe quoi. Ça fait un moment que ça existe, que tout le monde s&#39;en sert, qu&#39;on fait plein de trucs avec ; mais on s&#39;est aussi rendu compte, au bout d’un moment, que faire des trucs &quot;à peu près&quot;, ça ne pouvait fonctionner qu&#39;un temps.</p>\n<p>Ce n’est que récemment qu&#39;on s&#39;est dit que ce serait bien d’avoir des règles, des conventions, des optimisations, des structures. Plein de &quot;bonnes pratiques&quot; fleurissent tous les ans, les normes évoluent.</p>\n<h2 id=\"le-web-ce-merdier\">Le web, ce merdier</h2>\n<p>L’un des problèmes du web, c&#39;est d’abord son accessibilité. J’entend par là que n’importe qui peut faire son site ; c&#39;est à la fois bien et mal, car ça donne naissance au meilleur comme au pire…</p>\n<p>Tout le monde peut apprendre le HTML / CSS / JavaScript / PHP. On trouve une foule de tutoriels, de cours et de ressources sur internet pour ça. Mais bien souvent, ces ressources datent, sont incomplètes et/ou véhiculent de nombreuses erreurs (même les plus réputées, et même lorsqu&#39;elles prétendent donner des certifications : <a href=\"http://fr.openclassrooms.com/\">OpenClassrooms</a>, <a href=\"http://www.w3schools.com/\">W3Schools</a>), que les élèves avides de savoir apprennent, assimilent, reproduisent et transmettent à leur tour. C&#39;est à cause de ça qu&#39;on retrouve encore aujourd’hui des horreurs de ce genre dans de nombreux sites :</p>\n<ul>\n<li>{ margin: 0; padding: 0; }</li>\n</ul>\n<p>Donc, il est important de faire un peu de ménage, lien après lien, site après site.</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Pensez bien à vérifier les informations que vous trouverez sur internet, et à les questionner (Même sur ce blog) !&lt;/div&gt;\n\n</p>\n<h2 id=\"que-faire-\">Que faire ?</h2>\n<p>La première chose, c&#39;est bien sûr <strong>d’améliorer continuellement vos compétences et vos connaissances</strong>. Ça passe par la lecture de tout plein d’articles, de sources diverses, de vérifications d’informations.</p>\n<h3 id=\"les-r-f-rences-et-documentations\">Les références et documentations</h3>\n<p>Il y a tout d’abord les références des différents langages. Ces sources sont les plus fiables, alors quand vous voulez vérifier une information, privilégiez-les !</p>\n<ul>\n<li>HTML/CSS : <a href=\"http://www.w3.org/wiki/Main_Page\" title=\"W3C wiki\">Le wiki du W3C</a></li>\n<li>PHP : <a href=\"http://www.php.net//manual/fr/index.php\" title=\"Documentation PHP\">Documentation du PHP</a></li>\n<li>jQuery : <a href=\"http://api.jquery.com/\" title=\"documentation API\">Documentation et API de jQuery</a></li>\n<li>Ruby : <a href=\"https://www.ruby-lang.org/fr/documentation/\" title=\"Documentation Ruby\">Documentation Ruby</a></li>\n<li>WordPress : <a href=\"http://codex.wordpress.org/fr:Accueil\" title=\"Codex WordPress\">Codex WordPress</a></li>\n<li>Bootstrap : <a href=\"http://getbootstrap.com/getting-started/\" title=\"Get Bootstrap\">Documentation Bootstrap</a></li>\n</ul>\n<p>Pratiquement pour chaque langage / support / Framework, vous trouverez une documentation officielle.</p>\n<h3 id=\"les-sources-fiables\">Les sources fiables</h3>\n<p>Ces sources ne sont pas officielles, mais elles sont de qualité.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/\" title=\"Mozilla Developer Network\">Mozilla Developer Network</a></li>\n<li><a href=\"http://www.alsacreations.com/\" title=\"alsacreatuibs\">Alsacréations</a> (certains articles peuvent être obsolètes, attention)</li>\n</ul>\n<p>Évidemment, il faut bien sûr accepter une remise en question perpétuelle de ce qu&#39;on &lt;del&gt;sait&lt;/del&gt; croyait savoir… Soyez curieux(ses), lisez des blogs, des articles…</p>\n<h2 id=\"la-pierre-l-difice\">La pierre à l’édifice</h2>\n<p>Évidemment, de bonnes connaissances ne servent à rien si vous les gardez pour vous. Bien sûr, vous devez appliquer toutes ces bonnes pratiques et connaissances dans vos projets, mais ça ne suffit pas. Il faut <strong>partager votre savoir</strong>.</p>\n<p>Il y a plein de façons de le faire :</p>\n<ul>\n<li><strong>Intervenir sur les forums</strong>, comme ceux d’Alsacréations ou d’OpenClassrooms (ou autres) pour aider les autres et leurs conseiller de bonnes pratiques, de bon liens, etc. Vous n’êtes pas obligés d’avoir la réponse à un problème pour suggérer des corrections ou de meilleures façons de faire !</li>\n<li><strong>Participer à l’améliorations des ressources existantes</strong>. Pour exemple, Mozilla Developer Network est librement éditable, apportez vos corrections, vos précisions, vous découvertes. Et n’hésitez pas à participer à la traduction ! Vous pourrez trouver de nombreux projets libres sur internet (principalement sur GitHub) qui ne demandent qu&#39;à être améliorés, alors jetez-vous à l’eau.</li>\n<li><strong>Corriger ce qui peut l’être</strong>. Si vous tombez sur un tutoriel ou une ressource qui présente une erreur, une mauvaise pratique ou autre, signalez-le à l’auteur. Il ou elle sera sûrement content d’avoir des retours, et vous pourrez discuter tranquillement de la question ; les contacts, c&#39;est important !</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>N’oubliez pas que le web est participatif ! Votre aide est toujours la bienvenue !</p>\n<p>Pour finir, voici quelques blogs que je recommande de suivre :</p>\n<ul>\n<li><a href=\"http://www.emmanuelbeziat.com/blog/\">Emmanuel B.</a> &lt;small&gt;(Ben quoi ?)&lt;/small&gt;</li>\n<li><a href=\"http://www.js-attitude.fr/\">JS-Attitude</a> (Fouillez au milieu des annonces de formations, y a des articles qui tuent !)</li>\n<li><a href=\"http://lea.verou.me/\">Lea Verou</a></li>\n<li><a href=\"http://davidwalsh.name/\">David Walsh</a></li>\n<li><a href=\"http://www.inpixelitrust.fr/blog/\">Stéphanie Walter</a></li>\n<li><a href=\"http://informatique.lamecarlate.net/\">Codex Sphinxial</a></li>\n<li><a href=\"http://blog.goetter.fr/\">Raphaël Goetter</a></li>\n<li><a href=\"http://marieguillaumet.com/\">Marie Guillaumet</a></li>\n</ul>\n"},{"title":"Conventions et normes de codage","author":"Emmanuel B.","date":"2014-08-01 22:47:55","tags":["html/css","javascript"],"categories":["Tutoriels"],"template":"post.vue","basename":"conventions-et-normes-de-codage","content":"<p>Je suis récemment tombé sur un joli traité des bonnes manières et autres politesses lorsqu&#39;on est développeur, écrit par <a href=\"http://leny.me\" title=\"Pierre-Antoine Delnatte\">Pierre-Antoine &quot;Lisarael&quot; Delnatte</a> et que je vais repomper joyeusement ici (avec son aimable autorisation), parce que les conventions, c&#39;est important.</p>\n<h2 id=\"principes-g-n-raux\">Principes généraux</h2>\n<ul>\n<li>Tous les fichiers sont encodés en UTF-8, sans BOM.</li>\n<li>Indentation en tabulation. 1 niveau d’indentation = 1 tabulation.</li>\n<li>Les commentaires sont importants, mais il faut commenter intelligemment : un commentaire inutile prend de la place pour rien.</li>\n<li>On se décide pour une langue : on nomme toutes les variables / classes en <strong>anglais</strong> ou en <strong>français</strong> (et, si possible, mais facultativement, les commentaires aussi), et on s&#39;y tient : on ne jongle pas d’une langue à l’autre.</li>\n<li>Les <em>TODO</em> sont conseillés, mais il faut les détailler : rien ne dit que c’est vous qui repasserez dessus.</li>\n<li>Tout projet de code devrait être stocké sur un gestionnaire de version comme <em>Git</em>, via la plateforme <a href=\"http://github.com/\">GitHub</a>.</li>\n<li>Corriger un fichier qui ne respecte pas les conventions n’est <strong>jamais</strong> une perte de temps.</li>\n</ul>\n<h3 id=\"kiss-keep-it-simple-stupid-\">KISS: Keep it simple, stupid!</h3>\n<p><em>La simplicité est la sophistication suprême</em> : un code simple est plus lisible et plus facile à maintenir.</p>\n<h3 id=\"dry-don-t-repeat-yourself\">DRY: Don’t repeat yourself</h3>\n<p>Si la même portion de code se retrouve deux fois ou plus dans un script, on en fait une fonction. Si la même portion de code se retrouve deux fois ou plus dans une classe, on en fait une méthode.</p>\n<h3 id=\"yagni-you-aren-t-gonna-need-it\">YAGNI: You aren’t gonna need it</h3>\n<p>Rien ne sert de coder une méthode qui n’a pas d’implémentation ou d’utilité immédiate.</p>\n<h3 id=\"don-t-be-shy-ask-\">Don’t be shy, ask!</h3>\n<p>Il n’y a pas de honte à demander de l’aide, surtout avant d’attaquer une nouvelle fonctionnalité.</p>\n<p>Il ne devrait jamais y avoir une portion de code qui ne soit pas couverte par au moins deux personnes.</p>\n<h2 id=\"html\">HTML</h2>\n<ul>\n<li>Indentation stricte.</li>\n<li><p>Respect de la syntaxe XML :</p>\n</li>\n<li><p>pas de balises d’ouverture sans balise de fermeture (par exemple <code>&lt;br /&gt;</code> au lieu de <code>&lt;br&gt;</code>,</p>\n</li>\n<li>balises et attributs en minuscules,</li>\n<li><p>les attributs booléens doivent avoir une valeur (par exemple <code>checked=&quot;checked&quot;</code>).</p>\n</li>\n<li><p>Le contenu d’un élément block doit être à la ligne, celui d’un élément inline peut être au choix à la ligne ou non. (exception acceptable pour la balise <code>&lt;p&gt;</code>).</p>\n</li>\n<li>À l’exception notable d’<em>html5shiv</em> pour IE, les balises <code>&lt;script&gt;</code> sont déclarées en fin de <code>&lt;body&gt;</code>.</li>\n<li>Validez toujours votre code avec le <a href=\"http://validator.w3.org/\" title=\"Validator W3C\">validateur w3c</a>.</li>\n</ul>\n<h2 id=\"css-et-d-riv-s\">CSS et dérivés</h2>\n<ul>\n<li>Indentation stricte.</li>\n<li>Préférer les propriétés raccourcies (<code>font</code>, <code>background</code>, <code>margin</code>…).</li>\n<li>Quand on utilise des propriétés <code>-vendor-prefix</code>, on n’oublie pas de mettre la propriété finale de la spec à la fin. Et surtout, on vérifie si c&#39;est nécessaire (voir l’article &quot;<a href=\"http://www.emmanuelbeziat.com/blog/prefixes-css-jusqua-quand/\" title=\"Préfixes CSS, jusqu’à quand ?\">Préfixes CSS : jusqu&#39;à quand</a>&quot; ) !</li>\n<li>Pas de hack, sauf si <em>vraiment</em> pas le choix. Préférer les <em>commentaires conditionnels</em> de HTML pour rajouter des feuilles de styles spécifiques ou des classes sur l’élément <code>&lt;html&gt;</code>.</li>\n<li><p>En <em>Less</em>, <em>Sass</em> ou <em>Stylus</em> :</p>\n</li>\n<li><p>On utilise des variables explicites, et si elles sont globales, on les définit en tête de module ou dans un fichier séparé pour les <em>superglobales</em>.</p>\n</li>\n<li>Nommage des variables en <strong>camelCase</strong>.</li>\n</ul>\n<h2 id=\"javascript-et-d-riv-s\">JavaScript et dérivés</h2>\n<ul>\n<li>JavaScript est un langage peu rigoureux, il faut l’être à sa place.</li>\n<li><code>&quot;use strict&quot;</code> est obligatoire.</li>\n<li>Encapsulation de tout le code, aucune empreinte globale, et, si nécéssaire, créer un <strong>namespace</strong>.</li>\n<li>Indentation stricte.</li>\n<li>Chaînes de caractère en double quotes (<code>&quot;string&quot;</code>).</li>\n<li>Ouverture de bloc sur la même ligne, fermeture sur une nouvelle ligne.\n<strong>Exemple :</strong></li>\n</ul>\n<p>var test = function( param ) {\n// some code\n};</p>\n<ul>\n<li>Toutes les variables d’un bloc sont déclarées au début de celui-ci.</li>\n<li><p>Puisque JavaScript est un langage à <em>typage faible</em>, on ne <em>transtype</em> pas une variable, et il est conseillé d’utiliser la <strong>notation hongroise</strong> pour les variables, en préfixant le nom d’une variable par son type :</p>\n</li>\n<li><p>sVariable (<code>string</code>)</p>\n</li>\n<li>iVariable (<code>number</code>)</li>\n<li>bVariable (<code>boolean</code>)</li>\n<li>aVariable (<code>array</code>)</li>\n<li>oVariable (<code>object</code>)</li>\n<li>fVariable (<code>function</code>)</li>\n<li>gVariable (<code>Google API Object</code>)</li>\n<li>$Variable (<code>jQuery Object</code>)</li>\n<li><p>mVariable (<code>mixed</code>)</p>\n</li>\n<li><p>Les variables sont nommées en <strong>camelCase</strong>, les classes en <strong>PascalCase</strong>.</p>\n</li>\n<li>Si on veut stocker des données dans le code HTML (avec parcimonie et sagesse), on utilise les attributs <code>data-</code>.</li>\n<li>Attention à ne pas laisser des appels à la <code>console</code> dans les fichiers en production.</li>\n<li>Les scripts doivent être validés par <a href=\"http://www.jshint.com/\" title=\"JSHint\">JSHint</a> avant mise en production.</li>\n</ul>\n"},{"title":"« Votre idée ne vaut rien » — Ploum","author":"Emmanuel B.","date":"2014-10-31 16:30:22","tags":["lien"],"categories":["Diatribes"],"template":"post.vue","basename":"votre-idee-ne-vaut-rien-ploum","content":"<p>Salut à toi, internaute égaré !</p>\n<p>Si tu es un régulier ou une régulière ici, tu as peut-être déjà lu cet article fort bien écrit <a href=\"http://www.emmanuelbeziat.com/blog/linformatique-facile-ma-tue/\" title=\"L’informatique facile m’a tué\">&#39;L’internet facile m&#39;a tué&#39;</a>. Au détour de mes pérégrinations sur la toile, je suis tombé sur un article qui étoffe davantage la question de l’idée qui n’en est pas une.</p>\n<p>Sans plus attendre, je vous laisse aller sur le blog de <em>Lionel &quot;Ploum&quot; Dricot</em> pour lire ce joli pavé condensé : <a href=\"https://ploum.net/votre-idee-ne-vaut-rien/\" title=\"Votre idée ne vaut rien\">&#39;Votre idée ne vaut rien&#39;</a>.</p>\n<p>Et toi cher Ploum, si d’aventure tu arrivais ici, je tiens à t&#39;applaudir des deux mains, et de tout le reste.</p>\n"},{"title":"Pourquoi j'ai désactivé mon répondeur","author":"Emmanuel B.","date":"2014-11-11 05:37:02","tags":["téléphone"],"categories":["Diatribes"],"template":"post.vue","basename":"pourquoi-jai-desactive-mon-repondeur","content":"<p>On &lt;del&gt;m&#39;emmerde&lt;/del&gt; me demande souvent pourquoi on ne peut pas me laisser de message sur mon répondeur téléphonique. Souvent, on me demande si c&#39;est un bug. Parfois, mon interlocuteur est persuadé d’avoir quand même laissé un mot. En effet, j’ai choisi, il y a déjà un peu plus d’un an, de désactiver ma messagerie téléphonique. Explications.</p>\n<h2 id=\"je-d-teste-le-t-l-phone\">Je déteste le téléphone</h2>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2014/11/phones-icons.png\" alt=\"phones-icons\"></p>\n<p>Certains adolescents passent / ont passé leur vie l’oreille vissée à des appareils plus ou moins évolués. Je me souviens encore de ma sœur qui, dans les années 90 et à la maison, monopolisait la ligne pendant des heures. Je n’ai jamais compris pourquoi, quel plaisir elle pouvait bien en retirer. Cette machine infernale m&#39;a toujours fait flipper. D’un seul coup, sans prévenir, ça gueule dans la maison sa sonnerie ignoble. Ça fait sursauter, ça brise le calme et ça stresse d’un coup.</p>\n<p>C&#39;est d’autant plus pénible qu&#39;il faut arrêter tout ce qu&#39;on fait et se précipiter pour répondre. Peu importe ce qu&#39;on est en train de faire, il faut abandonner, tout lâcher sur ses pieds, et courir pour placer un &quot;allô&quot; mi-agacé mi-faussement-accueillant.</p>\n<p>C&#39;est encore pire depuis que les téléphones sont portables, l’intrusion est totale jusqu&#39;en dehors de chez soi. Si on tombe sur un bavard, ça peut durer des heures, on transpire de l’oreille comme un dégueulasse, et pour peu qu&#39;on n’ai pas de kit mains libres, on est complètement handicapé. Le pire étant qu&#39;on ne peut pas simplement dire &#39;bon, je te laisse parce que j’en ai marre d’être au téléphone&#39; sans passer pour un odieux connard. Mais encore plus que ça, la timidité maladive de ma jeunesse a longtemps rendu impossible de nombreuses communications.</p>\n<p>Pour toutes ces raisons <strong>je n’aime pas le téléphone</strong>, au sens <em>vocal</em> de la machine. Malgré quelques exceptions bien sûr, ceux qui m&#39;ont déjà appelé ont probablement noté que j’ai tendance à vouloir écourter l’appel le plus vite possible, voire tout simplement à ne pas répondre pour éviter cette situation.</p>\n<h2 id=\"je-d-teste-encore-plus-les-r-pondeurs\">Je déteste encore plus les répondeurs</h2>\n<p>Et dans tout ce malaise, vient le répondeur. L’effet le plus pervers de l’appel téléphonique. En effet, si on ne peut pas ou —&nbsp;Comme ça m&#39;arrive &lt;del&gt;parfois&lt;/del&gt; souvent&nbsp;— qu&#39;on n’a pas envie de répondre, on se retrouve avec un message vocal sur son répondeur. La pire des punitions.</p>\n<p>Honnêtement, je pense que ce truc a été inventé avec de bonnes intentions. Le genre de bonnes intentions qui conduit le monde à des cataclysmes et qui pavent probablement l’enfer, s&#39;il existe.</p>\n<h3 id=\"c-est-quoi-le-probl-me-\">C&#39;est quoi le problème ?</h3>\n<p>Pour peu que je sois occupé, je risque de ne pas entendre mon téléphone sonner. S&#39;il y a plusieurs appels, je me retrouve avec plusieurs messages à écouter à la fin de la journée (Généralement, ils sont tous urgentissimes) ; j’ai horreur de ça. Et je ne sais pas pour vous, mais moi je n’ai pas de notifications particulières en cas de babillardes laissées à mon intention. Ce qui fait que je ne sais pas qu&#39;il y en a avant d’aller vérifier &quot;par hasard&quot; ou bien de recevoir un sms qui m&#39;informe que j’ai 21 messages en attente (tous urgentissimes en général, depuis 11 jours). Messages que je n’aurais pas envie d’écouter (Vous regardez souvent les journaux télévisés du mois dernier vous ?).</p>\n<p>Perversité supplémentaire, quelqu&#39;un qui a laissé sa missive tient pour acquis que j’en ai bien pris note et s&#39;attend forcément à ce que je le rappelle —&nbsp;souvent dans l’heure. Il va donc très probablement se frustrer de ma non-réponse, et venir m&#39;en remettre une nouvelle couche en exprimant en sus sa colère et l’urgence de la situation. Et toujours attendre que je rappelle —&nbsp;ce que je ne ferais pas, puisque c&#39;est de toutes façons beaucoup trop tard et que, à moins que ce ne soit pour m&#39;offrir plein d’argent, je n’ai probablement pas envie de parler. <strong>En plus, il faut se justifier de son absence…</strong></p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Notez que toutes les urgences évoquées ici n’en sont jamais vraiment ; dans 95% des cas, c&#39;est juste de l’impatience de la part de l’interlocuteur.&lt;/div&gt;\n\n</p>\n<p>Tant qu&#39;on y est, voici un florilège des messages que j’ai déjà reçu (et auxquels je n’ai jamais répondu pour des raisons qui me semblent évidentes)&nbsp;:</p>\n<ul>\n<li>&#39;C&#39;est moi, rappelle vite.&#39; →&nbsp;À moins d’avoir une voix reconnaissable entre mille (ce qui est le cas de Roger Carel, mais c&#39;est à peu près tout —&nbsp;et il ne m&#39;appelle pas souvent), je n’ai aucune idée de qui il s&#39;agit.</li>\n<li>&#39;Shronjrour bronchrieur Bregiarh chrest jronchieur Grhajeuhsheu […], a bvientjoshr&#39; →&nbsp;Le cas typique où le type m&#39;appelait depuis l’anus d’un pachyderme. Ou avait un forfait voyelles. Dans tous les cas je ne sais ni qui c&#39;était, ni ce qu&#39;il voulait, et il n’y a aucune chance que je rappelle.</li>\n<li>&#39;Oui Jeanette, c&#39;est Marie-Clothilde, je voulais te reparler de la réunion à la chapelle Saint-Molusque pour le 12 […]&#39; →&nbsp;Rappeler pour signifier que c&#39;était un faux numéro ? Allons donc.</li>\n<li>&#39;Allô ? Allô ?&#39; →&nbsp;Le cas classique du gars qui n’a pas encore assimilé ce qu&#39;est un répondeur.</li>\n<li>&#39;C&#39;est votre banque, vous êtes à découvert depuis 11 mois. Merci de nous rappeler au plus vite.&#39; →&nbsp; Rappeler un numéro surtaxé qui va me prendre le pognon que je n’ai pas, pour vous confirmer que j’ai pas un copeck et vous entendre me conseiller de vite renflouer mon compte (comme si je trouvais régulièrement des liasses de 500 dans les replis de mon canapé)&nbsp;? J’en rêve&nbsp;!</li>\n<li><strong>Cas particulier&nbsp;:&nbsp;</strong> &#39;Ouais.&#39; →&nbsp;Mon père, ce héro, qui adore signifier que les longues annonces de répondeur l’emmerdent, et compense le temps passé en omettant de préciser le motif de son coup de bigot. Alors je le rappelle, mais il ne répond pas non plus ; du coup je lui laisse un message pour demander pourquoi il a appelé.</li>\n</ul>\n<p>C&#39;est bien sûr un échantillon, mais c&#39;est assez parlant.</p>\n<h2 id=\"alors-j-ai-agi\">Alors j’ai agi</h2>\n<p>Pour toutes ces raisons, <strong>j’ai désactivé totalement mon répondeur.</strong> C&#39;est aussi simple que ça. Il y a juste un message qui dit que je ne suis pas disponible et qui suggère de m&#39;envoyer un sms ou un mail, ou bien de rappeler plus tard. Je ne laisse le choix à personne.</p>\n<p>D’abord, pour les cas que je sais &quot;importants&quot;, mon téléphone affiche très bien la liste des numéros qui m&#39;ont appelé. S&#39;ils font partie de mon répertoire, je sais si je dois rappeler ou si ça peut attendre. Ensuite, la plupart des gens avec qui je communique de façon régulière m&#39;envoient un SMS, ou bien utilisent un autre biais (Skype en tête), et ont rarement besoin de me parler de vive voix. Les moins réguliers envoient très bien leurs emails, et je m&#39;en satisfait parfaitement.</p>\n<p>En plus, un petit texte s&#39;assimile et se comprend aussi bien voire beaucoup mieux qu&#39;une conversation téléphonique —&nbsp;surtout par répondeurs interposés&nbsp;— principalement parce que les gens ne vont pas droit au but : on papote, on tourne autour du pot, on ne sait plus trop où on veut en venir. Et je ne comprend pas les flemmards qui préfèrent appeler pour dire trois banalités sans importance plutôt que de simplement taper quelques mots, à plus forte raison maintenant que les téléphones ont autant de touches que de lettres et des fonctionnalités pour accélérer la saisie, corriger les fautes, suggérer des mots et même s&#39;occuper de la ponctuation.</p>\n<h3 id=\"et-vous-\">Et vous ?</h3>\n<p>Franchement, à l’heure des smartphones, des forfaits aux sms illimités, des applications de messagerie de tous types (Facebook, Twitter, What&#39;s App, Skype) et des mails qui n’ont jamais été aussi nombreux, pourquoi encore s&#39;emmerder avec cet instrument archaïque qu&#39;est le répondeur téléphonique ? C&#39;est tout l’inverse de ce qu&#39;on recherche aujourd’hui : la visibilité, l’efficacité, et l’instantanéité. Bref, ça n’a plus sa place dans ce monde pour moi.</p>\n<p>Alors vraiment, si vous aussi vous n’aimez pas votre répondeur, arrêtez d’hésiter&nbsp;: Désactivez-le une bonne fois pour toutes.</p>\n"},{"title":"Comment bien suivre un tutoriel","author":"Emmanuel B.","date":"2014-12-21 22:07:11","tags":["aide"],"categories":["Tutoriels"],"template":"post.vue","basename":"comment-bien-suivre-un-tutoriel","content":"<p>&#39;Ça ne marche pas&#39; est une rengaine que je lis bien souvent, sur ce blog ou sur divers forums sur lesquels je sévis. Le problème est souvent le même : un manque de méthodologie.</p>\n<p>Voyons comment bien suivre un tutoriel.</p>\n<h2 id=\"conna-tre-la-cible\">Connaître la cible</h2>\n<p>Tous les tutoriels trouvés sur le net n’ont pas la même portée, certains s&#39;adressent à des débutants et les guident pas à pas, d’autres demandent certains prérequis et se contentent de livrer des explications sommaires (qu&#39;il est parfois dur de suivre, même en maîtrisant le sujet).</p>\n<p>Ainsi, commencez-donc par voir si le niveau vous semble accessible, si l’article précise des prérequis nécessaires avant d’appréhender le tutoriel, et si les sources sont complètes.</p>\n<h2 id=\"bien-lire-le-contenu\">Bien lire le contenu</h2>\n<p>Très souvent, le contenu textuel est aussi riche en informations essentielles que les portions de code. Si vous ne les lisez pas attentivement, vous pouvez rater quelque chose, et ne pas comprendre certains points clés du tutoriel. Donc, <strong>lisez et relisez, méthodiquement, chaque point</strong>. Et bien sûr, lisez-le en entier, avant même de commencer à coder.</p>\n<h2 id=\"essayer-le-code-fourni\">Essayer le code fourni</h2>\n<p>Une erreur courante est de vouloir adapter directement le code proposé en exemple sur leur propre code. Ce faisant, le risque de rater une étape est beaucoup plus grand. Prenez toujours le temps de tester uniquement le code fourni, dans une page à part ou sur un site comme <a href=\"http://codepen.io/pen/\">Codepen</a>, <a href=\"http://dabblet.com/\">Dabblet </a>ou <a href=\"http://jsfiddle.net/\">JSfiddle</a>, selon vos besoins.</p>\n<p>Si le code seul ne marche pas, c&#39;est que vous avez peut-être manqué une information textuelle (voir point précédent). Si malgré une relecture attentive (du code comme des explications) vous ne voyez pas ce qui manque, vous pouvez fournir le lien de votre essai à l’auteur-e du tutoriel, qui vérifiera votre exemple et vous indiquera si vous vous êtes trompé ou corrigera son tutoriel s&#39;il y a effectivement un problème.</p>\n<h2 id=\"reproduire-proprement\">Reproduire proprement</h2>\n<p>Quand vient le temps d’intégrer le tutoriel à son propre code, faites très attention à bien respecter celui-ci. Très (trop) souvent là-aussi, j’ai vu des débutants présenter un code &quot;d’après un tutoriel&quot;, qui n’avait strictement plus rien à voir avec celui-ci. Donc, si vous avez du mal, <strong>essayez plutôt d’intégrer votre code à un exemple qui fonctionne</strong> (voir point précédent), plutôt que d’intégrer l’exemple à votre code existant.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Voilà, ce sont de petites méthodes simples, mais qui peuvent grandement vous faciliter la vie.</p>\n"},{"title":"Conseils aux graphistes web","author":"Emmanuel B.","date":"2015-01-15 05:03:48","tags":["design"],"categories":["Web"],"template":"post.vue","basename":"conseils-aux-graphistes-web","content":"<p>En tant que développeur front-end, il m&#39;arrive très souvent de recevoir des maquettes de graphistes, validées par le client, qu&#39;il ne me reste qu&#39;à intégrer. Cependant, de nombreux problèmes se présentent régulièrement, dus généralement au fait que le ou la graphiste qui s&#39;est occupée de ce travail n’est pas lui/elle-même intégrateur-trice et n’est donc pas au courant des possibilités et des difficultés de l’intégration. Parfois, c&#39;est également simplement un problème de mise en contexte.</p>\n<p>Voici donc un ensemble de points à éviter ou approfondir lorsque vous préparez vos maquettes.</p>\n<h2 id=\"le-bord-du-psd-n-est-pas-le-bord-de-l-cran\">Le bord du PSD n’est pas le bord de l’écran</h2>\n<p>Une première erreur très (trop) fréquente : tenir l’espace de travail comme &quot;complet&quot;. Une image valant mieux que beaucoup de mots, voilà une illustration du problème :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-1.jpg\" alt=\"photoshop-problem-1\"></p>\n<p>Le design est ici bien rendu, somme toute classique, et l’image sort de façon élégante du cadre du site pour aller rejoindre les bords. Oui, mais <strong>les bords en question ne représentent pas l’écran d’un visiteur</strong> potentiel du site. Ainsi, si on agrandi l’espace de travail pour se représenter la taille d’écran d’un visiteur du site, on se retrouve avec un problème graphique assez évident :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-02.jpg\" alt=\"photoshop-problem-02\"></p>\n<p>L’image ne va plus jusqu&#39;au bord. Outre le fait que ce soit très moche, le site perd toute sa consistance. Il n’y a aucun moyen de gérer ça proprement côté intégration : étirer l’image serait de toutes façons totalement affreux.</p>\n<p>Pensez donc toujours à choisir un espace de travail large et à tester votre rendu sur plusieurs types d’écran, et prévoyez différents cas de figure.</p>\n<h2 id=\"le-texte-n-est-pas-contr-lable\">Le texte n’est pas contrôlable</h2>\n<p>Un autre point essentiel : photoshop permet une gestion avancée des textes. On peut, à loisir, modifier le rendu d’une police, gérer son lissage, son inclinaison, lui donner divers effets, le positionner de façon fine et précise, etc.. <strong>Ce n’est pas le cas sur le web</strong> ! L’affichage d’une police dépend du navigateur, du système d’exploitation, du type d’écran… De même, les contrôles sur le texte sont relativement pauvres en CSS, et il est pour l’instant encore presqu&#39;impossible de faire — par exemple — des colonnes fluides de texte, des couleurs dégradées dans des lettres, ou bien simplement d’aligner au centre la dernière ligne d’un texte justifié.</p>\n<p>De même, je vois souvent des blocs de texte prévus dans les maquettes pour avoir un certain nombre de lignes, comme dans cet exemple :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-3.png\" alt=\"photoshop-problem-3\"></p>\n<p>Le soucis, c&#39;est qu&#39;il est impossible d’être sûr à 100% que le texte sera affiché tel quel sur le site. Il se peut très bien qu&#39;il dépasse, et donc que tout le principe de ce bout de design se retrouve par terre.</p>\n<p>De la même façon, laissez &quot;couler&quot; le texte. N’essayez pas de forcer des retours à la ligne (hors quelques titres), ce sera calamiteux pour l’intégrateur, et ingérable en cas de redimensionnement du conteneur.</p>\n<h2 id=\"limitez-les-couleurs\">Limitez les couleurs</h2>\n<p>Pour des raisons de pratique, il est déconseillé d’utiliser une tripotée de couleurs différentes. Certaines différences sont parfois trop subtiles pour être remarquées par l’intégrateur, qui n’a pas les mêmes réglages d’écran que vous, et se verra donc attribuer un retour client parce que &#39;la couleur n’est pas la bonne&#39;. De plus, les préprocesseurs CSS d’aujourd’hui (<em>SCSS</em>, <em>SASS</em>, <em>LESS</em>, <em>Stylus</em>…) permettent aux intégrateurs de définir des variables (entre autres pour les couleurs), et en avoir une cinquantaine pour toutes les couleurs de la maquette n’a aucun intérêt…</p>\n<p><strong>Limitez-vous à 5 couleurs maximum</strong> (c&#39;est une moyenne), avec au plus deux variations par couleur. Enfin, n’hésitez pas à créer un calque avec les couleurs en question, d’abord pour les réutiliser facilement vous-même (même si vous pouvez utiliser le nuancier de Photoshop prévu à cet effet), ensuite pour permettre à l’intégrateur de les pipeter facilement.</p>\n<h2 id=\"utilisez-des-typos-standards-\">Utilisez des typos standards…</h2>\n<p>Attention à ne pas faire dans l’excentricité. Certes, aujourd’hui la propriété <code>@font-face</code> permet de faire bien des choses pratiques, mais il y a mille et unes raisons (ou presque) pour qu&#39;une typo ne se charge pas. Réservez donc les polices &quot;excentriques&quot; à des textes particuliers, tels que les titres, le menu de navigation ou des encarts occasionnels. Pour ce qui est du contenu textuel, restez-en aux polices dites &quot;web safe&quot; dont <a href=\"http://www.anthony-brard.com/les-fonts-web-safe\">voici une liste</a> (pas forcément exhaustive).</p>\n<p>Vous pouvez bien sûr adapter en fonction de votre cible : pour un site à destination des utilisateurs de Windows Phone (par exemple), ou pour une majorité d’utilisateurs Windows, vous pouvez opter pour <em>Segoe UI</em>, qui sera très raccord avec le reste de l’environnement de travail. À l’inverse, pour le site de votre application OSX ou iOS, l’emploi de <em>Helvetica Neue</em> sera tout à fait approprié et safe puisque présente sur tous les systèmes Apple (du moins, ceux relativement récents).</p>\n<p>Dans tous les cas, <strong>pensez à fournir les fichiers des typos</strong> que vous utilisez à l’intégrateur.</p>\n<h2 id=\"-et-ne-les-modifiez-pas-\">… et ne les modifiez pas !</h2>\n<p>Il va sans dire que toute modification <em>corporelle</em> d’une typo est prohibée. J’entends par là modifier l’échelle horizontale ou verticale de celle-ci, ou bien utiliser les options <em>Faux-gras</em> ou <em>Faux-italique</em>, par exemple.</p>\n<h2 id=\"oubliez-les-ronds\">Oubliez les ronds</h2>\n<p>Avec le CSS3 est arrivé un super outil : la propriété <code>border-radius</code>. Bien que celle-ci se fasse un peu plus discrète ces derniers temps, avec l’avènement du flat-design et le contrecoup d’une utilisation beaucoup trop massive (et avec souvent beaucoup de mauvais goût), elle permet de s&#39;adonner aux joies des arrondis en CSS.</p>\n<p>Cependant, une exception à cette règle concerne les ronds parfaits contenant du texte. En effet, si un bouton rond contenant un picto (Comme l’icone de twitter) ne pose à priori aucun problème à l’intégrateur, la question d’un disque contenant du texte est beaucoup plus délicate.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-4.png\" alt=\"photoshop-problem-4\"></p>\n<p>Pour les raisons précédemment citées, la gestion du texte dans une page web est délicate. Or, la rondeur de cet élément repose sur la taille fixe de celui-ci (sinon, ça devient un ovale), car les dimensions d’un conteneur dépendent de son contenu. Il devient de facto très pénible d’obtenir le rendu souhaité en CSS pur, il faut donc ruser et adapter le texte à son conteneur — ce qui pose là encore certains soucis en CSS.</p>\n<p>Du reste, si l’intégrateur doit tenir compte de navigateurs antédiluviens (IE8 ou inférieur (ouille !)), il devra en sus utiliser une image pour le disque, ce qui l’obligera à encore plus d’ajustements de texte.</p>\n<p>Alors, utilisez les ronds avec parcimonie !</p>\n<h2 id=\"attention-avec-les-hauteurs-de-blocs\">Attention avec les hauteurs de blocs</h2>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/01/photoshop-problem-5.jpg\" alt=\"photoshop-problem-5\"></p>\n<p>De la même façon que le texte n’est pas contrôlable, la gestion des hauteurs est pour l’instant assez calamiteuse. La hauteur d’un élément se base par défaut sur son contenu. Afin d’obtenir un effet comme l’image ci-dessus, il faudrait donc forcer la hauteur des blocs, et espérer que le texte ne dépasse sur aucun support, ou que celui-ci ne vienne pas à être changé (le client peut vouloir ajouter une phrase). Gardez donc toujours en tête que la hauteur des éléments en CSS est très complexe à gérer (ce sera amélioré dans quelques temps, mais avant de pouvoir l’utiliser en production, il faudra bien quelques années).</p>\n<h2 id=\"attention-aux-rotations\">Attention aux rotations</h2>\n<p>Là encore, si la troisième <em>release</em> de CSS nous a apporté de sympathiques propriétés permettant — entre autres — d’appliquer une rotation à un élément, ces propriétés ne sont pas envisageables avant IE9, il convient donc de <strong>bien se renseigner sur la portée du projet</strong> avant toute chose.</p>\n<h2 id=\"utilisez-des-font-icons\">Utilisez des font-icons</h2>\n<p>Plutôt que de piocher des images sur <a href=\"https://www.iconfinder.com/\">iconfinder</a> (au demeurant très bon), <strong>pourquoi ne pas utiliser une font-icon</strong> ? En fonction des besoins, <a href=\"http://fortawesome.github.io/Font-Awesome/\">FontAwesome</a> ou <a href=\"http://genericons.com/\">Genericons</a> sont de très bons choix.</p>\n<p>D’abord, ça évitera à l’intégrateur-trice de devoir enregistrer chaque icône manuellement, devoir faire des sprites, et parfois utiliser des ruses de sioux pour des états différents (survol). Ensuite, ça évitera beaucoup de complications pour la gestion des différents supports, et des écrans (Par exemple, les fameux écrans Retina et leurs pendants chez la concurrence).</p>\n<p>Bref, à moins d’avoir des besoins très spécifiques en matière d’icones (plusieurs couleurs, par exemple), il n’y a aucune raison de ne point utiliser ces petits bijoux.</p>\n<h2 id=\"pr-voyez-plusieurs-cas-de-figure\">Prévoyez plusieurs cas de figure</h2>\n<p>Si vous faites un menu déroulant, faites le design de ce menu une fois déroulé. Prévoyez les différents états des onglets (standard, survolé, page en cours), des boutons, des liens, des champs de formulaire (focus), et des différentes interactions — s&#39;il doit y en avoir — de la page.</p>\n<p>De même, vérifiez avec votre chef de projet si le design doit être fluide, adaptatif, fixe, responsive… Et prévoyez les différentes modifications de la maquette en fonction des besoins — le plus courant étant de prévoir au moins une version mobile.</p>\n<p><strong>Pensez à tous les cas de figure </strong>!</p>\n<h2 id=\"gardez-des-tailles-de-police-coh-rentes\">Gardez des tailles de police cohérentes</h2>\n<p>Le rendu du texte par défaut (le contenu textuel) doit être le même partout, pour chaque page. Par défaut, la taille de texte d’un document web est définie à 16px, pour fournir un compromis entre confort de lecture et quantité de texte affichée. Vous pouvez bien sûr en changer, mais assurez-vous que cette taille soit la même pour toutes les pages. De même ne faites pas de variations entre les éléments occasionnels : la taille d’un titre devrait elle aussi rester la même d’une page à une autre, même si la mise en forme est différente (ça arrive, par exemple une page &quot;article&quot; et une page &quot;liste des articles&quot; ne sont pas forcément identiques).</p>\n<p>Enfin, <strong>assurez-vous d’utiliser des tailles de police réelles</strong>. Photoshop laisse la liberté de mettre des tailles totalement délirantes (23.58px) qu&#39;il n’est pas possible d’avoir en web. De même, gardez une cohérence au niveau des valeur : restez plutôt sur des nombres pairs et privilégiez des écarts logiques et linéaires (Par exemple de 8 pixels : 16px, 24px, 32px).</p>\n<h2 id=\"utilisez-des-grilles\">Utilisez des grilles</h2>\n<p>Un point essentiel du design de ces dernières années : l’arrivée des grilles. Elles permettent de structurer facilement ses pages, autant pour le designer que le codeur. Cela permet une cohérence visuelle impeccable et évite d’avoir à gérer plusieurs tailles différentes.</p>\n<p>Vous pouvez par exemple utiliser les scripts de <a href=\"http://960.gs/\">960.gs</a> (ou les modèles fournis), ou bien des <a href=\"http://www.ravelrumba.com/photoshop-grids/\" title=\"Photoshop Grids\">templates prédéfinis</a>. Plus d’explications dans cet article de Smashing Magazine : <a href=\"http://www.smashingmagazine.com/2011/11/09/establishing-your-grid-in-photoshop/\">&#39;Establishing your grid in photoshop (en)&#39;</a>.</p>\n<p>Demandez à votre intégrateur-trice ce qu&#39;il-elle utilise généralement, vous trouverez sûrement un outil commun.</p>\n<h2 id=\"attention-la-casse\">Attention à la casse</h2>\n<p>Il se peut que l’intégrateur-trice doive copier-coller les textes que vous aurez mis en maquette. Le contenu de certains projets est parfois validés directement en maquette, parfois dans des langues étrangères. J’ai eu le cas récemment avec du mongol, auquel je ne pige pas un broque : il m&#39;était impossible de réécrire le contenu moi-même. Pour ces raisons, faites attention à votre façon d’écrire du texte : <strong>Ne mettez jamais tout en majuscules</strong>. Si vous devez mettre un texte en capitales, utilisez le bouton &quot;Tout en capitales&quot; du panneau d’options <em>Caractère</em>. De la même façon, il m&#39;arrive de copier coller des textes et de me retrouver avec &#39;un ACCOMPAGNEMENT personnalisÉ&#39;. Faites donc attention à ce genre de détails, et écrivez de façon normale même si le rendu diffère.</p>\n<h2 id=\"les-modes-de-fusion\">Les modes de fusion</h2>\n<p>Photoshop propose différents modes de fonctionnement des calques entre eux :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/09/modes-de-fusion.jpg\" alt=\"Modes de fusion Photoshop\"></p>\n<p>Vous voyez de quoi je parle ? C&#39;est un outil très cool, pour faire plein d’effets sympatoches. Hé bien <strong>vous n’y touchez pas !</strong> Il est strictement impossible de reproduire ces effets en web. Alors n’en faites rien, sauf si vous pouvez aplatir le résultat final (et dans le doute, demandez, encore une fois).</p>\n<h2 id=\"conclusion-discutez-avec-tout-le-monde\">Conclusion : discutez avec tout le monde</h2>\n<p>La meilleure façon de ne pas compliquer le travail des autres reste encore d’en discuter avec eux au long du processus de création. Si l’intégrateur-trice chargé-e de mettre votre maquette en boîte n’est pas un gros manche et connaît un peu son métier, il-elle saura vous aiguiller sur certains points, vous conseiller sur ce qui fonctionne et ce qui est raisonnable, faisable ou inenvisageable en fonction des contraintes qui sont imposées sur le projet. De même, ces gens sont souvent de bon conseil en ce qui concerne la facilité de navigation ou la pertinence de certains éléments.</p>\n<p>La plupart des webdesigners avec qui j’ai travaillé n’ont en fait aucune formation en webdesign. Ce sont généralement des maquettistes print et/ou infographistes PAO reconvertis ou qui ont ajouté une compétence à leur panel d’activités. Si vous êtes dans ce cas, n’hésitez pas à chercher quelques journées de formation en webdesign, et lisez des bouquins qui pourront vous aider à vous imprégner plus efficacement du travail de webdesigner.</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;La maquette est une étape importante et ne doit pas être expédiée ni négligée. Les maquettes présentées au client devraient toujours d’abord être validées par des développeurs et des ergonomes.&lt;/div&gt;\n</p>\n"},{"title":"Colonne verticale sur toute la hauteur de page","author":"Emmanuel B.","date":"2015-07-21 21:55:38","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"colonne-verticale-sur-toute-la-hauteur-de-page","content":"<p>Mon site te plait, internaute ? Tu es jaloux-se de ma colonne latérale qui prend toute la hauteur de la page et tu cherches désespérément comment faire ? Tu as de la chance, tu es pile au bon endroit !</p>\n<p>Toute l’astuce repose sur un trompe-l’œil. Vous pouvez donc commencer par faire votre colonne tout à fait normalement.</p>\n<pre><code class=\"language-markup\">&lt;div class=&quot;colonne&quot;&gt;\n    &lt;div class=&quot;colonne-content&quot;&gt;\n        Du contenu !\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.colonne {\n    width: 320px;\n    background: #d5d5d5;\n    float: left;\n}\n</code></pre>\n<p>Oui, je sais : c&#39;est assez impressionnant.</p>\n<p>Vous pouvez bien sûr ajouter vos fioritures et votre contenu, mais globalement, tout ce dont vous avez besoin est là : une largeur, et un positionnement (Ici à gauche, mais vous pouvez le mettre à droite si vous voulez).</p>\n<p>Pour l’instant, votre colonne ne va pas jusqu&#39;en bas de votre écran, à moins que vous n’ayez beaucoup de contenu à l’intérieur. Alors pour ça, nous allons créer un petit trompe-l’œil au moyen d’un <strong>pseudo-élément</strong> (Si vous ne savez pas de quoi je parle, direction &#39;<a href=\"http://www.emmanuelbeziat.com/blog/principes-du-css-les-selecteurs-partie1-css2/\">Principes du CSS - Les sélecteurs</a>&#39;).</p>\n<pre><code class=\"language-css\">.colonne:after {\n    content: &quot;&quot;\n    position: fixed;\n    width: inherit;\n    background: inherit;\n    top: 0;\n    left: 0;\n    bottom: 0;\n}\n</code></pre>\n<p>On crée donc un pseudo-élément après notre colonne, avec un contenu vide. On lui attribue une position fixe, ce qui veut dire que l’élément sera lié à la fenêtre du navigateur, et non au contenu de votre page. Puis, on l’accroche à <code>0px</code> du haut de la fenêtre, du bas, et à gauche. Ainsi, cet élément ne bougera jamais, même si vous descendez dans la page : il fera toujours la largeur de la fenêtre. Enfin, on lui attribue la même largeur et la même couleur que notre colonne, via la valeur<code>inherit</code>.</p>\n<p>&lt;div class=&quot;note note--question&quot;&gt;Mais… Je ne vois plus ma colonne ! Qu&#39;est-ce qu&#39;il se passe ?&lt;/div&gt;\n\n</p>\n<p>En effet, si vous avez testé ce code, vous devez avoir remarqué que votre pseudo-élément couvre votre colonne et que celle-ci n’est plus visible. Pas de panique ! On va simplement positionner l’élément enfant <code>.colonne-content</code> pour ajouter une propriété <code>z-index</code>, qui va permettre de gérer la superposition des éléments. Plus la valeur est haute, plus l’élément est à l’avant-plan.</p>\n<p>Comme la propriété <code>z-index</code> ne fonctionne que sur des éléments positionné, on ajoute une position relative :</p>\n<pre><code class=\"language-css\">.colonne-content {\n    position: relative;\n    z-index: 10;\n}\n</code></pre>\n<p>Et c&#39;est tout ! Votre colonne fonctionne maintenant. En effet, votre &quot;vraie&quot; colonne va se comporter comme un élément normal, et se déplacer avec le reste de la page. Mais le pseudo-élément va continuer à rester ancrer à gauche de la fenêtre, et donner l’illusion que votre colonne prend toute la hauteur de votre site.</p>\n<p>Comme quoi, le CSS, c&#39;est aussi de la magie !</p>\n<p>Vous pouvez voir l’exemple en action sur <a href=\"http://codepen.io/EmmanuelB/pen/zGMxEN\">ce Codepen</a>.</p>\n<p>Merci à <a href=\"http://lamecarlate.net/\">Lamecarlate</a> et <a href=\"http://clement-galidie.fr/\">Clément</a> pour leurs ajouts.</p>\n"},{"title":"Centrer un élément absolu (ou fixed)","author":"Emmanuel B.","date":"2015-09-26 13:12:02","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"centrer-un-element-absolu-ou-fixed","content":"<p>Pas plus tard qu&#39;il y a pas longtemps, on utilisait des méthodes de barbare pour centrer nos éléments en CSS. Aujourd’hui, c&#39;est encore un peu la galère, même si <code>flexbox</code> arrive petit à petit à notre rescousse.</p>\n<p>Reste que pour centrer un élément positionné de façon absolue ou fixe, on ne peut pas encore faire de miracles. À moins que…</p>\n<h2 id=\"avant-\">Avant…</h2>\n<p>Avant, on partait du principe qu&#39;il fallait connaître la largeur de l’élément qu&#39;on voulait centrer. Alors on appliquait un top / left, puis un margin-top / left négatif, comme suit :</p>\n<pre><code class=\"language-css\">element {\n    position: absolute;\n    width: 400px;\n    left: 50%;\n    margin-left: -200px;\n}\n</code></pre>\n<p>Le problème, c&#39;est qu&#39;il faut que la taille soit fixe, et connue. Mais que se passe-t-il si la taille peut-être variable ? Hé, ouais.</p>\n<h2 id=\"maintenant-\">Maintenant !</h2>\n<p>Maintenant, on a une possibilité supplémentaire, en utilisant <code>transform</code> :</p>\n<pre><code class=\"language-css\">element {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n}\n</code></pre>\n<p>Il est possible de faire de même verticalement avec <code>top</code> et <code>translateY</code>. Ainsi, l’élément est centré sans avoir besoin de préciser une largeur ou une hauteur.</p>\n"},{"title":"Le problème du dev web d'aujourd'hui","author":"Emmanuel B.","date":"2015-10-07 02:34:00","tags":["bonnes pratiques"],"categories":["Diatribes"],"template":"post.vue","basename":"le-probleme-du-dev-web-daujourdhui","content":"<p>Ces dernières années, pas mal d’avancées ont été faites dans le domaine du web. L’arrivée de html5 mais surtout de CSS3, de nouvelles API, les nouvelles possibilités au sein des navigateurs, le versionning (svn, git), les <em>fonticons</em>, les préprocesseurs et la pléthore de nouveaux outils comme les <em>task-runners</em> ont permis de faire de grosses avancées en matière de <em>workflow</em>, de productivité et de possibilités.</p>\n<p>Pour autant, il me semble que tout ne soit pas rose… Petite réaction à chaud.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2015/10/web-moderne.png\" alt=\"web-moderne\"></p>\n<h2 id=\"je-suis-un-dinosaure-mais-je-me-soigne\">Je suis un dinosaure, mais je me soigne</h2>\n<p>J’ai été plutôt long à adopter certaines de ces nouveautés. Je n’utilise un <em>task-runner</em> (<a href=\"http://gulpjs.com/\">Gulp</a>) que depuis un an, je suis resté relativement frileux aux préprocesseurs avant de découvrir <a href=\"https://learnboost.github.io/stylus/\">Stylus</a> l’année dernière, et il m&#39;a fallu un moment avant de me convaincre d’utiliser <a href=\"http://bower.io/\">Bower</a> et <a href=\"https://getcomposer.org/\">Composer</a>.</p>\n<p>Pour autant, je prend conscience que freiner me fait prendre du retard, et j’essaie de m&#39;engager le plus possible en sens inverse, cherchant les nouveautés, me renseignant sur les nouvelles pratiques. Mais à force de tester pas mal de choses, je constate un problème dans ces nouveautés ; un problème récurrent qui me dérange un peu (Beaucoup, passionnément).</p>\n<h2 id=\"un-monde-de-d-pendances\">Un monde de dépendances</h2>\n<p>Un exemple simple : Pour utiliser Stylus (ou Sass, ou Less, etc.), il faut l’installer sur la machine sur laquelle on travaille. Oui, mais comment ? Hé bien il faut d’abord installer <a href=\"https://nodejs.org/\">NodeJS</a>. Peu importe l’environnement sur lequel je suis (OSX, Windows, Linux), il me faut à présent lancer la console, et taper une commande pour installer Stylus :</p>\n<p>$ npm install -g stylus~~~</p>\n<p>Et là, on a touché du doigt les deux premiers problèmes que je vois dans cette nouvelle ère.</p>\n<h3 id=\"tout-est-interd-pendant\">Tout est interdépendant</h3>\n<p>Il n’y a plus rien, ou presque, qui soit <em>standalone</em>. Pour utiliser un outil, il faut installer des outils permettant d’installer les outils qui permettent d’installer l’outil qu&#39;on veut utiliser. Outre le fait que ce soit un parcours du combattant au moindre besoin, c&#39;est surtout très pénible. NodeJS permet de faire énormément de choses, notamment de lancer un serveur et de travailler en JS comme langage client (En lieue et place de PHP, par exemple). C&#39;est super cool, d’ailleurs. Mais moi, je n’en ai besoin QUE pour installer des dépendances (Gulp, Bower…) et lancer celles-ci. J’installe donc une petite usine à gaz pour tirer deux manettes. Bon.</p>\n<h3 id=\"la-console-en-2015-\">La console, en 2015 ?!</h3>\n<p>Sérieusement ? Alors certes, ça permet de gagner du temps de développement, car il n’y a pas à développer d’interface. Mais bon dieu, l’informatique a trouvé sa place dans nos foyers parce qu&#39;on a ajouté une interface graphique.</p>\n<p>Oui, moi aussi j’aime me la péter un peu devant un néophyte en tapouillant trois lignes qui font des couleurs et défilent du texte en mode hacker d’Hollywood. Mais en vrai, dans la pratique, c&#39;est chiant. En plus de tout ce que je fais déjà, je dois lancer ma console, écrire manuellement le chemin de mon dossier de travail (Et pour peu que j’aie besoin de trois onglets différents, je dois faire ça trois fois), et écrire ma commande. Commande que je dois soit connaître par cœur, soit aller chercher sur la doc.</p>\n<p>À titre d’exemple, voilà le &quot;minimum&quot; de code que je tape pour utiliser un task-runner en fonction de mes besoins &quot;simples&quot;. Et la commande n’est que le début, après il me faut paramétrer tout le fonctionnement ; même si je peux réutiliser d’anciens modèles.</p>\n<p><del>~$ npm install --save-dev gulp gulp-stylus gulp-concat gulp-uglify gulp-plumber gulp-sourcemaps gulp-imagemin gulp-rename gulp-autoprefixer</del>~</p>\n<p>Pour peu que j’utilise <a href=\"http://jade-lang.com/\">Jade</a> et <a href=\"http://coffeescript.org/\">CoffeeScript</a>, il faut ajouter d’autres dépendances. Encore heureux qu&#39;il n’y ai pas trente-six commandes. Mais la console quoi… <strong>En 2015, putain !</strong></p>\n<h2 id=\"mais-tout-n-est-pas-centralis-non-plus-\">Mais tout n’est pas centralisé non plus…</h2>\n<p>Alors les dépendances, c&#39;est une chose. Le problème, c&#39;est que tout n’est pas centralisé non plus. Exemple très simple là aussi : <a href=\"https://getcomposer.org/\">Composer</a>. Composer permet d’installer des dépendances PHP (comme des Framework, des classes…). Exactement ce que fait <a href=\"http://bower.io/\">Bower</a>, qui permet d’installer des choses aussi ; mais pas les mêmes choses.</p>\n<h3 id=\"des-outils-identiques-pour-des-l-ments-diff-rents\">Des outils identiques pour des éléments différents</h3>\n<p>Un problème dans l’autre sens, donc : les outils sont dépendants, ont des dépendances, mais ne dépendent pas des mêmes éléments. Ainsi, si je veux utiliser Lumen (Un Framework PHP), il me faut donc Composer. Celui-ci ne passe pas par <a href=\"https://nodejs.org/en/\">NodeJS</a> (J’ai donc installé un premier outil pour faire &quot;peu&quot; de choses sur tout ce qu&#39;il peut faire, mais il ne peut pas faire autre chose dont j’aurais besoin. Ah.). Composer s&#39;installe donc soit via l’outil Curl (qu&#39;il vous faut donc avoir installé, lui aussi), soit en téléchargement manuel via PHP, soit via un installeur sous Windows. Pour que son installation se déroule correctement, il faut que PHP soit configuré sur ma machine, donc que j’aie un ×AMP (Wamp, Lamp, Mamp, ou autres outils du même genre). J’y reviendrais plus tard…</p>\n<p>Donc, une fois que j’ai Composer, il faut que j’installe mes outils (Frameworks, Classes)… Via la console, avec une commande. Mais pas la même qu&#39;avec NodeJS, puisqu&#39;il n’utilise pas ce dernier — vous suivez ? Hop, deux docs ouvertes, et d’autres commandes à retenir.</p>\n<p>~~~$ curl -sS <a href=\"https://getcomposer.org/installer\">https://getcomposer.org/installer</a> | php\n$ mv composer.phar /usr/local/bin/composer</p>\n<p>$ composer require slim/slim~~~</p>\n<p>Bon, c&#39;est bien, ça marche. Mais je voudrais aussi utiliser jQuery et Bootstrap… Ah, mais pour ceux-là il faut Bower ! Bien, donc j’installe aussi Bower, un outil qui sert à installer des dépendances. Comme Composer. Comme NodeJS, aussi. Donc <strong>j’installe des installeurs de dépendances</strong>. Oui, oui. Bien sûr, Bower a ses propres commandes pour installer ses dépendances, sinon ce ne serait pas drôle. Hop, trois docs ouvertes.</p>\n<h2 id=\"mes-dossiers-sont-sales-\">Mes dossiers sont sales !</h2>\n<p>Je suis maniaque. J’aime que mes dossiers soient propres, rangés, bien nommés ; que mes projets soient bien ordonnés. Avec NodeJS, j’installe des dossiers de diverses saloperies dans chacun de mes projets (Que je dois réinstaller à chaque projet, toujours à la ligne de commande). autant de dossiers lourds, que je peux certes cacher par la suite. <strong>Composer va me faire un dossier supplémentaire pour ajouter son merdier</strong>. Grmbl. Et la cerise, c&#39;est Bower, qui non content d’ajouter son bazar, est très peu rigoureux sur la forme : chaque dépendance clone un <em>repository</em> entier, avec<strong> tout ce qui ne m&#39;intéresse à priori pas</strong> (gulpfile, gruntfiles, de quoi installer les dépendances de ma dépendance (Argh !), des fichiers de démo, des docs, une licence, un <em>readme</em>…). De plus, comme chacun fait un peu ce qu&#39;il veut, il est quasi impossible d’automatiser une tâche pour chaque dépendance afin de récupérer le ou les fichiers qui nous intéressent au milieu du fourbi, parce que l’auteur est libre de mettre lesdits fichiers où il le veut, avec l’arborescence qui lui sied. Donc en plus d’avoir du merdier, j’ai encore du travail.</p>\n<p>Et surtout, <strong>j’ai pourri mon PC/Mac avec une tonne de logiciels</strong> qui ne me servent qu&#39;à installer des logiciels. Et j’ai horreur de ça.</p>\n<h2 id=\"encore-plus-au-fond\">Encore plus au fond</h2>\n<p>Allons encore plus loin dans le problème : je parlais plus haut des outils pour émuler un serveur de façon locale (Wamp, Lamp, Mamp et consorts). Oui, mais ça c&#39;est fini ! Aujourd’hui, on utilise <a href=\"http://www.vagrantup.com\">Vagrant</a>, et on crée une machine virtuelle par projet (ou presque).</p>\n<p>Alors ne nous méprenons pas : Vagrant est un outil intéressant, qui apporte des réponses à des problèmes de dev courants.</p>\n<p>Le problème, c&#39;est que pour faire fonctionner Vagrant, il nous faut aussi un autre outil : <a href=\"https://www.virtualbox.org/\">VirtualBox</a>. En gros, Vagrant ne sert qu&#39;à créer des mini-machine virtuelles, paramétrées selon nos besoins du moment ; mais il lui faut donc de quoi lancer les machines virtuelles, donc un outil de virtualisation, et un OS à installer (Très souvent une distribution Linux, ce qui n’est déjà pas simple à gérer de base, mais là croyez-moi c&#39;est du grand art).</p>\n<p>Outre le fait que la procédure est longue et pas toujours bien renseignée en fonction de ce qu&#39;on cherche, tout est toujours en ligne de commande :</p>\n<p><del>~$ vagrant init hashicorp/precise32\n$ vagrant up</del>~</p>\n<p>Mais surtout, pour utiliser pleinement les outils de Vagrant, il va falloir installer des dépendances pour ce dernier. Avec ses propres commandes. Hop, une doc de plus. Donc, pour installer des dépendances à Vagrant, il faut… Installer une dépendance, qui va installer les dépendances. Et allez ! On se tourne donc vers Chef, on lance une commande Vagrant, et on l’installe. Et ça marche… Jusqu&#39;à ce qu&#39;on veuille installer des dépendances ; là, il faut installer ChefDK, un ensemble de classes pour Chef, cette fois via git ou un installer Windows (qui ne demande pas dans quel dossier s&#39;installer et se fout à la racine du disque C:/. Pour la petite histoire, cette faute lui a vallu une désinstallation immédiate de ma bécane, et je n’ai donc toujours pas de VagrantBox sur mon PC).</p>\n<h2 id=\"et-c-est-pas-fini-\">Et c&#39;est pas fini !</h2>\n<p>Ajoutons à tout ça qu&#39;il nous faut généralement aussi installer et configurer git, qui s&#39;utilise — mais vous le savez déjà ou l’avez deviné — en ligne de commandes. Et celles-ci, elles sont velues en plus. Même chez les plus chevronnés de l’outil, certains problèmes qui se posent parce que Jean-Bertrand a <em>commit</em> sur la branche de préprod’ que Jeanne-Syvlie était en train de <em>merge</em> alors que François-Eugène faisait un <em>checkout</em>, et on est parti pour deux heures à fouiller dans la doc, essayer toutes les commandes existantes, et bloquer le taff de tout le monde.</p>\n<p>~~~$ git stash create &quot;Stash message&quot;\n$ git pull --rebase\n$ git stash clear\n$ git commit -m &quot;Commit message&quot;\n$ git push</p>\n<p>En sus, on ajoute à ça un petit accès SSH, le besoin de gérer des clés pour tout le monde…</p>\n<p>Et surtout, il faut que tout ce merdier soit actif en permanence pour pouvoir bosser. Je ne peux plus faire une petite retouche rapide en ouvrant l’ordi avec un sandwiche dans le bec, profitant d’une borne Wifi : il faut lancer l’IDE (c&#39;est souvent lourd), lancer le serveur local, ouvrir la console, taper le chemin vers le dossier, lancer une commande, faire ma modification, enregistrer, vérifier qu&#39;elle est prise en compte lancer une commande pour envoyer ma modif. Et ça, c&#39;est la version &quot;facile&quot;, pour peu qu&#39;il faille se connecter à un VPN et gérer les <em>commits</em> dans un Tracker un peu mal foutu (<a href=\"https://code.google.com/p/gerrit/\">Gerrit</a>, par exemple), il faut en plus aller sur un site, s&#39;y connecter et valider sa modif&#39; manuellement. Évidemment, je n’en parle pas, mais 15 outils qui tournent en permanence pour en faire fonctionner deux, ce n’est pas économe.</p>\n<h2 id=\"des-possibilit-s-futures-\">Des possibilités futures ?</h2>\n<p>Alors oui, on a gagné beaucoup de choses, comme je le disais en introduction. Et tous les outils que je viens de critiquer ont un très bon propos : apporter une solution à un problème. Et généralement, ils le font bien. Mais on a aussi entassé une surcharge de merdes inutiles : on télécharge 80 fichiers pour 6 qui nous intéressent réellement, on installe 15 logiciels pour utiliser trois outils, et on utiliser des outils archaïques pour ce faire.</p>\n<p>Et <strong>c&#39;est pour ça que j’espère, de tout mon cœur, qu&#39;une solution va être trouvée</strong> à ce merdier. Il y a déjà certaines applications qui essaient de faciliter le travail : par exemple, <a href=\"https://incident57.com/codekit/\">CodeKit</a>, qui sert de task-runner, compilant différents langages et effectuant diverses opérations, le tout avec une interface graphique. Une bonne idée ; malheureusement l’outil n’est disponible que sur OSX d’une part, et n’est pas très fiable à l’utilisation d’autre part… Comme la plupart des outils du genre que j’ai pu tester (<a href=\"http://wearekiss.com/simpless\">Simpless</a>, <a href=\"http://koala-app.com/\">Koala</a>, et je ne me souviens pas des autres), il trouve vite ses limites en terme de configuration, de portabilité, de réactivité, et de fiabilité. Et même si ces applications doivent elles aussi tourner en permanence en tâche de fond lorsqu&#39;on bosse, elles ont au moins le bon goût de ne pas installer quinze dossiers de dépendances dans mes projets. Malheureusement au prix d’une portabilité entre collaborateurs relativement pauvre, qui oblige très souvent à configurer chacun son poste à chaque projet, voire à reconfigurer à chaque fois que quelqu&#39;un <em>commit</em> (j’ai eu le soucis).</p>\n<p>Côté Git, il y a <a href=\"https://git-scm.com/download/gui/linux\">pas mal de clients graphiques</a>, dont mon préféré, <a href=\"https://www.sourcetreeapp.com/\">SourceTree</a>. Néanmoins, on se retrouve ici aussi avec un lot de problèmes : traductions approximative, labellisation de tâches qui n’ont rien à voir avec les noms des commandes…</p>\n<h3 id=\"tout-n-est-pas-cirrhose-comme-disait-l-alcoolique-\">Tout n’est pas cirrhose (Comme disait l’alcoolique)</h3>\n<p>Ne nous méprenons pas, je ne crache pas sur tous ces outils par simple frustration de ne pas m&#39;en sortir avec (Même qu&#39;à part Vagrant (qu&#39;on m&#39;a conseillé à l’instant de délaisser pour <a href=\"https://www.docker.com/\">Docker</a>), je m&#39;en sors pas mal !). Je pense que ces outils répondent à des besoins, qu&#39;ils améliorent notre travail ; mais je pense aussi qu&#39;on peut faire mieux.</p>\n<p>Pour revenir sur l’exemple de la console, pas mal de développeurs adorent cet outil. Pour autant, je pense <strong>qu&#39;il pourrait être largement amélioré</strong>. Pourquoi pas un explorateur de fichiers intégré, qui permette de cibler rapidement son dossier, de lancer des commandes (Relatives au projet et/ou aux possibilités du fichier) via un simple clic droit ? Ou inversement, un explorateur de fichiers avec console intégré, qui fasse tout ça aussi ?</p>\n<p>De la même façon, Git (et les autres outils de <em>versionning</em>) sont d’une importance capitale, les vieilles méthodes via FTP étant absolument intenables en cas de travail à plusieurs (modifications écrasées, etc.). Pour autant, l’outil en question est suffisamment complexe pour générer à son tour de nouveaux problèmes et de nouveaux besoins, auxquels on répond par de nouveaux outils supplémentaires…</p>\n<h3 id=\"que-voulons-nous-\">Que voulons-nous ?</h3>\n<p>Je ne sais pas pour vous, mais moi, je veux un outil pour les gérer tous. Je veux un (ou plusieurs, mais qu&#39;ils fassent tous ça) gestionnaire de dépendance centralisé, qui me permette d’installer du PHP aussi bien que du Javascript si ça me chante, sans avoir à passer par cinquante tiers ni intermédiaires. Je veux que les dépendances que j’utilise n’aient pas besoin de faire cinquante dossiers et de télécharger trouzmille fichiers par projets. Je veux ne pas avoir à passer deux heures à paramétrer manuellement des tâches automatiques, à chaque projet. Je veux me concentrer sur mon boulot, comme un guitariste de rock se concentre sur son jeu et sur la musique, pendant que le roadie et les techs gèrent ce qu&#39;il y a à gérer (en l’occurrence, que le logiciel soit le roadie et le tech, et que je n’aie pas besoin d’un sysadmin à chaque fois que je veux un outil).</p>\n<p>Pas vous ?</p>\n"},{"title":"Un site qui prend toute la hauteur disponible","author":"Emmanuel B.","date":"2015-10-25 22:35:01","tags":["html/css"],"categories":["Tutoriels"],"template":"post.vue","basename":"un-site-qui-prend-toute-la-hauteur-disponible","content":"<p>Lorsqu&#39;on crée un design dont la particularité est que le pied de page soit toujours au bas de l’écran, on se heurte à un petit soucis de conception : comment définir une hauteur minimale à la fenêtre ?</p>\n<p>Nous allons voir plusieurs solutions possibles, à choisir en fonction de vos besoins.</p>\n<p>&lt;div class=&quot;note note--info&quot;&gt;Ce tutoriel date un peu (2013), mais je suis en train de lui faire une petite remise à jour, incluant de nouvelles méthodes plus modernes et plus efficaces. Je n’ai pas encore détaillé toutes ces nouvelles méthodes, mais le code est disponible.&lt;/div&gt;\n\n</p>\n<p>Tout d’abord, comprenons bien de quoi l’on parle dans ce tutoriel, et pour cela, nous allons d’abord illustrer le problème.</p>\n<p>Lorsqu&#39;un site possède une hauteur totale plus grande que l’écran sur lequel il est vu, on peut alors descendre la page vers le bas, jusqu&#39;au bas de la page en question ; là, le défilement est arrêté, le pied-de-page, ou &quot;footer&quot; en anglais, est alors fixé naturellement au bas de la page et de l’écran.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/tuto1-01.png\" alt=\"Illustration du tutoriel\"> <img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/tuto1-02.png\" alt=\"Illustration du tutoriel\"></p>\n<p>Mais dans le cas où la hauteur totale de la page est inférieure à la hauteur de l’écran, alors le pied-de-page, toujours placé au bas de la page, n’atteint pas le bas de l’écran.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/tuto1-03.png\" alt=\"Illustration du tutoriel\"></p>\n<p>Si certains design ne sont pas gênés par cette éventualité, ce n’est pas le cas de tous. Pour palier à ce problème, nous allons devoir faire en sorte que le design adopte la taille du contenu si la taille de la page est supérieure à la taille de l’écran, mais que la taille minimale de la page ne puisse pas être inférieure cette dernière.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/tuto1-04.png\" alt=\"Illustration du tutoriel\"></p>\n<p>Nous allons maintenant voir comment faire ceci.</p>\n<h2 id=\"la-vieille-m-thode-ie-7-\">La vieille méthode (IE 7+)</h2>\n<h3 id=\"le-html\">Le html</h3>\n<p>Nous partons sur cette base html :</p>\n<pre><code class=\"language-markup\">&lt;div class=&quot;page&quot;&gt;\n    &lt;div class=&quot;bloc-principal&quot;&gt;\n        &lt;header class=&quot;site-header&quot;&gt;&lt;/header&gt;\n        &lt;main class=&quot;site-content&quot;&gt;\n            &lt;div class=&quot;sidebar&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;texte&quot;&gt;&lt;/div&gt;\n        &lt;/main&gt;&lt;!-- contenu --&gt;\n    &lt;/div&gt;&lt;!-- fin bloc-principal --&gt;\n    &lt;footer class=&quot;main-footer&quot;&gt;&lt;/footer&gt;\n&lt;/div&gt;&lt;!-- fin page --&gt;\n</code></pre>\n<p>Ce n’est qu&#39;un exemple de site de base ; vous pouvez bien sûr utiliser votre propre site.</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2013/07/tuto1-05.png\" alt=\"Illustration du tutoriel\"></p>\n<p>&lt;div class=&quot;note note--question&quot;&gt;Pourquoi mettre le pied de page (footer) en dehors du bloc principal ?&lt;/div&gt;\n\n</p>\n<p>Toute l’astuce est là, c&#39;est le fait de placer le pied-de-page en dehors du bloc du contenu qui va permettre de le fixer au bas de la page, mais aussi de l’empêcher de passer par-dessus le texte du contenu.</p>\n<h3 id=\"le-css-en-action\">Le CSS en action</h3>\n<p>La première étape est donc de donner à <code>&lt;html&gt;</code> une hauteur de 100% (correspondant à toute la hauteur de la fenêtre), qui servira de hauteur de référence pour les balises enfants et les valeurs en pourcentage que nous allons leur donner par la suite. En effet, la valeur relative &quot;100%&quot; doit correspondre à quelque chose : c&#39;est donc &quot;100% de la fenêtre&quot; pour <code>&lt;html&gt;</code>. La première balise enfant étant <code>&lt;body&gt;</code>, nous lui attribuons également cette valeur pour qu&#39;elle adote une hauteur de &quot;100% de <code>&lt;html&gt;</code>&quot;. Ainsi, nous pourrons positionner le footer facilement au bas de l’écran dans sa position &quot;minimale&quot;.</p>\n<pre><code class=\"language-css\">html, body { height: 100% }\n</code></pre>\n<p>N’oubliez pas d’ajouter ultérieurement un <code>margin: 0</code> sur <code>body</code> afin de ne pas avoir de barre de défilement.</p>\n<p>Il nous faut ensuite donner à notre conteneur principal, &quot;page&quot;, une hauteur de 100%. Mais nous n’allons pas utiliser la propriété height, car celle-ci défini une hauteur définitive ; à la place, nous ferons usage de <code>min-height</code>, qui défini une hauteur minimale pour le conteneur : ainsi, Si la fenêtre est plus grande que la page, alors le conteneur prendra toute la hauteur disponible, mais ne sera jamais plus petite que 100% -soit la taille du contenu de la page- et ne chevauchera donc jamais ledit contenu.</p>\n<p>Il faut également préparer le positionnement du pied-de-page au bas du conteneur, aussi nous appliquons un paramètre de position relative à page.</p>\n<pre><code class=\"language-css\">.page {\n    min-height: 100%;\n    position: relative;\n}\n</code></pre>\n<p>Nous passons maintenant au conteneur <code>bloc-principal</code>. L’astuce consiste à lui attribuer une marge interne de la hauteur du pied-de-page (ici, 100px). Cela a pour but de bien définir la fin du conteneur à la fin de son contenu. Sans ce paramètre, vous vous rendrez compte que le pied-de-page se superposerait au bas du contenu sur 120px, soit sa propre hauteur.</p>\n<pre><code class=\"language-css\">.bloc-principal {\n    padding-bottom: 100px;\n}\n</code></pre>\n<p>Maintenant, nous nous attaquons au pied-de-page. Il faut que celui-ci ait tout d’abord une hauteur définie (même s&#39;il s&#39;agit d’un pourcentage), puis il faut lui affecter un positionnement absolu. Comme son parent direct, le conteneur <code>page</code>, est en positionnement relatif, <code>footer</code> se sert de cette référence pour savoir où se positionner. Enfin, grâce au positionnement absolu, il suffira d’accrocher le conteneur au bas du bloc parent. On ajoute également <code>left</code> et <code>right</code> afin que le bloc prenne toute la largeur.</p>\n<pre><code class=\"language-css\">.site-footer {\n    height: 100px;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n}\n</code></pre>\n<p>Et nous y voici ! Il est à noter que le pied de page doit avoir du contenu pour être affiché, à cause de son positionnement absolu.</p>\n<p>Vous pouvez voir le code en action sur <a href=\"http://codepen.io/EmmanuelB/pen/rfCey\">Codepen</a>.</p>\n<h2 id=\"la-m-thode-interm-diaire-ie-8-\">La méthode intermédiaire (IE 8+)</h2>\n<p>Voici une méthode utilisant les propriétés <code>display: table-*</code> :</p>\n<pre><code class=\"language-markup\">&lt;body&gt;\n    &lt;div class=&quot;page&quot;&gt;\n        &lt;header class=&quot;site-header&quot;&gt;&lt;/header&gt;\n\n        &lt;main class=&quot;site-content&quot;&gt;&lt;/main&gt;\n\n        &lt;footer class=&quot;site-footer&quot;&gt;&lt;/footer&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<pre><code class=\"language-css\">html,\nbody {\n    height: 100%\n}\n\nbody {\n    margin: 0\n}\n\n.page {\n    display: table;\n    width: 100%;\n    height: 100%;\n}\n\n.site-header,\n.site-content,\n.site-footer {\n    display: table-row\n}\n</code></pre>\n<p>Ainsi, on obtient le même résultat, avec moins d’efforts. Il sera toutefois nécessaire de spécifier une hauteur (ou une hauteur maximale) au header et au footer.</p>\n<h2 id=\"la-m-thode-moderne-ie-9-\">La méthode moderne (IE 9+)</h2>\n<p>Cette méthode nécessite qu&#39;on connaisse la hauteur du pied de page.</p>\n<p>Nous avons besoin de cette base html :</p>\n<pre><code class=\"language-markup\">&lt;div class=&quot;bloc-principal&quot;&gt;\n    &lt;div class=&quot;site-header&quot;&gt;&lt;/div&gt;\n    &lt;main class=&quot;contenu&quot;&gt;\n    &lt;/main&gt;\n&lt;/div&gt;\n&lt;div class=&quot;site-footer&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>Puis nous allons utiliser une simple astuce à base de <code>vh</code> et de <code>calc()</code>. Pour expliquer très sommairement, <code>vh</code> permet de définir une hauteur relative au <em>viewport</em> (la fenêtre de navigation), et <code>calc()</code> permet de faire une opération simple en CSS. Pour toute information complémentaire, consultez votre moteur de recherche préféré !</p>\n<p>Partons du principe que notre pied de page fait ici 40px de haut.</p>\n<pre><code class=\"language-css\">body {\n    margin: 0\n}\n\n.bloc-principal {\n    min-height: calc(100vh - 40px)\n}\n</code></pre>\n<p>Hé oui, c&#39;est tout. On dit au bloc principal de faire au minimum la totalité de la hauteur de la fenêtre, moins la hauteur du pied de page. Malin, non ?</p>\n<h2 id=\"la-m-thode-moderne-am-lior-e-ie-10-\">La méthode moderne améliorée (IE 10+)</h2>\n<p>Pour celle-ci, on va utiliser <code>flexbox</code>, une propriété toute récente, dont je vous invite à <a href=\"http://caniuse.com/#feat=flexbox\" title=\"CanIUse Flexbox ?\">vérifier la compatibilité</a>.</p>\n<p>&lt;div class=&quot;note note--important&quot;&gt;Flexbox n’est pas sensé être utilisé pour un gabarit de page, c&#39;est normalement le module CSS <code>grid</code> à qui revient cette charge. Cependant, l’écriture des spécifications de <code>flexbox</code> est presque terminé et la propriété est implémentée dans tous les navigateurs modernes, alors que <code>grid</code> est encore en <em>working draft</em>, et n’est implémenté que dans Internet Explorer 10+ et Edge.&lt;/div&gt;\n\n</p>\n<pre><code class=\"language-markup\">&lt;body&gt;\n    &lt;div class=&quot;page&quot;&gt;\n        &lt;header class=&quot;site-header&quot;&gt;&lt;/header&gt;\n\n        &lt;main class=&quot;site-content&quot;&gt;&lt;/main&gt;\n\n        &lt;footer class=&quot;site-footer&quot;&gt;&lt;/footer&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>Nous allons donc simplement appliquer <code>display: flex;</code> à <code>body</code>, et spécifier le comportement de ses descendants direct en tant que colonnes. Puis nous diront simplement à <code>.site-content</code> d’utiliser toute la hauteur disponible.</p>\n<pre><code class=\"language-css\">body {\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\n\n.site-content {\n    flex: 1;\n}\n</code></pre>\n<p>C&#39;est tout !</p>\n<h2 id=\"la-m-thode-de-demain\">La méthode de demain</h2>\n<p>À priori, il viendra un temps où nous utiliseront le module grid afin de faire le squelette de notre site (Et flexbox sera utilisé pour la gestion fine du contenu). Pour en savoir plus, je vous suggère de lire <a href=\"http://www.alsacreations.com/article/lire/1388-css3-grid-layout.html\">cet article sur Alsacréations</a>.</p>\n"},{"title":"Le nouveau logo d'Instagram ? On s'en fout !","author":"Emmanuel B.","date":"2016-05-27 04:24:14","tags":["design"],"categories":["Diatribes"],"template":"post.vue","basename":"le-nouveau-logo-dinstagram-on-sen-fout","content":"<p>C&#39;est LE grand événement qui secoue la toile. La famine, la guerre ne comptent plus. Même Nabilla est reléguée au second plan médiatique. Parce qu’être Charlie ça va un temps, mais il ne faut pas non plus exagérer ! Oui, aujourd’hui, le grand malheur d&#39;internet, c’est <strong>le nouveau logo d&#39;Instagram</strong>.</p>\n<p>Si si, je te jure. Parce qu’il est tellement moche que &#39;même mon petit frère fait mieux sous paint&#39; (j’ai déjà entendu ça quelque part…).</p>\n<p>D’ordinaire, je me tamponne littéralement l’oreille de toutes ces tragédies qui secouent le merveilleux quotidien des braves gens (qui n’aiment pas que l’on suive une autre route qu’eux ♪♫). Mais le débat dérive beaucoup sur le <em>flat design</em>, et comme le design j’aime bien ça (et le flat design aussi)… Hé ben maintenant, j’ai envie d’en parler aussi !</p>\n<p>Et je vais commencer par le point que tout le monde semble ne pas voir :</p>\n<h2 id=\"le-vieux-logo-tait-mauvais-\">Le vieux logo était mauvais !</h2>\n<p>Boum, j’attaque direct ! Ça dénonce sévère ici !</p>\n<p>Non mais sérieusement, je vais étayer un peu mon propos, et en arriver à la conclusion précédemment citée (qui en fait sert d’introduction, parce que je regarde plein de documentaires conspirationnistes alors je sais comment on fait pour persuader n’importe qui de n’importe quoi).</p>\n<h2 id=\"qu-est-ce-qui-fait-un-bon-logo-\">Qu’est-ce qui fait un bon logo ?</h2>\n<p>Le logo, c’est la tête d’une marque. Un bon logo est un signe fort, une garantie de reconnaissance, d’une facilité marketing. Pour faire un bon logo, <strong>il faut une bonne idée</strong>. Quelque chose d’original, de marquant, d’ingénieux, ou d’original (ou encore mieux : tout à la fois !).</p>\n<p>On reconnaît un excellent logo (et un excellent <strong>branding</strong> en général) au fait qu’il soit intemporel. Par exemple, le logotype d’une célèbre boisson gazeuse à base de feuille de coca, pratiquement inchangé depuis plus d’un siècle : aucune ride, aucun doute possible. Une typo qui est toujours dans l’air du temps, que ce soit en 1920, en 1987 ou en 2016. Exemple d’un mauvais <em>branding</em> : son concurrent de toujours, qui a eu tellement de logos, de typographies et d’années d’errances visuelles qu’il est impossible à la majorité de la population de le décrire de tête (faites l’expérience).</p>\n<p>Alors certes, le logo de la marque du père-noël (je vous avais dit que j’aime regarder des vidéos avec des théories débiles !) n’est pas un modèle d’ingéniosité, mais il marche parfaitement (et on verra pourquoi ci-après). Mais des idées de logos superbement créatifs, on en trouve à la pelle sur internet : <a href=\"http://www.awwwards.com/99-creative-logo-designs-for-inspiration.html\">99 creative logo designs for inspiration</a>. Regardez &quot;Fish Food&quot;, &quot;Loveclip&quot;, &quot;Motion&quot;, &quot;Fence&quot;, &quot;Turn&quot;, &quot;Twins&quot;, &quot;Up&quot;, &quot;Antartica&quot;, &quot;One&quot;, &quot;Cook Finder&quot;, &quot;Horror Films&quot;, &quot;Rocket Golf&quot;, &quot;Lab&quot;, &quot;Killed&quot;, &quot;Sushi&quot;, &quot;Choose&quot;, &quot;Bison&quot;, &quot;Wiesinger Music&quot;, &quot;Pencil&quot;… À chaque fois, une idée simple mais brillante. Un logo simple mais ingénieux. Il y en a plein, cherchez-en d’autres !</p>\n<p>Mais surtout, vous avez noté ? Tous ces logos… Ils ne seraient pas un peu <em>flat design</em>, peuchère ?</p>\n<h2 id=\"les-effets-quoi-a-sert-\">Les effets, à quoi ça sert ?</h2>\n<p>En effet, un bon logo n’a besoin d’aucun artifice ! Récemment (bon, ok, il y a 10 ans), la mode du « web 2.0 » — propulsée par l’accès au haut-débit pour tous, le piratage facile de Photoshop et la démocratisation de l’informatique à domicile même chez les prolos comme moi — nous apportait une vague d’amateurisme dans le monde du design et du web (va checker mon super article &#39;<a href=\"https://www.emmanuelbeziat.com/blog/linformatique-facile-ma-tue/\">L’informatique facile m’a tué</a>&#39;, j’cause du sujet). L’amateurisme, avec sa bite et son couteau, a décidé de planquer son manque d’inspiration derrière une ignoble mode du « shiny-glossy-3d-futuro-classy-owi-owi-tu-la-sens-bien-ma-trentaine-de-filtres-toshop », déjà bien engagée par Aqua (Apple) et Aero (Microsoft).</p>\n<p>Aucun besoin d’être original ou créatif : tant qu&#39;il y a plein de reflets et d’ombres, c’est trop la classe. MarieJulien en parlent très bien ici (avec de bons exemples) : &#39;<a href=\"http://mariejulien.com/post/2007/12/10/Tutorial-illustrator%3A-comment-faire-un-bon-gros-logo-web20-qui-tache\">Tutorial Illustrator : comment faire un bon gros logo web 2.0 qui tâche</a>&#39;.</p>\n<p>Alors encore une fois, c’est là de la bonne grosse généralité : tout ce qui a des effets n’est pas moche ou à jeter. Mais on a vraiment assisté à une bonne décennie d’agression visuelle et mentale, la médiocrité et la pauvreté créative masquée habilement derrière la « technique » (je me gausse).</p>\n<h2 id=\"un-bon-logo-design-n-a-pas-besoin-d-artifices\">Un bon logo/design n’a pas besoin d’artifices</h2>\n<p>C’est tout.</p>\n<p>Fort de toutes ces réflexions, regardons le logo d&#39;Instagram : c’est un polaroïd. Bon.</p>\n<p>Et ? Hé ben c’est tout. C’est aussi nul que ça. Le logo de Kodak était mieux foutu : il intégrait un appareil photo dans l’initiale du nom de la marque. Mais là, non. C’est nul. Vide. Creux.</p>\n<p>Des logos comme ça, même moi qui suis aussi créatif qu’une pelle, je peux en faire plein ! Nike ? Mmmh, allez, une godasse de sport avec des reflets, ça va le faire ! Pour Carrefour, mmh… J’imagine bien un caddie, mais stylisé tu vois ? McDo par contre c’est facile : un hamburger, avec des ombres sur le côté droit.</p>\n<p>Alors entendons-nous bien : un appareil photo, une babouche, ou une rondelle de steak, ça peut être de très bonnes idées ; mais à la condition seulement d’avoir l’étincelle créative (et le travail qui va avec) qui rendra le tout ingénieux. Comme pour &quot;Fish Food&quot;, &quot;Fence&quot;, etc. Parce que sans ça, c’est juste l’illustration du sujet, et ça n’a aucun intérêt.</p>\n<p>Alors oui : le nouveau logo d’Instagram est moche. Basique, simple, et n’exprime rien. Mais <strong>ce n’est pas une question de flat design</strong> ! Ce logo a toujours été mauvais. La base est basique, simple et n’exprime rien non plus ! Et le fait de l’avoir &lt;del&gt;sobrement&lt;/del&gt; décoré de jolis reflets, de petites ombres et de trois couches de <em>lens flare</em> (coucou J.J Abrahams !) ne peut rien y changer.</p>\n<h4 id=\"avec-une-id-e-de-base-foireuse-le-r-sultat-sera-pourri-peu-importe-le-traitement-\">Avec une idée de base foireuse, le résultat sera pourri ; peu importe le traitement.</h4>\n<p>Un exemple visuel pour s’en convaincre dans ce très bon article : &#39;<a href=\"http://roberthacala.com/are-you-a-victim-of-bad-brand-design\" title=\"Robert Hacala\">Are you victim of a bad brand design? — Robert Hacala</a>&#39;.</p>\n<p>À la limite, ce nouveau logo Instagram intègre l’idée de filtre de tons, ce qui est quand même LE truc qui a rendu l’app populaire (rendre les photos quelconques et moches intéressantes en leur donnant un semblant de personnalité grâce à des filtres). Donc ma foi, celui-ci est peut-être plus dans le ton (haha !) que son prédécesseur.</p>\n<p>Bref, arrêtez d’étaler votre haine sur Twitter, pitié. Vous vous souvenez du tout premier logo de l’app (c’est une question rhétorique, je sais que vous ne vous en souvenez pas ; vous ne le connaissez probablement même pas) ? Bon, dans trois mois ce sera pareil avec le nouveau : vous ne vous souviendrez pas du précédent.</p>\n<p>Si vous avez peur du moindre changement, sachez qu’il existe une règle :</p>\n<blockquote>\n<p>La version <em>n-1</em> semble toujours meilleure que la version <em>n</em>. Vous oublierez toujours que vous avez craché la version <em>n-1</em> à sa sortie, et vous cracherez toujours sur la version <em>n+1</em> quand elle sortira.</p>\n</blockquote>\n<h2 id=\"un-point-sur-le-flat-design\">Un point sur le flat design</h2>\n<h3 id=\"le-flat-a-toujours-exist-\">Le flat a toujours existé</h3>\n<p>Il évolue, il grandit, il change, mais il a toujours été là. Non, ce n’est pas une mode : c’est un rafraichissant retour à la moelle du métier.</p>\n<p>Concrètement, on vient de voir que ce qui fait un bon logo / design, c’est l’idée qu’il véhicule, et comment il respecte (voire sublime) la thématique de la marque ou de l’entreprise. Et l’exemple de tous les logos géniaux que j’ai montré plus haut est parlant. Une bonne idée n’a pas besoin de se cacher derrière des effets. On peut même faire le pronostic inverse : si un logo / design est bourré d’effets, c’est probablement qu’il compense un manque de bonnes idées.</p>\n<p>Un bon logo doit pouvoir être réutilisé sur n’importe quel support, à n’importe quel taille, être toujours reconnaissable avec une seule couleur, avec un contraste différent… Bref, il doit être à l’épreuve de tout. Si le fait d’enlever un effet rend le tout brouillon, difficile à comprendre ou reconnaître, c’est que son design est mauvais. Et la simplicité du <em>flat</em>, sous toutes ses formes (comme le <strong>Material design</strong> de Google) est une réponse logique et cohérente.</p>\n<p>Le <em>flat</em> est un ensemble de règles de création, rien de plus. Il n’oblige personne à faire un carré biseauté, un rond et un point pour représenter un appareil photo. Il pose juste les bases pour obtenir un résultat simple, sobre et exploitable en toutes circonstances.</p>\n<p>C’est comme avec n’importe quel courant artistique : on peut faire du très bon cubisme, du très mauvais académique, du baroque raté, de l’impressionnisme génial, et de l’art moderne intéressant. Il en va de même pour le flat ou pour le glossy.</p>\n<h3 id=\"la-connerie\">La connerie</h3>\n<p>Au cours d’un « débat » sur le <em>flat design</em>, quelqu’un m’a sorti une excellente ânerie : &#39;Le cerveau est habitué à voir des objets réels, il a besoin de détails pour reconnaître un objet, sinon ça le fatigue !&#39;</p>\n<p>À quiconque croirait à ces stupides sornettes, laissez-moi vous montrer ceci :</p>\n<p><img src=\"https://www.emmanuelbeziat.com/wp-content/uploads/2016/05/smile-flat.png\" alt=\"smile-flat\"></p>\n<p>Vous avez immédiatement vu un visage qui sourit (sinon, c’est que vous avez probablement un problème neuronal ; ou que vous êtes d’une extrême mauvaise foi). Alors que si on est un peu honnête, il ne s’agit pas d’un visage, mais d’un cercle et de trois courbes.</p>\n<p>Au contraire de cette affirmation stupide, le cerveau est parfaitement capable de reconnaître très rapidement une représentation simple d’un objet comme étant l’objet lui-même. C’est une question de survie.</p>\n<p>Pour en savoir un peu plus, je vous recommande cette vidéo de la géniale chaîne YouTube <a href=\"\">e-penser</a> : &#39;10 choses insensées que votre cerveau sait faire sans e-penser&#39;. Il y a justement dedans le sujet de la paréidolie.</p>\n<p>&lt;div class=&quot;video&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/7GiQuG2S26Q&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;\n</p>\n"}]}
